digraph g {
13[label="void decompress()"]
7[label="byte[] getBuffer()"]
8[label="void <init>(int,byte[])"]
9[label="void <init>(byte[])"]
25[label="int readBytes(byte[],int)"]
33[label="void clBlock()"]
11[label="void compress()"]
30[label="int readByte()"]
19[label="void push(byte)"]
32[label="void output(int)"]
10[label="void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)"]
26[label="void init(int)"]
14[label="void set(int,byte)"]
35[label="int of(int)"]
5[label="int getLength()"]
17[label="void writeByte(byte)"]
21[label="int of(int)"]
24[label="int getMaxCode()"]
28[label="void <init>()"]
18[label="byte pop()"]
23[label="void clear(int)"]
6[label="spec.benchmarks.compress.OutputBuffer performAction(byte[],int,int,byte[])"]
12[label="void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)"]
1[label="void runCompress(int)"]
3[label="int getLength()"]
15[label="void set(int,int)"]
16[label="boolean isEmpty()"]
22[label="int getCode()"]
27[label="void <init>()"]
34[label="void set(int,int)"]
29[label="void <init>()"]
38[label="void writebytes(byte[],int)"]
39[label="void <init>()"]
2[label="long getCRC()"]
4[label="long getCRC()"]
36[label="void clear()"]
20[label="byte of(int)"]
31[label="void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)"]
0[label="long inst_main(int)"]
37[label="int hsize()"]
32->38[label="virtualinvoke $r9.<spec.benchmarks.compress.OutputBuffer: void writebytes(byte[],int)>($r8, $i37)"]
32->38[label="virtualinvoke $r2.<spec.benchmarks.compress.OutputBuffer: void writebytes(byte[],int)>($r1, $i8)"]
12->29[label="specialinvoke $r6.<spec.benchmarks.compress.CodeTable: void <init>()>()"]
11->21[label="virtualinvoke $r10.<spec.benchmarks.compress.CodeTable: int of(int)>(i24)"]
11->21[label="virtualinvoke $r11.<spec.benchmarks.compress.CodeTable: int of(int)>(i24)"]
12->30[label="virtualinvoke $r22.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
12->30[label="virtualinvoke $r20.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
12->30[label="virtualinvoke $r3.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
12->31[label="specialinvoke r0.<spec.benchmarks.compress.CompBase: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>(r1, r2)"]
10->17[label="virtualinvoke $r9.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b11)"]
10->17[label="virtualinvoke $r6.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b6)"]
10->17[label="virtualinvoke $r8.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b7)"]
1->2[label="virtualinvoke r3.<spec.benchmarks.compress.OutputBuffer: long getCRC()>()"]
1->2[label="virtualinvoke r2.<spec.benchmarks.compress.OutputBuffer: long getCRC()>()"]
1->3[label="virtualinvoke r2.<spec.benchmarks.compress.OutputBuffer: int getLength()>()"]
1->3[label="virtualinvoke r2.<spec.benchmarks.compress.OutputBuffer: int getLength()>()"]
1->3[label="virtualinvoke r3.<spec.benchmarks.compress.OutputBuffer: int getLength()>()"]
1->4[label="virtualinvoke r1.<spec.benchmarks.compress.Harness$Source: long getCRC()>()"]
1->5[label="virtualinvoke r1.<spec.benchmarks.compress.Harness$Source: int getLength()>()"]
1->5[label="virtualinvoke r1.<spec.benchmarks.compress.Harness$Source: int getLength()>()"]
1->6[label="staticinvoke <spec.benchmarks.compress.Compress: spec.benchmarks.compress.OutputBuffer performAction(byte[],int,int,byte[])>($r7, $i2, 0, $r10)"]
1->6[label="staticinvoke <spec.benchmarks.compress.Compress: spec.benchmarks.compress.OutputBuffer performAction(byte[],int,int,byte[])>($r13, $i5, 1, $r16)"]
1->7[label="virtualinvoke r1.<spec.benchmarks.compress.Harness$Source: byte[] getBuffer()>()"]
11->32[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void output(int)>(-1)"]
11->32[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void output(int)>(i19)"]
11->32[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void output(int)>(i19)"]
13->14[label="virtualinvoke $r8.<spec.benchmarks.compress.Decompressor$SuffixTable: void set(int,byte)>(i19, $b9)"]
11->34[label="virtualinvoke $r7.<spec.benchmarks.compress.Compressor$HashTable: void set(int,int)>(i24, i23)"]
11->33[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void clBlock()>()"]
13->17[label="virtualinvoke $r1.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b2)"]
13->17[label="virtualinvoke $r5.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b6)"]
11->36[label="virtualinvoke $r4.<spec.benchmarks.compress.Compressor$HashTable: void clear()>()"]
10->24[label="virtualinvoke r0.<spec.benchmarks.compress.Compressor: int getMaxCode()>()"]
13->18[label="virtualinvoke $r4.<spec.benchmarks.compress.Decompressor$DeStack: byte pop()>()"]
11->35[label="virtualinvoke $r5.<spec.benchmarks.compress.Compressor$HashTable: int of(int)>(i24)"]
11->35[label="virtualinvoke $r8.<spec.benchmarks.compress.Compressor$HashTable: int of(int)>(i24)"]
13->15[label="virtualinvoke $r7.<spec.benchmarks.compress.CodeTable: void set(int,int)>(i19, i15)"]
13->16[label="virtualinvoke $r6.<spec.benchmarks.compress.Decompressor$DeStack: boolean isEmpty()>()"]
11->37[label="virtualinvoke $r2.<spec.benchmarks.compress.Compressor$HashTable: int hsize()>()"]
11->37[label="virtualinvoke $r3.<spec.benchmarks.compress.Compressor$HashTable: int hsize()>()"]
11->30[label="virtualinvoke $r1.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
11->30[label="virtualinvoke $r12.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
32->17[label="virtualinvoke $r11.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b45)"]
13->19[label="virtualinvoke $r3.<spec.benchmarks.compress.Decompressor$DeStack: void push(byte)>($b5)"]
13->19[label="virtualinvoke $r12.<spec.benchmarks.compress.Decompressor$DeStack: void push(byte)>($b12)"]
13->19[label="virtualinvoke $r10.<spec.benchmarks.compress.Decompressor$DeStack: void push(byte)>($b11)"]
10->29[label="specialinvoke $r4.<spec.benchmarks.compress.CodeTable: void <init>()>()"]
10->31[label="specialinvoke r0.<spec.benchmarks.compress.CompBase: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>(r1, r2)"]
13->22[label="specialinvoke r0.<spec.benchmarks.compress.Decompressor: int getCode()>()"]
13->22[label="specialinvoke r0.<spec.benchmarks.compress.Decompressor: int getCode()>()"]
13->22[label="specialinvoke r0.<spec.benchmarks.compress.Decompressor: int getCode()>()"]
13->23[label="virtualinvoke $r13.<spec.benchmarks.compress.CodeTable: void clear(int)>(256)"]
32->24[label="virtualinvoke r0.<spec.benchmarks.compress.Compressor: int getMaxCode()>()"]
32->24[label="virtualinvoke r0.<spec.benchmarks.compress.Compressor: int getMaxCode()>()"]
33->36[label="virtualinvoke $r1.<spec.benchmarks.compress.Compressor$HashTable: void clear()>()"]
13->20[label="virtualinvoke $r9.<spec.benchmarks.compress.Decompressor$SuffixTable: byte of(int)>(i17)"]
13->20[label="virtualinvoke $r2.<spec.benchmarks.compress.Decompressor$SuffixTable: byte of(int)>(i17)"]
13->21[label="virtualinvoke $r11.<spec.benchmarks.compress.CodeTable: int of(int)>(i17)"]
33->32[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void output(int)>(256)"]
22->24[label="virtualinvoke r0.<spec.benchmarks.compress.Decompressor: int getMaxCode()>()"]
22->24[label="virtualinvoke r0.<spec.benchmarks.compress.Decompressor: int getMaxCode()>()"]
22->25[label="virtualinvoke $r2.<spec.benchmarks.compress.InputBuffer: int readBytes(byte[],int)>($r1, $i1)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.compress.Harness: void runCompress(int)>(i0)"]
10->39[label="specialinvoke $r3.<spec.benchmarks.compress.Compressor$HashTable: void <init>()>()"]
12->23[label="virtualinvoke $r9.<spec.benchmarks.compress.CodeTable: void clear(int)>(256)"]
12->24[label="virtualinvoke r0.<spec.benchmarks.compress.Decompressor: int getMaxCode()>()"]
6->8[label="specialinvoke $r4.<spec.benchmarks.compress.InputBuffer: void <init>(int,byte[])>(i0, r0)"]
12->27[label="specialinvoke $r8.<spec.benchmarks.compress.Decompressor$DeStack: void <init>()>()"]
6->9[label="specialinvoke $r5.<spec.benchmarks.compress.OutputBuffer: void <init>(byte[])>(r1)"]
12->28[label="specialinvoke $r7.<spec.benchmarks.compress.Decompressor$SuffixTable: void <init>()>()"]
12->26[label="virtualinvoke $r10.<spec.benchmarks.compress.Decompressor$SuffixTable: void init(int)>(256)"]
11->15[label="virtualinvoke $r6.<spec.benchmarks.compress.CodeTable: void set(int,int)>(i24, $i16)"]
6->10[label="specialinvoke $r7.<spec.benchmarks.compress.Compressor: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>(r2, r3)"]
6->12[label="specialinvoke $r6.<spec.benchmarks.compress.Decompressor: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>(r2, r3)"]
6->11[label="virtualinvoke $r7.<spec.benchmarks.compress.Compressor: void compress()>()"]
6->13[label="virtualinvoke $r6.<spec.benchmarks.compress.Decompressor: void decompress()>()"]
}