digraph g {
1[label="void decompress()"]
6[label="void <init>(int,byte[])"]
5[label="void <init>(byte[])"]
20[label="void clBlock()"]
32[label="int readBytes(byte[],int)"]
3[label="void compress()"]
12[label="int readByte()"]
27[label="void push(byte)"]
17[label="void output(int)"]
4[label="void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)"]
22[label="void init(int)"]
15[label="int of(int)"]
31[label="void set(int,byte)"]
11[label="void writeByte(byte)"]
16[label="int of(int)"]
8[label="int getMaxCode()"]
25[label="void <init>()"]
23[label="void clear(int)"]
29[label="byte pop()"]
0[label="spec.benchmarks.compress.OutputBuffer performAction(byte[],int,int,byte[])"]
2[label="void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)"]
18[label="void set(int,int)"]
30[label="boolean isEmpty()"]
19[label="void set(int,int)"]
24[label="void <init>()"]
26[label="int getCode()"]
9[label="void <init>()"]
10[label="void <init>()"]
21[label="void writebytes(byte[],int)"]
14[label="void clear()"]
28[label="byte of(int)"]
7[label="void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)"]
13[label="int hsize()"]
1->18[label="virtualinvoke $r7.<spec.benchmarks.compress.CodeTable: void set(int,int)>(i19, i15)"]
20->14[label="virtualinvoke $r1.<spec.benchmarks.compress.Compressor$HashTable: void clear()>()"]
26->32[label="virtualinvoke $r2.<spec.benchmarks.compress.InputBuffer: int readBytes(byte[],int)>($r1, $i1)"]
3->12[label="virtualinvoke $r1.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
3->12[label="virtualinvoke $r12.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
1->31[label="virtualinvoke $r8.<spec.benchmarks.compress.Decompressor$SuffixTable: void set(int,byte)>(i19, $b9)"]
3->13[label="virtualinvoke $r2.<spec.benchmarks.compress.Compressor$HashTable: int hsize()>()"]
3->13[label="virtualinvoke $r3.<spec.benchmarks.compress.Compressor$HashTable: int hsize()>()"]
1->30[label="virtualinvoke $r6.<spec.benchmarks.compress.Decompressor$DeStack: boolean isEmpty()>()"]
3->14[label="virtualinvoke $r4.<spec.benchmarks.compress.Compressor$HashTable: void clear()>()"]
3->15[label="virtualinvoke $r5.<spec.benchmarks.compress.Compressor$HashTable: int of(int)>(i24)"]
3->15[label="virtualinvoke $r8.<spec.benchmarks.compress.Compressor$HashTable: int of(int)>(i24)"]
3->16[label="virtualinvoke $r10.<spec.benchmarks.compress.CodeTable: int of(int)>(i24)"]
3->16[label="virtualinvoke $r11.<spec.benchmarks.compress.CodeTable: int of(int)>(i24)"]
3->17[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void output(int)>(-1)"]
3->17[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void output(int)>(i19)"]
3->17[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void output(int)>(i19)"]
26->8[label="virtualinvoke r0.<spec.benchmarks.compress.Decompressor: int getMaxCode()>()"]
26->8[label="virtualinvoke r0.<spec.benchmarks.compress.Decompressor: int getMaxCode()>()"]
3->18[label="virtualinvoke $r6.<spec.benchmarks.compress.CodeTable: void set(int,int)>(i24, $i16)"]
3->19[label="virtualinvoke $r7.<spec.benchmarks.compress.Compressor$HashTable: void set(int,int)>(i24, i23)"]
1->16[label="virtualinvoke $r11.<spec.benchmarks.compress.CodeTable: int of(int)>(i17)"]
2->25[label="specialinvoke $r7.<spec.benchmarks.compress.Decompressor$SuffixTable: void <init>()>()"]
2->24[label="specialinvoke $r8.<spec.benchmarks.compress.Decompressor$DeStack: void <init>()>()"]
2->23[label="virtualinvoke $r9.<spec.benchmarks.compress.CodeTable: void clear(int)>(256)"]
1->11[label="virtualinvoke $r1.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b2)"]
1->11[label="virtualinvoke $r5.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b6)"]
17->21[label="virtualinvoke $r9.<spec.benchmarks.compress.OutputBuffer: void writebytes(byte[],int)>($r8, $i37)"]
17->21[label="virtualinvoke $r2.<spec.benchmarks.compress.OutputBuffer: void writebytes(byte[],int)>($r1, $i8)"]
2->22[label="virtualinvoke $r10.<spec.benchmarks.compress.Decompressor$SuffixTable: void init(int)>(256)"]
0->1[label="virtualinvoke $r6.<spec.benchmarks.compress.Decompressor: void decompress()>()"]
1->29[label="virtualinvoke $r4.<spec.benchmarks.compress.Decompressor$DeStack: byte pop()>()"]
0->2[label="specialinvoke $r6.<spec.benchmarks.compress.Decompressor: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>(r2, r3)"]
0->3[label="virtualinvoke $r7.<spec.benchmarks.compress.Compressor: void compress()>()"]
0->4[label="specialinvoke $r7.<spec.benchmarks.compress.Compressor: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>(r2, r3)"]
0->5[label="specialinvoke $r5.<spec.benchmarks.compress.OutputBuffer: void <init>(byte[])>(r1)"]
0->6[label="specialinvoke $r4.<spec.benchmarks.compress.InputBuffer: void <init>(int,byte[])>(i0, r0)"]
2->7[label="specialinvoke r0.<spec.benchmarks.compress.CompBase: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>(r1, r2)"]
2->10[label="specialinvoke $r6.<spec.benchmarks.compress.CodeTable: void <init>()>()"]
2->8[label="virtualinvoke r0.<spec.benchmarks.compress.Decompressor: int getMaxCode()>()"]
4->7[label="specialinvoke r0.<spec.benchmarks.compress.CompBase: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>(r1, r2)"]
4->8[label="virtualinvoke r0.<spec.benchmarks.compress.Compressor: int getMaxCode()>()"]
4->9[label="specialinvoke $r3.<spec.benchmarks.compress.Compressor$HashTable: void <init>()>()"]
17->8[label="virtualinvoke r0.<spec.benchmarks.compress.Compressor: int getMaxCode()>()"]
17->8[label="virtualinvoke r0.<spec.benchmarks.compress.Compressor: int getMaxCode()>()"]
20->17[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void output(int)>(256)"]
17->11[label="virtualinvoke $r11.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b45)"]
1->28[label="virtualinvoke $r9.<spec.benchmarks.compress.Decompressor$SuffixTable: byte of(int)>(i17)"]
1->28[label="virtualinvoke $r2.<spec.benchmarks.compress.Decompressor$SuffixTable: byte of(int)>(i17)"]
1->27[label="virtualinvoke $r12.<spec.benchmarks.compress.Decompressor$DeStack: void push(byte)>($b12)"]
1->27[label="virtualinvoke $r3.<spec.benchmarks.compress.Decompressor$DeStack: void push(byte)>($b5)"]
1->27[label="virtualinvoke $r10.<spec.benchmarks.compress.Decompressor$DeStack: void push(byte)>($b11)"]
1->26[label="specialinvoke r0.<spec.benchmarks.compress.Decompressor: int getCode()>()"]
1->26[label="specialinvoke r0.<spec.benchmarks.compress.Decompressor: int getCode()>()"]
1->26[label="specialinvoke r0.<spec.benchmarks.compress.Decompressor: int getCode()>()"]
4->10[label="specialinvoke $r4.<spec.benchmarks.compress.CodeTable: void <init>()>()"]
3->20[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void clBlock()>()"]
1->23[label="virtualinvoke $r13.<spec.benchmarks.compress.CodeTable: void clear(int)>(256)"]
4->11[label="virtualinvoke $r9.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b11)"]
4->11[label="virtualinvoke $r6.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b6)"]
4->11[label="virtualinvoke $r8.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b7)"]
2->12[label="virtualinvoke $r22.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
2->12[label="virtualinvoke $r20.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
2->12[label="virtualinvoke $r3.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
}