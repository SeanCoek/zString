digraph g {
12[label="void decompress()"]
1[label="byte[] getBuffer()"]
7[label="void <init>(int,byte[])"]
8[label="void <init>(byte[])"]
23[label="int readBytes(byte[],int)"]
36[label="void clBlock()"]
10[label="void compress()"]
26[label="int readByte()"]
16[label="void push(byte)"]
34[label="void output(int)"]
9[label="void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)"]
30[label="void init(int)"]
22[label="void set(int,byte)"]
33[label="int of(int)"]
2[label="int getLength()"]
14[label="void writeByte(byte)"]
18[label="int of(int)"]
24[label="int getMaxCode()"]
28[label="void <init>()"]
15[label="void clear(int)"]
19[label="byte pop()"]
3[label="spec.benchmarks.compress.OutputBuffer performAction(byte[],int,int,byte[])"]
11[label="void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)"]
0[label="void runCompress(int)"]
4[label="int getLength()"]
21[label="void set(int,int)"]
20[label="boolean isEmpty()"]
13[label="int getCode()"]
29[label="void <init>()"]
35[label="void set(int,int)"]
27[label="void <init>()"]
37[label="void writebytes(byte[],int)"]
38[label="void <init>()"]
5[label="long getCRC()"]
6[label="long getCRC()"]
32[label="void clear()"]
17[label="byte of(int)"]
25[label="void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)"]
31[label="int hsize()"]
11->25[label="specialinvoke r0.<spec.benchmarks.compress.CompBase: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>(r1, r2)"]
11->24[label="virtualinvoke r0.<spec.benchmarks.compress.Decompressor: int getMaxCode()>()"]
11->27[label="specialinvoke $r6.<spec.benchmarks.compress.CodeTable: void <init>()>()"]
11->26[label="virtualinvoke $r22.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
11->26[label="virtualinvoke $r20.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
11->26[label="virtualinvoke $r3.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
34->24[label="virtualinvoke r0.<spec.benchmarks.compress.Compressor: int getMaxCode()>()"]
34->24[label="virtualinvoke r0.<spec.benchmarks.compress.Compressor: int getMaxCode()>()"]
9->14[label="virtualinvoke $r9.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b11)"]
9->14[label="virtualinvoke $r6.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b6)"]
9->14[label="virtualinvoke $r8.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b7)"]
11->29[label="specialinvoke $r8.<spec.benchmarks.compress.Decompressor$DeStack: void <init>()>()"]
11->28[label="specialinvoke $r7.<spec.benchmarks.compress.Decompressor$SuffixTable: void <init>()>()"]
10->18[label="virtualinvoke $r10.<spec.benchmarks.compress.CodeTable: int of(int)>(i24)"]
10->18[label="virtualinvoke $r11.<spec.benchmarks.compress.CodeTable: int of(int)>(i24)"]
3->7[label="specialinvoke $r4.<spec.benchmarks.compress.InputBuffer: void <init>(int,byte[])>(i0, r0)"]
36->34[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void output(int)>(256)"]
3->8[label="specialinvoke $r5.<spec.benchmarks.compress.OutputBuffer: void <init>(byte[])>(r1)"]
3->9[label="specialinvoke $r7.<spec.benchmarks.compress.Compressor: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>(r2, r3)"]
10->21[label="virtualinvoke $r6.<spec.benchmarks.compress.CodeTable: void set(int,int)>(i24, $i16)"]
10->26[label="virtualinvoke $r1.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
10->26[label="virtualinvoke $r12.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
9->24[label="virtualinvoke r0.<spec.benchmarks.compress.Compressor: int getMaxCode()>()"]
34->14[label="virtualinvoke $r11.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b45)"]
9->27[label="specialinvoke $r4.<spec.benchmarks.compress.CodeTable: void <init>()>()"]
11->30[label="virtualinvoke $r10.<spec.benchmarks.compress.Decompressor$SuffixTable: void init(int)>(256)"]
36->32[label="virtualinvoke $r1.<spec.benchmarks.compress.Compressor$HashTable: void clear()>()"]
9->25[label="specialinvoke r0.<spec.benchmarks.compress.CompBase: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>(r1, r2)"]
3->12[label="virtualinvoke $r6.<spec.benchmarks.compress.Decompressor: void decompress()>()"]
13->24[label="virtualinvoke r0.<spec.benchmarks.compress.Decompressor: int getMaxCode()>()"]
13->24[label="virtualinvoke r0.<spec.benchmarks.compress.Decompressor: int getMaxCode()>()"]
10->31[label="virtualinvoke $r2.<spec.benchmarks.compress.Compressor$HashTable: int hsize()>()"]
10->31[label="virtualinvoke $r3.<spec.benchmarks.compress.Compressor$HashTable: int hsize()>()"]
12->13[label="specialinvoke r0.<spec.benchmarks.compress.Decompressor: int getCode()>()"]
12->13[label="specialinvoke r0.<spec.benchmarks.compress.Decompressor: int getCode()>()"]
12->13[label="specialinvoke r0.<spec.benchmarks.compress.Decompressor: int getCode()>()"]
10->33[label="virtualinvoke $r5.<spec.benchmarks.compress.Compressor$HashTable: int of(int)>(i24)"]
10->33[label="virtualinvoke $r8.<spec.benchmarks.compress.Compressor$HashTable: int of(int)>(i24)"]
13->23[label="virtualinvoke $r2.<spec.benchmarks.compress.InputBuffer: int readBytes(byte[],int)>($r1, $i1)"]
10->32[label="virtualinvoke $r4.<spec.benchmarks.compress.Compressor$HashTable: void clear()>()"]
12->16[label="virtualinvoke $r12.<spec.benchmarks.compress.Decompressor$DeStack: void push(byte)>($b12)"]
12->16[label="virtualinvoke $r3.<spec.benchmarks.compress.Decompressor$DeStack: void push(byte)>($b5)"]
12->16[label="virtualinvoke $r10.<spec.benchmarks.compress.Decompressor$DeStack: void push(byte)>($b11)"]
10->35[label="virtualinvoke $r7.<spec.benchmarks.compress.Compressor$HashTable: void set(int,int)>(i24, i23)"]
12->17[label="virtualinvoke $r9.<spec.benchmarks.compress.Decompressor$SuffixTable: byte of(int)>(i17)"]
12->17[label="virtualinvoke $r2.<spec.benchmarks.compress.Decompressor$SuffixTable: byte of(int)>(i17)"]
10->34[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void output(int)>(-1)"]
10->34[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void output(int)>(i19)"]
10->34[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void output(int)>(i19)"]
12->14[label="virtualinvoke $r1.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b2)"]
12->14[label="virtualinvoke $r5.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b6)"]
12->15[label="virtualinvoke $r13.<spec.benchmarks.compress.CodeTable: void clear(int)>(256)"]
10->36[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void clBlock()>()"]
9->38[label="specialinvoke $r3.<spec.benchmarks.compress.Compressor$HashTable: void <init>()>()"]
3->10[label="virtualinvoke $r7.<spec.benchmarks.compress.Compressor: void compress()>()"]
3->11[label="specialinvoke $r6.<spec.benchmarks.compress.Decompressor: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>(r2, r3)"]
0->1[label="virtualinvoke r1.<spec.benchmarks.compress.Harness$Source: byte[] getBuffer()>()"]
0->2[label="virtualinvoke r1.<spec.benchmarks.compress.Harness$Source: int getLength()>()"]
0->2[label="virtualinvoke r1.<spec.benchmarks.compress.Harness$Source: int getLength()>()"]
0->3[label="staticinvoke <spec.benchmarks.compress.Compress: spec.benchmarks.compress.OutputBuffer performAction(byte[],int,int,byte[])>($r7, $i2, 0, $r10)"]
0->3[label="staticinvoke <spec.benchmarks.compress.Compress: spec.benchmarks.compress.OutputBuffer performAction(byte[],int,int,byte[])>($r13, $i5, 1, $r16)"]
0->4[label="virtualinvoke r2.<spec.benchmarks.compress.OutputBuffer: int getLength()>()"]
0->4[label="virtualinvoke r2.<spec.benchmarks.compress.OutputBuffer: int getLength()>()"]
0->4[label="virtualinvoke r3.<spec.benchmarks.compress.OutputBuffer: int getLength()>()"]
12->18[label="virtualinvoke $r11.<spec.benchmarks.compress.CodeTable: int of(int)>(i17)"]
0->5[label="virtualinvoke r1.<spec.benchmarks.compress.Harness$Source: long getCRC()>()"]
12->19[label="virtualinvoke $r4.<spec.benchmarks.compress.Decompressor$DeStack: byte pop()>()"]
0->6[label="virtualinvoke r3.<spec.benchmarks.compress.OutputBuffer: long getCRC()>()"]
0->6[label="virtualinvoke r2.<spec.benchmarks.compress.OutputBuffer: long getCRC()>()"]
12->21[label="virtualinvoke $r7.<spec.benchmarks.compress.CodeTable: void set(int,int)>(i19, i15)"]
12->22[label="virtualinvoke $r8.<spec.benchmarks.compress.Decompressor$SuffixTable: void set(int,byte)>(i19, $b9)"]
11->15[label="virtualinvoke $r9.<spec.benchmarks.compress.CodeTable: void clear(int)>(256)"]
34->37[label="virtualinvoke $r9.<spec.benchmarks.compress.OutputBuffer: void writebytes(byte[],int)>($r8, $i37)"]
34->37[label="virtualinvoke $r2.<spec.benchmarks.compress.OutputBuffer: void writebytes(byte[],int)>($r1, $i8)"]
12->20[label="virtualinvoke $r6.<spec.benchmarks.compress.Decompressor$DeStack: boolean isEmpty()>()"]
}