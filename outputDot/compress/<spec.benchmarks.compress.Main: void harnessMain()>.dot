digraph g {
10[label="void decompress()"]
4[label="byte[] getBuffer()"]
15[label="void <init>(int,byte[])"]
14[label="void <init>(byte[])"]
22[label="void clBlock()"]
41[label="int readBytes(byte[],int)"]
12[label="void compress()"]
27[label="int readByte()"]
0[label="void harnessMain()"]
38[label="void push(byte)"]
21[label="void output(int)"]
13[label="void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)"]
34[label="void init(int)"]
26[label="int of(int)"]
35[label="void set(int,byte)"]
5[label="int getLength()"]
20[label="void writeByte(byte)"]
25[label="int of(int)"]
17[label="int getMaxCode()"]
31[label="void <init>()"]
33[label="void clear(int)"]
37[label="byte pop()"]
6[label="spec.benchmarks.compress.OutputBuffer performAction(byte[],int,int,byte[])"]
11[label="void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)"]
3[label="void runCompress(int)"]
7[label="int getLength()"]
24[label="void set(int,int)"]
36[label="boolean isEmpty()"]
23[label="void set(int,int)"]
32[label="void <init>()"]
40[label="int getCode()"]
18[label="void <init>()"]
19[label="void <init>()"]
30[label="void writebytes(byte[],int)"]
1[label="long runBenchmark()"]
8[label="long getCRC()"]
9[label="long getCRC()"]
28[label="void clear()"]
39[label="byte of(int)"]
16[label="void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)"]
2[label="long inst_main(int)"]
29[label="int hsize()"]
11->17[label="virtualinvoke r0.<spec.benchmarks.compress.Decompressor: int getMaxCode()>()"]
12->29[label="virtualinvoke $r2.<spec.benchmarks.compress.Compressor$HashTable: int hsize()>()"]
12->29[label="virtualinvoke $r3.<spec.benchmarks.compress.Compressor$HashTable: int hsize()>()"]
11->19[label="specialinvoke $r6.<spec.benchmarks.compress.CodeTable: void <init>()>()"]
21->20[label="virtualinvoke $r11.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b45)"]
21->17[label="virtualinvoke r0.<spec.benchmarks.compress.Compressor: int getMaxCode()>()"]
21->17[label="virtualinvoke r0.<spec.benchmarks.compress.Compressor: int getMaxCode()>()"]
11->27[label="virtualinvoke $r22.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
11->27[label="virtualinvoke $r20.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
11->27[label="virtualinvoke $r3.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
40->17[label="virtualinvoke r0.<spec.benchmarks.compress.Decompressor: int getMaxCode()>()"]
40->17[label="virtualinvoke r0.<spec.benchmarks.compress.Decompressor: int getMaxCode()>()"]
22->28[label="virtualinvoke $r1.<spec.benchmarks.compress.Compressor$HashTable: void clear()>()"]
1->2[label="virtualinvoke $r1.<spec.benchmarks.compress.Harness: long inst_main(int)>($i0)"]
3->4[label="virtualinvoke r1.<spec.benchmarks.compress.Harness$Source: byte[] getBuffer()>()"]
3->5[label="virtualinvoke r1.<spec.benchmarks.compress.Harness$Source: int getLength()>()"]
3->5[label="virtualinvoke r1.<spec.benchmarks.compress.Harness$Source: int getLength()>()"]
3->6[label="staticinvoke <spec.benchmarks.compress.Compress: spec.benchmarks.compress.OutputBuffer performAction(byte[],int,int,byte[])>($r7, $i2, 0, $r10)"]
3->6[label="staticinvoke <spec.benchmarks.compress.Compress: spec.benchmarks.compress.OutputBuffer performAction(byte[],int,int,byte[])>($r13, $i5, 1, $r16)"]
21->30[label="virtualinvoke $r9.<spec.benchmarks.compress.OutputBuffer: void writebytes(byte[],int)>($r8, $i37)"]
21->30[label="virtualinvoke $r2.<spec.benchmarks.compress.OutputBuffer: void writebytes(byte[],int)>($r1, $i8)"]
3->7[label="virtualinvoke r2.<spec.benchmarks.compress.OutputBuffer: int getLength()>()"]
3->7[label="virtualinvoke r2.<spec.benchmarks.compress.OutputBuffer: int getLength()>()"]
3->7[label="virtualinvoke r3.<spec.benchmarks.compress.OutputBuffer: int getLength()>()"]
11->32[label="specialinvoke $r8.<spec.benchmarks.compress.Decompressor$DeStack: void <init>()>()"]
10->20[label="virtualinvoke $r1.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b2)"]
10->20[label="virtualinvoke $r5.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b6)"]
3->8[label="virtualinvoke r1.<spec.benchmarks.compress.Harness$Source: long getCRC()>()"]
11->31[label="specialinvoke $r7.<spec.benchmarks.compress.Decompressor$SuffixTable: void <init>()>()"]
3->9[label="virtualinvoke r3.<spec.benchmarks.compress.OutputBuffer: long getCRC()>()"]
3->9[label="virtualinvoke r2.<spec.benchmarks.compress.OutputBuffer: long getCRC()>()"]
11->34[label="virtualinvoke $r10.<spec.benchmarks.compress.Decompressor$SuffixTable: void init(int)>(256)"]
11->33[label="virtualinvoke $r9.<spec.benchmarks.compress.CodeTable: void clear(int)>(256)"]
13->17[label="virtualinvoke r0.<spec.benchmarks.compress.Compressor: int getMaxCode()>()"]
10->24[label="virtualinvoke $r7.<spec.benchmarks.compress.CodeTable: void set(int,int)>(i19, i15)"]
13->18[label="specialinvoke $r3.<spec.benchmarks.compress.Compressor$HashTable: void <init>()>()"]
13->16[label="specialinvoke r0.<spec.benchmarks.compress.CompBase: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>(r1, r2)"]
10->25[label="virtualinvoke $r11.<spec.benchmarks.compress.CodeTable: int of(int)>(i17)"]
40->41[label="virtualinvoke $r2.<spec.benchmarks.compress.InputBuffer: int readBytes(byte[],int)>($r1, $i1)"]
13->19[label="specialinvoke $r4.<spec.benchmarks.compress.CodeTable: void <init>()>()"]
10->33[label="virtualinvoke $r13.<spec.benchmarks.compress.CodeTable: void clear(int)>(256)"]
10->35[label="virtualinvoke $r8.<spec.benchmarks.compress.Decompressor$SuffixTable: void set(int,byte)>(i19, $b9)"]
10->37[label="virtualinvoke $r4.<spec.benchmarks.compress.Decompressor$DeStack: byte pop()>()"]
10->36[label="virtualinvoke $r6.<spec.benchmarks.compress.Decompressor$DeStack: boolean isEmpty()>()"]
13->20[label="virtualinvoke $r9.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b11)"]
13->20[label="virtualinvoke $r6.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b6)"]
13->20[label="virtualinvoke $r8.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b7)"]
22->21[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void output(int)>(256)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.compress.Main: long runBenchmark()>()"]
10->39[label="virtualinvoke $r9.<spec.benchmarks.compress.Decompressor$SuffixTable: byte of(int)>(i17)"]
10->39[label="virtualinvoke $r2.<spec.benchmarks.compress.Decompressor$SuffixTable: byte of(int)>(i17)"]
10->38[label="virtualinvoke $r3.<spec.benchmarks.compress.Decompressor$DeStack: void push(byte)>($b5)"]
10->38[label="virtualinvoke $r12.<spec.benchmarks.compress.Decompressor$DeStack: void push(byte)>($b12)"]
10->38[label="virtualinvoke $r10.<spec.benchmarks.compress.Decompressor$DeStack: void push(byte)>($b11)"]
2->3[label="virtualinvoke r0.<spec.benchmarks.compress.Harness: void runCompress(int)>(i0)"]
12->23[label="virtualinvoke $r7.<spec.benchmarks.compress.Compressor$HashTable: void set(int,int)>(i24, i23)"]
6->15[label="specialinvoke $r4.<spec.benchmarks.compress.InputBuffer: void <init>(int,byte[])>(i0, r0)"]
12->24[label="virtualinvoke $r6.<spec.benchmarks.compress.CodeTable: void set(int,int)>(i24, $i16)"]
12->21[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void output(int)>(-1)"]
12->21[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void output(int)>(i19)"]
12->21[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void output(int)>(i19)"]
12->22[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void clBlock()>()"]
12->27[label="virtualinvoke $r1.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
12->27[label="virtualinvoke $r12.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
12->28[label="virtualinvoke $r4.<spec.benchmarks.compress.Compressor$HashTable: void clear()>()"]
12->25[label="virtualinvoke $r10.<spec.benchmarks.compress.CodeTable: int of(int)>(i24)"]
12->25[label="virtualinvoke $r11.<spec.benchmarks.compress.CodeTable: int of(int)>(i24)"]
11->16[label="specialinvoke r0.<spec.benchmarks.compress.CompBase: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>(r1, r2)"]
12->26[label="virtualinvoke $r5.<spec.benchmarks.compress.Compressor$HashTable: int of(int)>(i24)"]
12->26[label="virtualinvoke $r8.<spec.benchmarks.compress.Compressor$HashTable: int of(int)>(i24)"]
6->10[label="virtualinvoke $r6.<spec.benchmarks.compress.Decompressor: void decompress()>()"]
6->12[label="virtualinvoke $r7.<spec.benchmarks.compress.Compressor: void compress()>()"]
6->11[label="specialinvoke $r6.<spec.benchmarks.compress.Decompressor: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>(r2, r3)"]
6->14[label="specialinvoke $r5.<spec.benchmarks.compress.OutputBuffer: void <init>(byte[])>(r1)"]
10->40[label="specialinvoke r0.<spec.benchmarks.compress.Decompressor: int getCode()>()"]
10->40[label="specialinvoke r0.<spec.benchmarks.compress.Decompressor: int getCode()>()"]
10->40[label="specialinvoke r0.<spec.benchmarks.compress.Decompressor: int getCode()>()"]
6->13[label="specialinvoke $r7.<spec.benchmarks.compress.Compressor: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>(r2, r3)"]
}