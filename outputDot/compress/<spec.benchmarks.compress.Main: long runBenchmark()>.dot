digraph g {
14[label="void decompress()"]
8[label="byte[] getBuffer()"]
9[label="void <init>(int,byte[])"]
10[label="void <init>(byte[])"]
26[label="int readBytes(byte[],int)"]
34[label="void clBlock()"]
12[label="void compress()"]
31[label="int readByte()"]
20[label="void push(byte)"]
33[label="void output(int)"]
11[label="void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)"]
27[label="void init(int)"]
15[label="void set(int,byte)"]
36[label="int of(int)"]
6[label="int getLength()"]
18[label="void writeByte(byte)"]
22[label="int of(int)"]
25[label="int getMaxCode()"]
29[label="void <init>()"]
19[label="byte pop()"]
24[label="void clear(int)"]
7[label="spec.benchmarks.compress.OutputBuffer performAction(byte[],int,int,byte[])"]
13[label="void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)"]
2[label="void runCompress(int)"]
4[label="int getLength()"]
16[label="void set(int,int)"]
17[label="boolean isEmpty()"]
23[label="int getCode()"]
28[label="void <init>()"]
35[label="void set(int,int)"]
30[label="void <init>()"]
39[label="void writebytes(byte[],int)"]
40[label="void <init>()"]
0[label="long runBenchmark()"]
3[label="long getCRC()"]
5[label="long getCRC()"]
37[label="void clear()"]
21[label="byte of(int)"]
32[label="void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)"]
1[label="long inst_main(int)"]
38[label="int hsize()"]
11->18[label="virtualinvoke $r9.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b11)"]
11->18[label="virtualinvoke $r6.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b6)"]
11->18[label="virtualinvoke $r8.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b7)"]
14->15[label="virtualinvoke $r8.<spec.benchmarks.compress.Decompressor$SuffixTable: void set(int,byte)>(i19, $b9)"]
12->34[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void clBlock()>()"]
12->35[label="virtualinvoke $r7.<spec.benchmarks.compress.Compressor$HashTable: void set(int,int)>(i24, i23)"]
12->33[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void output(int)>(-1)"]
12->33[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void output(int)>(i19)"]
12->33[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void output(int)>(i19)"]
14->19[label="virtualinvoke $r4.<spec.benchmarks.compress.Decompressor$DeStack: byte pop()>()"]
12->38[label="virtualinvoke $r2.<spec.benchmarks.compress.Compressor$HashTable: int hsize()>()"]
12->38[label="virtualinvoke $r3.<spec.benchmarks.compress.Compressor$HashTable: int hsize()>()"]
11->25[label="virtualinvoke r0.<spec.benchmarks.compress.Compressor: int getMaxCode()>()"]
14->18[label="virtualinvoke $r1.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b2)"]
14->18[label="virtualinvoke $r5.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b6)"]
14->17[label="virtualinvoke $r6.<spec.benchmarks.compress.Decompressor$DeStack: boolean isEmpty()>()"]
12->36[label="virtualinvoke $r5.<spec.benchmarks.compress.Compressor$HashTable: int of(int)>(i24)"]
12->36[label="virtualinvoke $r8.<spec.benchmarks.compress.Compressor$HashTable: int of(int)>(i24)"]
14->16[label="virtualinvoke $r7.<spec.benchmarks.compress.CodeTable: void set(int,int)>(i19, i15)"]
12->37[label="virtualinvoke $r4.<spec.benchmarks.compress.Compressor$HashTable: void clear()>()"]
12->31[label="virtualinvoke $r1.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
12->31[label="virtualinvoke $r12.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
33->39[label="virtualinvoke $r9.<spec.benchmarks.compress.OutputBuffer: void writebytes(byte[],int)>($r8, $i37)"]
33->39[label="virtualinvoke $r2.<spec.benchmarks.compress.OutputBuffer: void writebytes(byte[],int)>($r1, $i8)"]
1->2[label="virtualinvoke r0.<spec.benchmarks.compress.Harness: void runCompress(int)>(i0)"]
11->32[label="specialinvoke r0.<spec.benchmarks.compress.CompBase: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>(r1, r2)"]
14->24[label="virtualinvoke $r13.<spec.benchmarks.compress.CodeTable: void clear(int)>(256)"]
14->23[label="specialinvoke r0.<spec.benchmarks.compress.Decompressor: int getCode()>()"]
14->23[label="specialinvoke r0.<spec.benchmarks.compress.Decompressor: int getCode()>()"]
14->23[label="specialinvoke r0.<spec.benchmarks.compress.Decompressor: int getCode()>()"]
7->9[label="specialinvoke $r4.<spec.benchmarks.compress.InputBuffer: void <init>(int,byte[])>(i0, r0)"]
14->22[label="virtualinvoke $r11.<spec.benchmarks.compress.CodeTable: int of(int)>(i17)"]
14->21[label="virtualinvoke $r9.<spec.benchmarks.compress.Decompressor$SuffixTable: byte of(int)>(i17)"]
14->21[label="virtualinvoke $r2.<spec.benchmarks.compress.Decompressor$SuffixTable: byte of(int)>(i17)"]
14->20[label="virtualinvoke $r3.<spec.benchmarks.compress.Decompressor$DeStack: void push(byte)>($b5)"]
14->20[label="virtualinvoke $r12.<spec.benchmarks.compress.Decompressor$DeStack: void push(byte)>($b12)"]
14->20[label="virtualinvoke $r10.<spec.benchmarks.compress.Decompressor$DeStack: void push(byte)>($b11)"]
11->30[label="specialinvoke $r4.<spec.benchmarks.compress.CodeTable: void <init>()>()"]
23->25[label="virtualinvoke r0.<spec.benchmarks.compress.Decompressor: int getMaxCode()>()"]
23->25[label="virtualinvoke r0.<spec.benchmarks.compress.Decompressor: int getMaxCode()>()"]
23->26[label="virtualinvoke $r2.<spec.benchmarks.compress.InputBuffer: int readBytes(byte[],int)>($r1, $i1)"]
13->24[label="virtualinvoke $r9.<spec.benchmarks.compress.CodeTable: void clear(int)>(256)"]
13->25[label="virtualinvoke r0.<spec.benchmarks.compress.Decompressor: int getMaxCode()>()"]
13->28[label="specialinvoke $r8.<spec.benchmarks.compress.Decompressor$DeStack: void <init>()>()"]
12->16[label="virtualinvoke $r6.<spec.benchmarks.compress.CodeTable: void set(int,int)>(i24, $i16)"]
13->29[label="specialinvoke $r7.<spec.benchmarks.compress.Decompressor$SuffixTable: void <init>()>()"]
13->27[label="virtualinvoke $r10.<spec.benchmarks.compress.Decompressor$SuffixTable: void init(int)>(256)"]
7->11[label="specialinvoke $r7.<spec.benchmarks.compress.Compressor: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>(r2, r3)"]
7->10[label="specialinvoke $r5.<spec.benchmarks.compress.OutputBuffer: void <init>(byte[])>(r1)"]
7->13[label="specialinvoke $r6.<spec.benchmarks.compress.Decompressor: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>(r2, r3)"]
7->12[label="virtualinvoke $r7.<spec.benchmarks.compress.Compressor: void compress()>()"]
7->14[label="virtualinvoke $r6.<spec.benchmarks.compress.Decompressor: void decompress()>()"]
11->40[label="specialinvoke $r3.<spec.benchmarks.compress.Compressor$HashTable: void <init>()>()"]
0->1[label="virtualinvoke $r1.<spec.benchmarks.compress.Harness: long inst_main(int)>($i0)"]
33->18[label="virtualinvoke $r11.<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>($b45)"]
2->3[label="virtualinvoke r3.<spec.benchmarks.compress.OutputBuffer: long getCRC()>()"]
2->3[label="virtualinvoke r2.<spec.benchmarks.compress.OutputBuffer: long getCRC()>()"]
2->4[label="virtualinvoke r2.<spec.benchmarks.compress.OutputBuffer: int getLength()>()"]
2->4[label="virtualinvoke r2.<spec.benchmarks.compress.OutputBuffer: int getLength()>()"]
2->4[label="virtualinvoke r3.<spec.benchmarks.compress.OutputBuffer: int getLength()>()"]
2->5[label="virtualinvoke r1.<spec.benchmarks.compress.Harness$Source: long getCRC()>()"]
2->6[label="virtualinvoke r1.<spec.benchmarks.compress.Harness$Source: int getLength()>()"]
2->6[label="virtualinvoke r1.<spec.benchmarks.compress.Harness$Source: int getLength()>()"]
2->7[label="staticinvoke <spec.benchmarks.compress.Compress: spec.benchmarks.compress.OutputBuffer performAction(byte[],int,int,byte[])>($r7, $i2, 0, $r10)"]
2->7[label="staticinvoke <spec.benchmarks.compress.Compress: spec.benchmarks.compress.OutputBuffer performAction(byte[],int,int,byte[])>($r13, $i5, 1, $r16)"]
2->8[label="virtualinvoke r1.<spec.benchmarks.compress.Harness$Source: byte[] getBuffer()>()"]
12->22[label="virtualinvoke $r10.<spec.benchmarks.compress.CodeTable: int of(int)>(i24)"]
12->22[label="virtualinvoke $r11.<spec.benchmarks.compress.CodeTable: int of(int)>(i24)"]
34->37[label="virtualinvoke $r1.<spec.benchmarks.compress.Compressor$HashTable: void clear()>()"]
33->25[label="virtualinvoke r0.<spec.benchmarks.compress.Compressor: int getMaxCode()>()"]
33->25[label="virtualinvoke r0.<spec.benchmarks.compress.Compressor: int getMaxCode()>()"]
13->31[label="virtualinvoke $r22.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
13->31[label="virtualinvoke $r20.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
13->31[label="virtualinvoke $r3.<spec.benchmarks.compress.InputBuffer: int readByte()>()"]
13->32[label="specialinvoke r0.<spec.benchmarks.compress.CompBase: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>(r1, r2)"]
34->33[label="specialinvoke r0.<spec.benchmarks.compress.Compressor: void output(int)>(256)"]
13->30[label="specialinvoke $r6.<spec.benchmarks.compress.CodeTable: void <init>()>()"]
}