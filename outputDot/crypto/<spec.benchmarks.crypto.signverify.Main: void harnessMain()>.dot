digraph g {
1[label="void runSignVerify(byte[],java.lang.String,java.security.PrivateKey,java.security.PublicKey)"]
2[label="byte[] getTestData(java.lang.String)"]
4[label="boolean verify(byte[],java.lang.String,byte[],java.security.PublicKey)"]
0[label="void harnessMain()"]
3[label="byte[] sign(byte[],java.lang.String,java.security.PrivateKey)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.crypto.signverify.Main: void runSignVerify(byte[],java.lang.String,java.security.PrivateKey,java.security.PublicKey)>($r36, 'SHA256withRSA', $r38, $r37)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.crypto.signverify.Main: void runSignVerify(byte[],java.lang.String,java.security.PrivateKey,java.security.PublicKey)>($r28, 'SHA1withRSA', $r30, $r29)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.crypto.signverify.Main: void runSignVerify(byte[],java.lang.String,java.security.PrivateKey,java.security.PublicKey)>($r12, 'SHA1withRSA', $r14, $r13)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.crypto.signverify.Main: void runSignVerify(byte[],java.lang.String,java.security.PrivateKey,java.security.PublicKey)>($r16, 'SHA1withDSA', $r18, $r17)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.crypto.signverify.Main: void runSignVerify(byte[],java.lang.String,java.security.PrivateKey,java.security.PublicKey)>($r44, 'SHA1withRSA', $r46, $r45)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.crypto.signverify.Main: void runSignVerify(byte[],java.lang.String,java.security.PrivateKey,java.security.PublicKey)>($r52, 'SHA256withRSA', $r54, $r53)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.crypto.signverify.Main: void runSignVerify(byte[],java.lang.String,java.security.PrivateKey,java.security.PublicKey)>($r48, 'SHA1withDSA', $r50, $r49)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.crypto.signverify.Main: void runSignVerify(byte[],java.lang.String,java.security.PrivateKey,java.security.PublicKey)>($r40, 'MD5withRSA', $r42, $r41)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.crypto.signverify.Main: void runSignVerify(byte[],java.lang.String,java.security.PrivateKey,java.security.PublicKey)>($r32, 'SHA1withDSA', $r34, $r33)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.crypto.signverify.Main: void runSignVerify(byte[],java.lang.String,java.security.PrivateKey,java.security.PublicKey)>($r20, 'SHA256withRSA', $r22, $r21)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.crypto.signverify.Main: void runSignVerify(byte[],java.lang.String,java.security.PrivateKey,java.security.PublicKey)>($r8, 'MD5withRSA', $r10, $r9)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.crypto.signverify.Main: void runSignVerify(byte[],java.lang.String,java.security.PrivateKey,java.security.PublicKey)>($r24, 'MD5withRSA', $r26, $r25)"]
0->2[label="staticinvoke <spec.benchmarks.crypto.Util: byte[] getTestData(java.lang.String)>($r27)"]
0->2[label="staticinvoke <spec.benchmarks.crypto.Util: byte[] getTestData(java.lang.String)>($r31)"]
0->2[label="staticinvoke <spec.benchmarks.crypto.Util: byte[] getTestData(java.lang.String)>($r11)"]
0->2[label="staticinvoke <spec.benchmarks.crypto.Util: byte[] getTestData(java.lang.String)>($r7)"]
0->2[label="staticinvoke <spec.benchmarks.crypto.Util: byte[] getTestData(java.lang.String)>($r51)"]
0->2[label="staticinvoke <spec.benchmarks.crypto.Util: byte[] getTestData(java.lang.String)>($r23)"]
0->2[label="staticinvoke <spec.benchmarks.crypto.Util: byte[] getTestData(java.lang.String)>($r47)"]
0->2[label="staticinvoke <spec.benchmarks.crypto.Util: byte[] getTestData(java.lang.String)>($r39)"]
0->2[label="staticinvoke <spec.benchmarks.crypto.Util: byte[] getTestData(java.lang.String)>($r15)"]
0->2[label="staticinvoke <spec.benchmarks.crypto.Util: byte[] getTestData(java.lang.String)>($r35)"]
0->2[label="staticinvoke <spec.benchmarks.crypto.Util: byte[] getTestData(java.lang.String)>($r19)"]
0->2[label="staticinvoke <spec.benchmarks.crypto.Util: byte[] getTestData(java.lang.String)>($r43)"]
1->3[label="virtualinvoke r0.<spec.benchmarks.crypto.signverify.Main: byte[] sign(byte[],java.lang.String,java.security.PrivateKey)>(r1, r2, r3)"]
1->4[label="virtualinvoke r0.<spec.benchmarks.crypto.signverify.Main: boolean verify(byte[],java.lang.String,byte[],java.security.PublicKey)>(r1, r2, r5, r4)"]
}