digraph g {
2[label="byte[] getTestData(java.lang.String)"]
5[label="boolean check(byte[],byte[])"]
6[label="int checkSum(byte[])"]
0[label="void harnessMain()"]
3[label="byte[] encrypt(byte[],javax.crypto.SecretKey,java.lang.String,int)"]
4[label="byte[] decrypt(byte[],javax.crypto.SecretKey,java.lang.String,int)"]
1[label="void runEncryptDecrypt(javax.crypto.SecretKey,java.lang.String,java.lang.String)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.crypto.aes.Main: void runEncryptDecrypt(javax.crypto.SecretKey,java.lang.String,java.lang.String)>($r14, 'DESede/CBC/NoPadding', $r13)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.crypto.aes.Main: void runEncryptDecrypt(javax.crypto.SecretKey,java.lang.String,java.lang.String)>($r12, 'AES/CBC/PKCS5Padding', $r11)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.crypto.aes.Main: void runEncryptDecrypt(javax.crypto.SecretKey,java.lang.String,java.lang.String)>($r4, 'AES/CBC/PKCS5Padding', $r3)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.crypto.aes.Main: void runEncryptDecrypt(javax.crypto.SecretKey,java.lang.String,java.lang.String)>($r8, 'DESede/CBC/PKCS5Padding', $r7)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.crypto.aes.Main: void runEncryptDecrypt(javax.crypto.SecretKey,java.lang.String,java.lang.String)>($r6, 'DESede/CBC/NoPadding', $r5)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.crypto.aes.Main: void runEncryptDecrypt(javax.crypto.SecretKey,java.lang.String,java.lang.String)>($r2, 'AES/CBC/NoPadding', $r1)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.crypto.aes.Main: void runEncryptDecrypt(javax.crypto.SecretKey,java.lang.String,java.lang.String)>($r16, 'DESede/CBC/PKCS5Padding', $r15)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.crypto.aes.Main: void runEncryptDecrypt(javax.crypto.SecretKey,java.lang.String,java.lang.String)>($r10, 'AES/CBC/NoPadding', $r9)"]
1->2[label="staticinvoke <spec.benchmarks.crypto.Util: byte[] getTestData(java.lang.String)>(r3)"]
1->3[label="specialinvoke r0.<spec.benchmarks.crypto.aes.Main: byte[] encrypt(byte[],javax.crypto.SecretKey,java.lang.String,int)>(r4, r1, r2, 12)"]
1->4[label="specialinvoke r0.<spec.benchmarks.crypto.aes.Main: byte[] decrypt(byte[],javax.crypto.SecretKey,java.lang.String,int)>(r5, r1, r2, 12)"]
1->5[label="staticinvoke <spec.benchmarks.crypto.Util: boolean check(byte[],byte[])>(r4, r6)"]
1->6[label="staticinvoke <spec.benchmarks.crypto.Util: int checkSum(byte[])>(r6)"]
}