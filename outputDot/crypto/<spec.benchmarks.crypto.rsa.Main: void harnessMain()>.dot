digraph g {
3[label="int checkSum(byte[])"]
4[label="boolean check(byte[],byte[])"]
7[label="byte[] getTestData(java.lang.String)"]
6[label="byte[] encrypt(byte[],java.lang.String)"]
2[label="void runMultiEncryptDecrypt(java.lang.String,java.lang.String)"]
0[label="void harnessMain()"]
1[label="void runSingleEncryptDecrypt(java.lang.String,java.lang.String)"]
5[label="byte[] decrypt(byte[],java.lang.String)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.crypto.rsa.Main: void runSingleEncryptDecrypt(java.lang.String,java.lang.String)>('RSA/ECB/PKCS1Padding', $r1)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.crypto.rsa.Main: void runSingleEncryptDecrypt(java.lang.String,java.lang.String)>('RSA/ECB/PKCS1Padding', $r3)"]
0->1[label="virtualinvoke r0.<spec.benchmarks.crypto.rsa.Main: void runSingleEncryptDecrypt(java.lang.String,java.lang.String)>('RSA/ECB/PKCS1Padding', $r5)"]
0->2[label="virtualinvoke r0.<spec.benchmarks.crypto.rsa.Main: void runMultiEncryptDecrypt(java.lang.String,java.lang.String)>('RSA/ECB/PKCS1Padding', $r2)"]
0->2[label="virtualinvoke r0.<spec.benchmarks.crypto.rsa.Main: void runMultiEncryptDecrypt(java.lang.String,java.lang.String)>('RSA/ECB/PKCS1Padding', $r4)"]
1->3[label="staticinvoke <spec.benchmarks.crypto.Util: int checkSum(byte[])>(r5)"]
1->4[label="staticinvoke <spec.benchmarks.crypto.Util: boolean check(byte[],byte[])>(r3, r5)"]
2->3[label="staticinvoke <spec.benchmarks.crypto.Util: int checkSum(byte[])>(r6)"]
1->5[label="virtualinvoke r0.<spec.benchmarks.crypto.rsa.Main: byte[] decrypt(byte[],java.lang.String)>(r4, r1)"]
2->4[label="staticinvoke <spec.benchmarks.crypto.Util: boolean check(byte[],byte[])>(r4, r6)"]
1->6[label="virtualinvoke r0.<spec.benchmarks.crypto.rsa.Main: byte[] encrypt(byte[],java.lang.String)>(r3, r1)"]
2->5[label="virtualinvoke r0.<spec.benchmarks.crypto.rsa.Main: byte[] decrypt(byte[],java.lang.String)>(r5, r1)"]
1->7[label="staticinvoke <spec.benchmarks.crypto.Util: byte[] getTestData(java.lang.String)>(r2)"]
2->6[label="virtualinvoke r0.<spec.benchmarks.crypto.rsa.Main: byte[] encrypt(byte[],java.lang.String)>(r4, r1)"]
2->7[label="staticinvoke <spec.benchmarks.crypto.Util: byte[] getTestData(java.lang.String)>(r2)"]
}