digraph g {
14[label="double stop()"]
11[label="void solve(double[][],int[],double[])"]
5[label="double measureLU(int,double,spec.benchmarks.scimark.utils.Random)"]
9[label="double[] matvec(double[][],double[])"]
20[label="double nextDouble()"]
1[label="void main(int)"]
21[label="void reset()"]
12[label="double[] NewVectorCopy(double[])"]
4[label="void <init>(int)"]
19[label="double[][] RandomMatrix(int,int,spec.benchmarks.scimark.utils.Random)"]
23[label="void matvec(double[][],double[],double[])"]
7[label="double num_flops(int)"]
24[label="void initialize(int)"]
13[label="double[] RandomVector(int,spec.benchmarks.scimark.utils.Random)"]
3[label="void <init>(int)"]
18[label="void <init>()"]
2[label="void run()"]
16[label="void CopyMatrix(double[][],double[][])"]
6[label="double read()"]
8[label="double normabs(double[],double[])"]
22[label="double seconds()"]
10[label="void checkResults(java.lang.String,java.lang.String,int)"]
15[label="int factor(double[][],int[])"]
17[label="void start()"]
0[label="void runBenchmark()"]
5->14[label="virtualinvoke r5.<spec.benchmarks.scimark.utils.Stopwatch: double stop()>()"]
4->24[label="specialinvoke r0.<spec.benchmarks.scimark.utils.Random: void initialize(int)>(i0)"]
5->15[label="virtualinvoke r0.<spec.benchmarks.scimark.lu.LU: int factor(double[][],int[])>(r3, r4)"]
5->16[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: void CopyMatrix(double[][],double[][])>(r3, r2)"]
5->17[label="virtualinvoke r5.<spec.benchmarks.scimark.utils.Stopwatch: void start()>()"]
5->18[label="specialinvoke $r7.<spec.benchmarks.scimark.utils.Stopwatch: void <init>()>()"]
5->19[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[][] RandomMatrix(int,int,spec.benchmarks.scimark.utils.Random)>(i0, i0, r1)"]
17->22[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
5->10[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: void checkResults(java.lang.String,java.lang.String,int)>($r9, $r13, $i2)"]
13->20[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Random: double nextDouble()>()"]
5->11[label="virtualinvoke r0.<spec.benchmarks.scimark.lu.LU: void solve(double[][],int[],double[])>(r3, r4, r6)"]
19->20[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Random: double nextDouble()>()"]
6->22[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
6->22[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
5->12[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[] NewVectorCopy(double[])>(r15)"]
5->13[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[] RandomVector(int,spec.benchmarks.scimark.utils.Random)>(i0, r1)"]
0->1[label="staticinvoke <spec.benchmarks.scimark.lu.LU: void main(int)>(i0)"]
1->2[label="virtualinvoke r0.<spec.benchmarks.scimark.lu.LU: void run()>()"]
1->3[label="specialinvoke $r1.<spec.benchmarks.scimark.lu.LU: void <init>(int)>(i0)"]
2->4[label="specialinvoke $r2.<spec.benchmarks.scimark.utils.Random: void <init>(int)>(101010)"]
2->5[label="virtualinvoke r0.<spec.benchmarks.scimark.lu.LU: double measureLU(int,double,spec.benchmarks.scimark.utils.Random)>(i0, d0, r1)"]
5->6[label="virtualinvoke r5.<spec.benchmarks.scimark.utils.Stopwatch: double read()>()"]
5->7[label="staticinvoke <spec.benchmarks.scimark.lu.LU: double num_flops(int)>(i0)"]
5->8[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double normabs(double[],double[])>(r15, $r14)"]
5->8[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double normabs(double[],double[])>(r15, $r11)"]
5->9[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[] matvec(double[][],double[])>(r2, r6)"]
5->9[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[] matvec(double[][],double[])>(r2, r6)"]
9->23[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: void matvec(double[][],double[],double[])>(r0, r1, r2)"]
14->22[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
18->21[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Stopwatch: void reset()>()"]
}