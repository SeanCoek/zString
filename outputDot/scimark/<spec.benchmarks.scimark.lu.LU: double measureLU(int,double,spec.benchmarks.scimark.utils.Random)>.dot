digraph g {
16[label="void matvec(double[][],double[],double[])"]
13[label="double num_flops(int)"]
6[label="double stop()"]
7[label="double[] RandomVector(int,spec.benchmarks.scimark.utils.Random)"]
9[label="void solve(double[][],int[],double[])"]
2[label="void <init>()"]
0[label="double measureLU(int,double,spec.benchmarks.scimark.utils.Random)"]
4[label="void CopyMatrix(double[][],double[][])"]
10[label="double[] matvec(double[][],double[])"]
14[label="double read()"]
17[label="double nextDouble()"]
11[label="double normabs(double[],double[])"]
15[label="double seconds()"]
3[label="void start()"]
5[label="int factor(double[][],int[])"]
12[label="void checkResults(java.lang.String,java.lang.String,int)"]
18[label="void reset()"]
8[label="double[] NewVectorCopy(double[])"]
1[label="double[][] RandomMatrix(int,int,spec.benchmarks.scimark.utils.Random)"]
0->1[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[][] RandomMatrix(int,int,spec.benchmarks.scimark.utils.Random)>(i0, i0, r1)"]
0->2[label="specialinvoke $r7.<spec.benchmarks.scimark.utils.Stopwatch: void <init>()>()"]
0->3[label="virtualinvoke r5.<spec.benchmarks.scimark.utils.Stopwatch: void start()>()"]
10->16[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: void matvec(double[][],double[],double[])>(r0, r1, r2)"]
0->4[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: void CopyMatrix(double[][],double[][])>(r3, r2)"]
0->5[label="virtualinvoke r0.<spec.benchmarks.scimark.lu.LU: int factor(double[][],int[])>(r3, r4)"]
0->6[label="virtualinvoke r5.<spec.benchmarks.scimark.utils.Stopwatch: double stop()>()"]
0->7[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[] RandomVector(int,spec.benchmarks.scimark.utils.Random)>(i0, r1)"]
0->8[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[] NewVectorCopy(double[])>(r15)"]
0->9[label="virtualinvoke r0.<spec.benchmarks.scimark.lu.LU: void solve(double[][],int[],double[])>(r3, r4, r6)"]
14->15[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
14->15[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
7->17[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Random: double nextDouble()>()"]
6->15[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
3->15[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
2->18[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Stopwatch: void reset()>()"]
1->17[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Random: double nextDouble()>()"]
0->13[label="staticinvoke <spec.benchmarks.scimark.lu.LU: double num_flops(int)>(i0)"]
0->14[label="virtualinvoke r5.<spec.benchmarks.scimark.utils.Stopwatch: double read()>()"]
0->11[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double normabs(double[],double[])>(r15, $r14)"]
0->11[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double normabs(double[],double[])>(r15, $r11)"]
0->12[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: void checkResults(java.lang.String,java.lang.String,int)>($r9, $r13, $i2)"]
0->10[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[] matvec(double[][],double[])>(r2, r6)"]
0->10[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[] matvec(double[][],double[])>(r2, r6)"]
}