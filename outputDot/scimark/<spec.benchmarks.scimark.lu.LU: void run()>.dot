digraph g {
20[label="void matvec(double[][],double[],double[])"]
4[label="double num_flops(int)"]
21[label="void initialize(int)"]
11[label="double stop()"]
8[label="void solve(double[][],int[],double[])"]
10[label="double[] RandomVector(int,spec.benchmarks.scimark.utils.Random)"]
15[label="void <init>()"]
2[label="double measureLU(int,double,spec.benchmarks.scimark.utils.Random)"]
0[label="void run()"]
13[label="void CopyMatrix(double[][],double[][])"]
6[label="double[] matvec(double[][],double[])"]
3[label="double read()"]
17[label="double nextDouble()"]
5[label="double normabs(double[],double[])"]
19[label="double seconds()"]
7[label="void checkResults(java.lang.String,java.lang.String,int)"]
12[label="int factor(double[][],int[])"]
14[label="void start()"]
18[label="void reset()"]
9[label="double[] NewVectorCopy(double[])"]
1[label="void <init>(int)"]
16[label="double[][] RandomMatrix(int,int,spec.benchmarks.scimark.utils.Random)"]
0->1[label="specialinvoke $r2.<spec.benchmarks.scimark.utils.Random: void <init>(int)>(101010)"]
0->2[label="virtualinvoke r0.<spec.benchmarks.scimark.lu.LU: double measureLU(int,double,spec.benchmarks.scimark.utils.Random)>(i0, d0, r1)"]
10->17[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Random: double nextDouble()>()"]
2->3[label="virtualinvoke r5.<spec.benchmarks.scimark.utils.Stopwatch: double read()>()"]
11->19[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
2->4[label="staticinvoke <spec.benchmarks.scimark.lu.LU: double num_flops(int)>(i0)"]
2->5[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double normabs(double[],double[])>(r15, $r14)"]
2->5[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double normabs(double[],double[])>(r15, $r11)"]
2->6[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[] matvec(double[][],double[])>(r2, r6)"]
2->6[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[] matvec(double[][],double[])>(r2, r6)"]
2->7[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: void checkResults(java.lang.String,java.lang.String,int)>($r9, $r13, $i2)"]
2->8[label="virtualinvoke r0.<spec.benchmarks.scimark.lu.LU: void solve(double[][],int[],double[])>(r3, r4, r6)"]
2->10[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[] RandomVector(int,spec.benchmarks.scimark.utils.Random)>(i0, r1)"]
16->17[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Random: double nextDouble()>()"]
2->9[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[] NewVectorCopy(double[])>(r15)"]
14->19[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
15->18[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Stopwatch: void reset()>()"]
3->19[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
3->19[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
2->16[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[][] RandomMatrix(int,int,spec.benchmarks.scimark.utils.Random)>(i0, i0, r1)"]
2->15[label="specialinvoke $r7.<spec.benchmarks.scimark.utils.Stopwatch: void <init>()>()"]
6->20[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: void matvec(double[][],double[],double[])>(r0, r1, r2)"]
2->14[label="virtualinvoke r5.<spec.benchmarks.scimark.utils.Stopwatch: void start()>()"]
2->13[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: void CopyMatrix(double[][],double[][])>(r3, r2)"]
2->12[label="virtualinvoke r0.<spec.benchmarks.scimark.lu.LU: int factor(double[][],int[])>(r3, r4)"]
2->11[label="virtualinvoke r5.<spec.benchmarks.scimark.utils.Stopwatch: double stop()>()"]
1->21[label="specialinvoke r0.<spec.benchmarks.scimark.utils.Random: void initialize(int)>(i0)"]
}