digraph g {
6[label="void initialize(int)"]
10[label="double stop()"]
7[label="void <init>()"]
0[label="void runBenchmark()"]
12[label="double read()"]
1[label="void main()"]
9[label="double integrate(int)"]
14[label="double nextDouble()"]
13[label="double seconds()"]
8[label="void start()"]
15[label="void reset()"]
4[label="double measureMonteCarlo(double,spec.benchmarks.scimark.utils.Random)"]
5[label="void <init>(int)"]
2[label="void <init>()"]
11[label="double num_flops(int)"]
3[label="void run()"]
0->1[label="staticinvoke <spec.benchmarks.scimark.monte_carlo.MonteCarlo: void main()>()"]
1->2[label="specialinvoke $r1.<spec.benchmarks.scimark.monte_carlo.MonteCarlo: void <init>()>()"]
1->3[label="virtualinvoke r0.<spec.benchmarks.scimark.monte_carlo.MonteCarlo: void run()>()"]
3->4[label="virtualinvoke r0.<spec.benchmarks.scimark.monte_carlo.MonteCarlo: double measureMonteCarlo(double,spec.benchmarks.scimark.utils.Random)>(d0, r1)"]
3->5[label="specialinvoke $r2.<spec.benchmarks.scimark.utils.Random: void <init>(int)>(101010)"]
5->6[label="specialinvoke r0.<spec.benchmarks.scimark.utils.Random: void initialize(int)>(i0)"]
4->7[label="specialinvoke $r4.<spec.benchmarks.scimark.utils.Stopwatch: void <init>()>()"]
12->13[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
12->13[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
4->8[label="virtualinvoke r3.<spec.benchmarks.scimark.utils.Stopwatch: void start()>()"]
4->9[label="virtualinvoke r0.<spec.benchmarks.scimark.monte_carlo.MonteCarlo: double integrate(int)>(i0)"]
10->13[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
9->5[label="specialinvoke $r2.<spec.benchmarks.scimark.utils.Random: void <init>(int)>(113)"]
4->10[label="virtualinvoke r3.<spec.benchmarks.scimark.utils.Stopwatch: double stop()>()"]
4->11[label="virtualinvoke r0.<spec.benchmarks.scimark.monte_carlo.MonteCarlo: double num_flops(int)>(i0)"]
9->14[label="virtualinvoke r1.<spec.benchmarks.scimark.utils.Random: double nextDouble()>()"]
9->14[label="virtualinvoke r1.<spec.benchmarks.scimark.utils.Random: double nextDouble()>()"]
8->13[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
7->15[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Stopwatch: void reset()>()"]
4->12[label="virtualinvoke r3.<spec.benchmarks.scimark.utils.Stopwatch: double read()>()"]
}