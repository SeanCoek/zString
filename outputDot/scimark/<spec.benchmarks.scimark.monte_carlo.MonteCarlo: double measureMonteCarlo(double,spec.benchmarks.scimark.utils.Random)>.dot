digraph g {
3[label="double integrate(int)"]
9[label="double nextDouble()"]
7[label="double seconds()"]
2[label="void start()"]
10[label="void initialize(int)"]
4[label="double stop()"]
11[label="void reset()"]
0[label="double measureMonteCarlo(double,spec.benchmarks.scimark.utils.Random)"]
1[label="void <init>()"]
8[label="void <init>(int)"]
5[label="double num_flops(int)"]
6[label="double read()"]
0->1[label="specialinvoke $r4.<spec.benchmarks.scimark.utils.Stopwatch: void <init>()>()"]
0->2[label="virtualinvoke r3.<spec.benchmarks.scimark.utils.Stopwatch: void start()>()"]
0->3[label="virtualinvoke r0.<spec.benchmarks.scimark.monte_carlo.MonteCarlo: double integrate(int)>(i0)"]
0->4[label="virtualinvoke r3.<spec.benchmarks.scimark.utils.Stopwatch: double stop()>()"]
0->5[label="virtualinvoke r0.<spec.benchmarks.scimark.monte_carlo.MonteCarlo: double num_flops(int)>(i0)"]
0->6[label="virtualinvoke r3.<spec.benchmarks.scimark.utils.Stopwatch: double read()>()"]
2->7[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
4->7[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
3->8[label="specialinvoke $r2.<spec.benchmarks.scimark.utils.Random: void <init>(int)>(113)"]
3->9[label="virtualinvoke r1.<spec.benchmarks.scimark.utils.Random: double nextDouble()>()"]
3->9[label="virtualinvoke r1.<spec.benchmarks.scimark.utils.Random: double nextDouble()>()"]
6->7[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
6->7[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
8->10[label="specialinvoke r0.<spec.benchmarks.scimark.utils.Random: void initialize(int)>(i0)"]
1->11[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Stopwatch: void reset()>()"]
}