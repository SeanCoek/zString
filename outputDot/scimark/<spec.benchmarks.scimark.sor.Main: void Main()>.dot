digraph g {
12[label="double execute(double,double[][],int)"]
1[label="void runBenchmark()"]
7[label="void initialize(int)"]
11[label="double stop()"]
14[label="void <init>()"]
2[label="void main(int)"]
3[label="void run()"]
8[label="double read()"]
16[label="double nextDouble()"]
18[label="double seconds()"]
5[label="double measureSOR(int,double,spec.benchmarks.scimark.utils.Random)"]
10[label="void checkResults(java.lang.String,java.lang.String,int)"]
13[label="void start()"]
9[label="double num_flops(int,int,int)"]
17[label="void reset()"]
6[label="void <init>(int)"]
15[label="double[][] RandomizeMatrix(double[][],spec.benchmarks.scimark.utils.Random)"]
0[label="void Main()"]
4[label="void <init>(int)"]
0->1[label="staticinvoke <spec.benchmarks.scimark.sor.Main: void runBenchmark()>()"]
11->18[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
1->2[label="staticinvoke <spec.benchmarks.scimark.sor.SOR: void main(int)>(i0)"]
2->3[label="virtualinvoke r0.<spec.benchmarks.scimark.sor.SOR: void run()>()"]
2->4[label="specialinvoke $r1.<spec.benchmarks.scimark.sor.SOR: void <init>(int)>(i0)"]
3->5[label="virtualinvoke r0.<spec.benchmarks.scimark.sor.SOR: double measureSOR(int,double,spec.benchmarks.scimark.utils.Random)>(i0, d0, r1)"]
3->6[label="specialinvoke $r2.<spec.benchmarks.scimark.utils.Random: void <init>(int)>(101010)"]
5->14[label="specialinvoke $r5.<spec.benchmarks.scimark.utils.Stopwatch: void <init>()>()"]
15->16[label="virtualinvoke r1.<spec.benchmarks.scimark.utils.Random: double nextDouble()>()"]
5->15[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[][] RandomizeMatrix(double[][],spec.benchmarks.scimark.utils.Random)>(r19, r1)"]
6->7[label="specialinvoke r0.<spec.benchmarks.scimark.utils.Random: void initialize(int)>(i0)"]
5->8[label="virtualinvoke r2.<spec.benchmarks.scimark.utils.Stopwatch: double read()>()"]
8->18[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
8->18[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
5->9[label="virtualinvoke r0.<spec.benchmarks.scimark.sor.SOR: double num_flops(int,int,int)>(i0, i0, s1)"]
13->18[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
14->17[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Stopwatch: void reset()>()"]
5->10[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: void checkResults(java.lang.String,java.lang.String,int)>($r7, $r10, $i3)"]
5->11[label="virtualinvoke r2.<spec.benchmarks.scimark.utils.Stopwatch: double stop()>()"]
5->12[label="virtualinvoke r0.<spec.benchmarks.scimark.sor.SOR: double execute(double,double[][],int)>(1.25, r20, s1)"]
5->13[label="virtualinvoke r2.<spec.benchmarks.scimark.utils.Stopwatch: void start()>()"]
}