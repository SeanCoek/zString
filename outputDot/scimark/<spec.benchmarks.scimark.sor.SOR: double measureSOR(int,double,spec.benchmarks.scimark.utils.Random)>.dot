digraph g {
5[label="double execute(double,double[][],int)"]
9[label="double nextDouble()"]
11[label="double seconds()"]
0[label="double measureSOR(int,double,spec.benchmarks.scimark.utils.Random)"]
3[label="void checkResults(java.lang.String,java.lang.String,int)"]
6[label="void start()"]
2[label="double num_flops(int,int,int)"]
4[label="double stop()"]
10[label="void reset()"]
7[label="void <init>()"]
8[label="double[][] RandomizeMatrix(double[][],spec.benchmarks.scimark.utils.Random)"]
1[label="double read()"]
0->1[label="virtualinvoke r2.<spec.benchmarks.scimark.utils.Stopwatch: double read()>()"]
0->2[label="virtualinvoke r0.<spec.benchmarks.scimark.sor.SOR: double num_flops(int,int,int)>(i0, i0, s1)"]
0->3[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: void checkResults(java.lang.String,java.lang.String,int)>($r7, $r10, $i3)"]
0->4[label="virtualinvoke r2.<spec.benchmarks.scimark.utils.Stopwatch: double stop()>()"]
0->5[label="virtualinvoke r0.<spec.benchmarks.scimark.sor.SOR: double execute(double,double[][],int)>(1.25, r20, s1)"]
0->6[label="virtualinvoke r2.<spec.benchmarks.scimark.utils.Stopwatch: void start()>()"]
0->7[label="specialinvoke $r5.<spec.benchmarks.scimark.utils.Stopwatch: void <init>()>()"]
0->8[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[][] RandomizeMatrix(double[][],spec.benchmarks.scimark.utils.Random)>(r19, r1)"]
8->9[label="virtualinvoke r1.<spec.benchmarks.scimark.utils.Random: double nextDouble()>()"]
7->10[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Stopwatch: void reset()>()"]
6->11[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
4->11[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
1->11[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
1->11[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
}