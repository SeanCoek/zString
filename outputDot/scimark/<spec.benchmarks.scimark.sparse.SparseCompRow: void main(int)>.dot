digraph g {
16[label="void initialize(int)"]
7[label="double stop()"]
11[label="double[] RandomVector(int,spec.benchmarks.scimark.utils.Random)"]
10[label="void <init>()"]
2[label="void run()"]
1[label="void <init>(int)"]
5[label="double read()"]
6[label="double num_flops(int,int,int)"]
12[label="double nextDouble()"]
0[label="void main(int)"]
14[label="double seconds()"]
9[label="void start()"]
15[label="void checkResults(java.lang.String,java.lang.String,int)"]
13[label="void reset()"]
3[label="void <init>(int)"]
4[label="double measureSparseMatmult(int,int,double,spec.benchmarks.scimark.utils.Random)"]
8[label="void matmult(double[],double[],int[],int[],double[],int,int)"]
0->1[label="specialinvoke $r1.<spec.benchmarks.scimark.sparse.SparseCompRow: void <init>(int)>(i0)"]
0->2[label="virtualinvoke r0.<spec.benchmarks.scimark.sparse.SparseCompRow: void run()>()"]
2->3[label="specialinvoke $r2.<spec.benchmarks.scimark.utils.Random: void <init>(int)>(101010)"]
2->4[label="virtualinvoke r0.<spec.benchmarks.scimark.sparse.SparseCompRow: double measureSparseMatmult(int,int,double,spec.benchmarks.scimark.utils.Random)>(i0, i1, d0, r1)"]
4->5[label="virtualinvoke r8.<spec.benchmarks.scimark.utils.Stopwatch: double read()>()"]
4->6[label="virtualinvoke r0.<spec.benchmarks.scimark.sparse.SparseCompRow: double num_flops(int,int,int)>(i0, i1, s13)"]
5->14[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
5->14[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
4->7[label="virtualinvoke r8.<spec.benchmarks.scimark.utils.Stopwatch: double stop()>()"]
4->8[label="virtualinvoke r0.<spec.benchmarks.scimark.sparse.SparseCompRow: void matmult(double[],double[],int[],int[],double[],int,int)>(r3, r4, r6, r5, r2, s13, b14)"]
11->12[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Random: double nextDouble()>()"]
4->9[label="virtualinvoke r8.<spec.benchmarks.scimark.utils.Stopwatch: void start()>()"]
10->13[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Stopwatch: void reset()>()"]
3->16[label="specialinvoke r0.<spec.benchmarks.scimark.utils.Random: void initialize(int)>(i0)"]
8->15[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: void checkResults(java.lang.String,java.lang.String,int)>($r7, $r10, $i7)"]
4->10[label="specialinvoke $r7.<spec.benchmarks.scimark.utils.Stopwatch: void <init>()>()"]
4->11[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[] RandomVector(int,spec.benchmarks.scimark.utils.Random)>(i3, r1)"]
4->11[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[] RandomVector(int,spec.benchmarks.scimark.utils.Random)>(i0, r1)"]
9->14[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
7->14[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
}