digraph g {
6[label="void initialize(int)"]
9[label="double stop()"]
13[label="double[] RandomVector(int,spec.benchmarks.scimark.utils.Random)"]
12[label="void <init>()"]
0[label="void runBenchmark()"]
2[label="void run()"]
3[label="void <init>(int)"]
7[label="double read()"]
8[label="double num_flops(int,int,int)"]
14[label="double nextDouble()"]
1[label="void main(int)"]
16[label="double seconds()"]
11[label="void start()"]
17[label="void checkResults(java.lang.String,java.lang.String,int)"]
15[label="void reset()"]
5[label="void <init>(int)"]
4[label="double measureSparseMatmult(int,int,double,spec.benchmarks.scimark.utils.Random)"]
10[label="void matmult(double[],double[],int[],int[],double[],int,int)"]
0->1[label="staticinvoke <spec.benchmarks.scimark.sparse.SparseCompRow: void main(int)>(i0)"]
10->17[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: void checkResults(java.lang.String,java.lang.String,int)>($r7, $r10, $i7)"]
1->2[label="virtualinvoke r0.<spec.benchmarks.scimark.sparse.SparseCompRow: void run()>()"]
1->3[label="specialinvoke $r1.<spec.benchmarks.scimark.sparse.SparseCompRow: void <init>(int)>(i0)"]
2->4[label="virtualinvoke r0.<spec.benchmarks.scimark.sparse.SparseCompRow: double measureSparseMatmult(int,int,double,spec.benchmarks.scimark.utils.Random)>(i0, i1, d0, r1)"]
2->5[label="specialinvoke $r2.<spec.benchmarks.scimark.utils.Random: void <init>(int)>(101010)"]
4->13[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[] RandomVector(int,spec.benchmarks.scimark.utils.Random)>(i3, r1)"]
4->13[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[] RandomVector(int,spec.benchmarks.scimark.utils.Random)>(i0, r1)"]
5->6[label="specialinvoke r0.<spec.benchmarks.scimark.utils.Random: void initialize(int)>(i0)"]
4->7[label="virtualinvoke r8.<spec.benchmarks.scimark.utils.Stopwatch: double read()>()"]
13->14[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Random: double nextDouble()>()"]
7->16[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
7->16[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
4->8[label="virtualinvoke r0.<spec.benchmarks.scimark.sparse.SparseCompRow: double num_flops(int,int,int)>(i0, i1, s13)"]
4->9[label="virtualinvoke r8.<spec.benchmarks.scimark.utils.Stopwatch: double stop()>()"]
11->16[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
12->15[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Stopwatch: void reset()>()"]
9->16[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
4->10[label="virtualinvoke r0.<spec.benchmarks.scimark.sparse.SparseCompRow: void matmult(double[],double[],int[],int[],double[],int,int)>(r3, r4, r6, r5, r2, s13, b14)"]
4->11[label="virtualinvoke r8.<spec.benchmarks.scimark.utils.Stopwatch: void start()>()"]
4->12[label="specialinvoke $r7.<spec.benchmarks.scimark.utils.Stopwatch: void <init>()>()"]
}