digraph g {
7[label="double execute(double,double[][],int)"]
14[label="void initialize(int)"]
6[label="double stop()"]
9[label="void <init>()"]
0[label="void run()"]
3[label="double read()"]
11[label="double nextDouble()"]
13[label="double seconds()"]
2[label="double measureSOR(int,double,spec.benchmarks.scimark.utils.Random)"]
5[label="void checkResults(java.lang.String,java.lang.String,int)"]
8[label="void start()"]
4[label="double num_flops(int,int,int)"]
12[label="void reset()"]
1[label="void <init>(int)"]
10[label="double[][] RandomizeMatrix(double[][],spec.benchmarks.scimark.utils.Random)"]
0->1[label="specialinvoke $r2.<spec.benchmarks.scimark.utils.Random: void <init>(int)>(101010)"]
0->2[label="virtualinvoke r0.<spec.benchmarks.scimark.sor.SOR: double measureSOR(int,double,spec.benchmarks.scimark.utils.Random)>(i0, d0, r1)"]
2->3[label="virtualinvoke r2.<spec.benchmarks.scimark.utils.Stopwatch: double read()>()"]
2->4[label="virtualinvoke r0.<spec.benchmarks.scimark.sor.SOR: double num_flops(int,int,int)>(i0, i0, s1)"]
2->5[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: void checkResults(java.lang.String,java.lang.String,int)>($r7, $r10, $i3)"]
2->6[label="virtualinvoke r2.<spec.benchmarks.scimark.utils.Stopwatch: double stop()>()"]
2->7[label="virtualinvoke r0.<spec.benchmarks.scimark.sor.SOR: double execute(double,double[][],int)>(1.25, r20, s1)"]
2->8[label="virtualinvoke r2.<spec.benchmarks.scimark.utils.Stopwatch: void start()>()"]
2->10[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[][] RandomizeMatrix(double[][],spec.benchmarks.scimark.utils.Random)>(r19, r1)"]
2->9[label="specialinvoke $r5.<spec.benchmarks.scimark.utils.Stopwatch: void <init>()>()"]
3->13[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
3->13[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
10->11[label="virtualinvoke r1.<spec.benchmarks.scimark.utils.Random: double nextDouble()>()"]
9->12[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Stopwatch: void reset()>()"]
1->14[label="specialinvoke r0.<spec.benchmarks.scimark.utils.Random: void initialize(int)>(i0)"]
8->13[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
6->13[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
}