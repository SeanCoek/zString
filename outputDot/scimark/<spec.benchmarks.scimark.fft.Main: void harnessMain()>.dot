digraph g {
23[label="void initialize(int)"]
11[label="double stop()"]
21[label="int log2(int)"]
22[label="void bitreverse(double[])"]
3[label="void <init>(int)"]
15[label="void <init>()"]
6[label="double measureFFT(int,double,spec.benchmarks.scimark.utils.Random)"]
2[label="void main(int)"]
1[label="void runBenchmark()"]
4[label="void run()"]
0[label="void harnessMain()"]
7[label="double read()"]
20[label="void transform_internal(double[],int)"]
17[label="double nextDouble()"]
10[label="double test(double[])"]
16[label="double[] RandomizeVector(double[],spec.benchmarks.scimark.utils.Random)"]
19[label="double seconds()"]
9[label="void checkResults(java.lang.String,java.lang.String,int)"]
14[label="void start()"]
18[label="void reset()"]
8[label="double num_flops(int)"]
12[label="void inverse(double[])"]
5[label="void <init>(int)"]
13[label="void transform(double[])"]
11->19[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
16->17[label="virtualinvoke r1.<spec.benchmarks.scimark.utils.Random: double nextDouble()>()"]
7->19[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
7->19[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
14->19[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
10->13[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void transform(double[])>(r1)"]
10->12[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void inverse(double[])>(r1)"]
8->21[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: int log2(int)>(i0)"]
13->20[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void transform_internal(double[],int)>(r1, -1)"]
0->1[label="staticinvoke <spec.benchmarks.scimark.fft.Main: void runBenchmark()>()"]
1->2[label="staticinvoke <spec.benchmarks.scimark.fft.FFT: void main(int)>(i0)"]
2->3[label="specialinvoke $r1.<spec.benchmarks.scimark.fft.FFT: void <init>(int)>(i0)"]
20->22[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void bitreverse(double[])>(r1)"]
2->4[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void run()>()"]
20->21[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: int log2(int)>(i1)"]
4->5[label="specialinvoke $r2.<spec.benchmarks.scimark.utils.Random: void <init>(int)>(101010)"]
4->6[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: double measureFFT(int,double,spec.benchmarks.scimark.utils.Random)>(i0, d0, r1)"]
6->16[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[] RandomizeVector(double[],spec.benchmarks.scimark.utils.Random)>(r12, r1)"]
6->15[label="specialinvoke $r5.<spec.benchmarks.scimark.utils.Stopwatch: void <init>()>()"]
6->7[label="virtualinvoke r2.<spec.benchmarks.scimark.utils.Stopwatch: double read()>()"]
6->8[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: double num_flops(int)>(i0)"]
6->9[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: void checkResults(java.lang.String,java.lang.String,int)>($r7, $r10, $i2)"]
15->18[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Stopwatch: void reset()>()"]
6->10[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: double test(double[])>(r13)"]
6->12[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void inverse(double[])>(r13)"]
6->11[label="virtualinvoke r2.<spec.benchmarks.scimark.utils.Stopwatch: double stop()>()"]
12->20[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void transform_internal(double[],int)>(r1, 1)"]
6->14[label="virtualinvoke r2.<spec.benchmarks.scimark.utils.Stopwatch: void start()>()"]
5->23[label="specialinvoke r0.<spec.benchmarks.scimark.utils.Random: void initialize(int)>(i0)"]
6->13[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void transform(double[])>(r13)"]
}