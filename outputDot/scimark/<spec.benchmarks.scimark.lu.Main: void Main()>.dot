digraph g {
16[label="double stop()"]
0[label="void Main()"]
13[label="void solve(double[][],int[],double[])"]
5[label="double measureLU(int,double,spec.benchmarks.scimark.utils.Random)"]
11[label="double[] matvec(double[][],double[])"]
22[label="double nextDouble()"]
2[label="void main(int)"]
23[label="void reset()"]
14[label="double[] NewVectorCopy(double[])"]
6[label="void <init>(int)"]
21[label="double[][] RandomMatrix(int,int,spec.benchmarks.scimark.utils.Random)"]
25[label="void matvec(double[][],double[],double[])"]
7[label="void initialize(int)"]
9[label="double num_flops(int)"]
15[label="double[] RandomVector(int,spec.benchmarks.scimark.utils.Random)"]
4[label="void <init>(int)"]
20[label="void <init>()"]
3[label="void run()"]
18[label="void CopyMatrix(double[][],double[][])"]
8[label="double read()"]
10[label="double normabs(double[],double[])"]
24[label="double seconds()"]
12[label="void checkResults(java.lang.String,java.lang.String,int)"]
17[label="int factor(double[][],int[])"]
19[label="void start()"]
1[label="void runBenchmark()"]
21->22[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Random: double nextDouble()>()"]
5->14[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[] NewVectorCopy(double[])>(r15)"]
5->15[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[] RandomVector(int,spec.benchmarks.scimark.utils.Random)>(i0, r1)"]
5->16[label="virtualinvoke r5.<spec.benchmarks.scimark.utils.Stopwatch: double stop()>()"]
5->17[label="virtualinvoke r0.<spec.benchmarks.scimark.lu.LU: int factor(double[][],int[])>(r3, r4)"]
5->18[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: void CopyMatrix(double[][],double[][])>(r3, r2)"]
11->25[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: void matvec(double[][],double[],double[])>(r0, r1, r2)"]
5->19[label="virtualinvoke r5.<spec.benchmarks.scimark.utils.Stopwatch: void start()>()"]
19->24[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
5->10[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double normabs(double[],double[])>(r15, $r14)"]
5->10[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double normabs(double[],double[])>(r15, $r11)"]
5->11[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[] matvec(double[][],double[])>(r2, r6)"]
5->11[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[] matvec(double[][],double[])>(r2, r6)"]
15->22[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Random: double nextDouble()>()"]
5->12[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: void checkResults(java.lang.String,java.lang.String,int)>($r9, $r13, $i2)"]
8->24[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
8->24[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
5->13[label="virtualinvoke r0.<spec.benchmarks.scimark.lu.LU: void solve(double[][],int[],double[])>(r3, r4, r6)"]
0->1[label="staticinvoke <spec.benchmarks.scimark.lu.Main: void runBenchmark()>()"]
1->2[label="staticinvoke <spec.benchmarks.scimark.lu.LU: void main(int)>(i0)"]
20->23[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Stopwatch: void reset()>()"]
2->3[label="virtualinvoke r0.<spec.benchmarks.scimark.lu.LU: void run()>()"]
2->4[label="specialinvoke $r1.<spec.benchmarks.scimark.lu.LU: void <init>(int)>(i0)"]
3->5[label="virtualinvoke r0.<spec.benchmarks.scimark.lu.LU: double measureLU(int,double,spec.benchmarks.scimark.utils.Random)>(i0, d0, r1)"]
3->6[label="specialinvoke $r2.<spec.benchmarks.scimark.utils.Random: void <init>(int)>(101010)"]
6->7[label="specialinvoke r0.<spec.benchmarks.scimark.utils.Random: void initialize(int)>(i0)"]
5->8[label="virtualinvoke r5.<spec.benchmarks.scimark.utils.Stopwatch: double read()>()"]
5->9[label="staticinvoke <spec.benchmarks.scimark.lu.LU: double num_flops(int)>(i0)"]
5->20[label="specialinvoke $r7.<spec.benchmarks.scimark.utils.Stopwatch: void <init>()>()"]
5->21[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[][] RandomMatrix(int,int,spec.benchmarks.scimark.utils.Random)>(i0, i0, r1)"]
16->24[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
}