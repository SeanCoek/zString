digraph g {
0[label="void Main()"]
7[label="void initialize(int)"]
12[label="double stop()"]
23[label="int log2(int)"]
22[label="void bitreverse(double[])"]
4[label="void <init>(int)"]
16[label="void <init>()"]
5[label="double measureFFT(int,double,spec.benchmarks.scimark.utils.Random)"]
2[label="void main(int)"]
1[label="void runBenchmark()"]
3[label="void run()"]
8[label="double read()"]
21[label="void transform_internal(double[],int)"]
18[label="double nextDouble()"]
11[label="double test(double[])"]
17[label="double[] RandomizeVector(double[],spec.benchmarks.scimark.utils.Random)"]
20[label="double seconds()"]
10[label="void checkResults(java.lang.String,java.lang.String,int)"]
15[label="void start()"]
19[label="void reset()"]
9[label="double num_flops(int)"]
13[label="void inverse(double[])"]
6[label="void <init>(int)"]
14[label="void transform(double[])"]
21->23[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: int log2(int)>(i1)"]
21->22[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void bitreverse(double[])>(r1)"]
5->14[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void transform(double[])>(r13)"]
5->15[label="virtualinvoke r2.<spec.benchmarks.scimark.utils.Stopwatch: void start()>()"]
5->16[label="specialinvoke $r5.<spec.benchmarks.scimark.utils.Stopwatch: void <init>()>()"]
5->17[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[] RandomizeVector(double[],spec.benchmarks.scimark.utils.Random)>(r12, r1)"]
16->19[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Stopwatch: void reset()>()"]
8->20[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
8->20[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
5->10[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: void checkResults(java.lang.String,java.lang.String,int)>($r7, $r10, $i2)"]
5->11[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: double test(double[])>(r13)"]
13->21[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void transform_internal(double[],int)>(r1, 1)"]
5->12[label="virtualinvoke r2.<spec.benchmarks.scimark.utils.Stopwatch: double stop()>()"]
5->13[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void inverse(double[])>(r13)"]
15->20[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
0->1[label="staticinvoke <spec.benchmarks.scimark.fft.Main: void runBenchmark()>()"]
1->2[label="staticinvoke <spec.benchmarks.scimark.fft.FFT: void main(int)>(i0)"]
2->3[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void run()>()"]
2->4[label="specialinvoke $r1.<spec.benchmarks.scimark.fft.FFT: void <init>(int)>(i0)"]
3->5[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: double measureFFT(int,double,spec.benchmarks.scimark.utils.Random)>(i0, d0, r1)"]
3->6[label="specialinvoke $r2.<spec.benchmarks.scimark.utils.Random: void <init>(int)>(101010)"]
6->7[label="specialinvoke r0.<spec.benchmarks.scimark.utils.Random: void initialize(int)>(i0)"]
5->8[label="virtualinvoke r2.<spec.benchmarks.scimark.utils.Stopwatch: double read()>()"]
5->9[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: double num_flops(int)>(i0)"]
11->14[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void transform(double[])>(r1)"]
11->13[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void inverse(double[])>(r1)"]
17->18[label="virtualinvoke r1.<spec.benchmarks.scimark.utils.Random: double nextDouble()>()"]
9->23[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: int log2(int)>(i0)"]
14->21[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void transform_internal(double[],int)>(r1, -1)"]
12->20[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
}