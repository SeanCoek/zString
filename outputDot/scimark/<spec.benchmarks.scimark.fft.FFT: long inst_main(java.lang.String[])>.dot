digraph g {
4[label="void initialize(int)"]
10[label="double stop()"]
16[label="int log2(int)"]
18[label="void bitreverse(double[])"]
6[label="void <init>()"]
2[label="double measureFFT(int,double,spec.benchmarks.scimark.utils.Random)"]
1[label="void run()"]
14[label="double read()"]
17[label="void transform_internal(double[],int)"]
20[label="double nextDouble()"]
5[label="double[] RandomizeVector(double[],spec.benchmarks.scimark.utils.Random)"]
11[label="double test(double[])"]
15[label="double seconds()"]
7[label="void start()"]
12[label="void checkResults(java.lang.String,java.lang.String,int)"]
0[label="long inst_main(java.lang.String[])"]
19[label="void reset()"]
13[label="double num_flops(int)"]
9[label="void inverse(double[])"]
3[label="void <init>(int)"]
8[label="void transform(double[])"]
11->9[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void inverse(double[])>(r1)"]
11->8[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void transform(double[])>(r1)"]
14->15[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
14->15[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
10->15[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
9->17[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void transform_internal(double[],int)>(r1, 1)"]
7->15[label="staticinvoke <spec.benchmarks.scimark.utils.Stopwatch: double seconds()>()"]
0->1[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void run()>()"]
1->2[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: double measureFFT(int,double,spec.benchmarks.scimark.utils.Random)>(i0, d0, r1)"]
1->3[label="specialinvoke $r2.<spec.benchmarks.scimark.utils.Random: void <init>(int)>(101010)"]
3->4[label="specialinvoke r0.<spec.benchmarks.scimark.utils.Random: void initialize(int)>(i0)"]
2->5[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: double[] RandomizeVector(double[],spec.benchmarks.scimark.utils.Random)>(r12, r1)"]
2->6[label="specialinvoke $r5.<spec.benchmarks.scimark.utils.Stopwatch: void <init>()>()"]
2->7[label="virtualinvoke r2.<spec.benchmarks.scimark.utils.Stopwatch: void start()>()"]
2->8[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void transform(double[])>(r13)"]
2->10[label="virtualinvoke r2.<spec.benchmarks.scimark.utils.Stopwatch: double stop()>()"]
2->9[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void inverse(double[])>(r13)"]
8->17[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void transform_internal(double[],int)>(r1, -1)"]
17->16[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: int log2(int)>(i1)"]
6->19[label="virtualinvoke r0.<spec.benchmarks.scimark.utils.Stopwatch: void reset()>()"]
13->16[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: int log2(int)>(i0)"]
17->18[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: void bitreverse(double[])>(r1)"]
5->20[label="virtualinvoke r1.<spec.benchmarks.scimark.utils.Random: double nextDouble()>()"]
2->14[label="virtualinvoke r2.<spec.benchmarks.scimark.utils.Stopwatch: double read()>()"]
2->13[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: double num_flops(int)>(i0)"]
2->12[label="staticinvoke <spec.benchmarks.scimark.utils.kernel: void checkResults(java.lang.String,java.lang.String,int)>($r7, $r10, $i2)"]
2->11[label="virtualinvoke r0.<spec.benchmarks.scimark.fft.FFT: double test(double[])>(r13)"]
}