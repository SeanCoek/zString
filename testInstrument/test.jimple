public class test extends java.lang.Object
{

    public void <init>()
    {
        test r0;
        java.io.PrintStream ioRef;
        java.lang.String record, recTypeName;
        java.lang.StringBuilder recordBuilder;
        java.lang.Class recType;

        r0 := @this: test;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        recType = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        recTypeName = virtualinvoke recType.<java.lang.Class: java.lang.String getName()>();

        recordBuilder = new java.lang.StringBuilder;

        specialinvoke recordBuilder.<java.lang.StringBuilder: void <init>()>();

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IN METHOD::<test: void <init>()>::INVOKE::");

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(recTypeName);

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::r0::void <init>()::6\n");

        record = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.String toString()>();

        ioRef = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke ioRef.<java.io.PrintStream: void println(java.lang.String)>(record);

        staticinvoke <com.zstring.utils.FileUtil: void writeResult(java.lang.String,java.lang.String)>(record, "<test: void <init>()>");

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        java.util.ArrayList $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r7, $r8, $r9, recordBuilder;
        java.io.PrintStream $r6, $r10, ioRef;
        java.lang.String r12, r14, record, recTypeName;
        java.lang.Class recType;

        r0 := @parameter0: java.lang.String[];

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        recType = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        recTypeName = virtualinvoke recType.<java.lang.Class: java.lang.String getName()>();

        recordBuilder = new java.lang.StringBuilder;

        specialinvoke recordBuilder.<java.lang.StringBuilder: void <init>()>();

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IN METHOD::<test: void main(java.lang.String[])>::INVOKE::");

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(recTypeName);

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::$r2::void <init>()::9\n");

        record = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.String toString()>();

        ioRef = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke ioRef.<java.io.PrintStream: void println(java.lang.String)>(record);

        staticinvoke <com.zstring.utils.FileUtil: void writeResult(java.lang.String,java.lang.String)>(record, "<test: void main(java.lang.String[])>");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        recType = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        recTypeName = virtualinvoke recType.<java.lang.Class: java.lang.String getName()>();

        recordBuilder = new java.lang.StringBuilder;

        specialinvoke recordBuilder.<java.lang.StringBuilder: void <init>()>();

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IN METHOD::<test: void main(java.lang.String[])>::INVOKE::");

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(recTypeName);

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::$r3::void <init>()::11\n");

        record = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.String toString()>();

        ioRef = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke ioRef.<java.io.PrintStream: void println(java.lang.String)>(record);

        staticinvoke <com.zstring.utils.FileUtil: void writeResult(java.lang.String,java.lang.String)>(record, "<test: void main(java.lang.String[])>");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ClassA");

        recType = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        recTypeName = virtualinvoke recType.<java.lang.Class: java.lang.String getName()>();

        recordBuilder = new java.lang.StringBuilder;

        specialinvoke recordBuilder.<java.lang.StringBuilder: void <init>()>();

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IN METHOD::<test: void main(java.lang.String[])>::INVOKE::");

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(recTypeName);

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::$r3::java.lang.StringBuilder append(java.lang.String)::11\n");

        record = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.String toString()>();

        ioRef = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke ioRef.<java.io.PrintStream: void println(java.lang.String)>(record);

        staticinvoke <com.zstring.utils.FileUtil: void writeResult(java.lang.String,java.lang.String)>(record, "<test: void main(java.lang.String[])>");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("INVOKE method1()");

        recType = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        recTypeName = virtualinvoke recType.<java.lang.Class: java.lang.String getName()>();

        recordBuilder = new java.lang.StringBuilder;

        specialinvoke recordBuilder.<java.lang.StringBuilder: void <init>()>();

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IN METHOD::<test: void main(java.lang.String[])>::INVOKE::");

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(recTypeName);

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::$r4::java.lang.StringBuilder append(java.lang.String)::11\n");

        record = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.String toString()>();

        ioRef = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke ioRef.<java.io.PrintStream: void println(java.lang.String)>(record);

        staticinvoke <com.zstring.utils.FileUtil: void writeResult(java.lang.String,java.lang.String)>(record, "<test: void main(java.lang.String[])>");

        r12 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        recType = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        recTypeName = virtualinvoke recType.<java.lang.Class: java.lang.String getName()>();

        recordBuilder = new java.lang.StringBuilder;

        specialinvoke recordBuilder.<java.lang.StringBuilder: void <init>()>();

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IN METHOD::<test: void main(java.lang.String[])>::INVOKE::");

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(recTypeName);

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::$r5::java.lang.String toString()::11\n");

        record = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.String toString()>();

        ioRef = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke ioRef.<java.io.PrintStream: void println(java.lang.String)>(record);

        staticinvoke <com.zstring.utils.FileUtil: void writeResult(java.lang.String,java.lang.String)>(record, "<test: void main(java.lang.String[])>");

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(r12);

        recType = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        recTypeName = virtualinvoke recType.<java.lang.Class: java.lang.String getName()>();

        recordBuilder = new java.lang.StringBuilder;

        specialinvoke recordBuilder.<java.lang.StringBuilder: void <init>()>();

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IN METHOD::<test: void main(java.lang.String[])>::INVOKE::");

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(recTypeName);

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::$r6::void println(java.lang.String)::12\n");

        record = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.String toString()>();

        ioRef = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke ioRef.<java.io.PrintStream: void println(java.lang.String)>(record);

        staticinvoke <com.zstring.utils.FileUtil: void writeResult(java.lang.String,java.lang.String)>(record, "<test: void main(java.lang.String[])>");

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        recType = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        recTypeName = virtualinvoke recType.<java.lang.Class: java.lang.String getName()>();

        recordBuilder = new java.lang.StringBuilder;

        specialinvoke recordBuilder.<java.lang.StringBuilder: void <init>()>();

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IN METHOD::<test: void main(java.lang.String[])>::INVOKE::");

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(recTypeName);

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::$r7::void <init>()::14\n");

        record = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.String toString()>();

        ioRef = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke ioRef.<java.io.PrintStream: void println(java.lang.String)>(record);

        staticinvoke <com.zstring.utils.FileUtil: void writeResult(java.lang.String,java.lang.String)>(record, "<test: void main(java.lang.String[])>");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ClassB");

        recType = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        recTypeName = virtualinvoke recType.<java.lang.Class: java.lang.String getName()>();

        recordBuilder = new java.lang.StringBuilder;

        specialinvoke recordBuilder.<java.lang.StringBuilder: void <init>()>();

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IN METHOD::<test: void main(java.lang.String[])>::INVOKE::");

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(recTypeName);

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::$r7::java.lang.StringBuilder append(java.lang.String)::14\n");

        record = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.String toString()>();

        ioRef = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke ioRef.<java.io.PrintStream: void println(java.lang.String)>(record);

        staticinvoke <com.zstring.utils.FileUtil: void writeResult(java.lang.String,java.lang.String)>(record, "<test: void main(java.lang.String[])>");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("INVOKE method2()");

        recType = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();

        recTypeName = virtualinvoke recType.<java.lang.Class: java.lang.String getName()>();

        recordBuilder = new java.lang.StringBuilder;

        specialinvoke recordBuilder.<java.lang.StringBuilder: void <init>()>();

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IN METHOD::<test: void main(java.lang.String[])>::INVOKE::");

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(recTypeName);

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::$r8::java.lang.StringBuilder append(java.lang.String)::14\n");

        record = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.String toString()>();

        ioRef = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke ioRef.<java.io.PrintStream: void println(java.lang.String)>(record);

        staticinvoke <com.zstring.utils.FileUtil: void writeResult(java.lang.String,java.lang.String)>(record, "<test: void main(java.lang.String[])>");

        r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        recType = virtualinvoke $r9.<java.lang.Object: java.lang.Class getClass()>();

        recTypeName = virtualinvoke recType.<java.lang.Class: java.lang.String getName()>();

        recordBuilder = new java.lang.StringBuilder;

        specialinvoke recordBuilder.<java.lang.StringBuilder: void <init>()>();

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IN METHOD::<test: void main(java.lang.String[])>::INVOKE::");

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(recTypeName);

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::$r9::java.lang.String toString()::14\n");

        record = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.String toString()>();

        ioRef = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke ioRef.<java.io.PrintStream: void println(java.lang.String)>(record);

        staticinvoke <com.zstring.utils.FileUtil: void writeResult(java.lang.String,java.lang.String)>(record, "<test: void main(java.lang.String[])>");

        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(r14);

        recType = virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        recTypeName = virtualinvoke recType.<java.lang.Class: java.lang.String getName()>();

        recordBuilder = new java.lang.StringBuilder;

        specialinvoke recordBuilder.<java.lang.StringBuilder: void <init>()>();

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IN METHOD::<test: void main(java.lang.String[])>::INVOKE::");

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(recTypeName);

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::$r10::void println(java.lang.String)::15\n");

        record = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.String toString()>();

        ioRef = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke ioRef.<java.io.PrintStream: void println(java.lang.String)>(record);

        staticinvoke <com.zstring.utils.FileUtil: void writeResult(java.lang.String,java.lang.String)>(record, "<test: void main(java.lang.String[])>");

        staticinvoke <test: void fun()>();

        recordBuilder = new java.lang.StringBuilder;

        specialinvoke recordBuilder.<java.lang.StringBuilder: void <init>()>();

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IN METHOD::<test: void main(java.lang.String[])>::STATICINVOKE::");

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<test: void fun()>::16\n");

        record = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.String toString()>();

        ioRef = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke ioRef.<java.io.PrintStream: void println(java.lang.String)>(record);

        staticinvoke <com.zstring.utils.FileUtil: void writeResult(java.lang.String,java.lang.String)>(record, "<test: void main(java.lang.String[])>");

        staticinvoke <com.zstring.utils.FileUtil: void writeResult(java.util.List,java.lang.String)>($r2, r14);

        recordBuilder = new java.lang.StringBuilder;

        specialinvoke recordBuilder.<java.lang.StringBuilder: void <init>()>();

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IN METHOD::<test: void main(java.lang.String[])>::STATICINVOKE::");

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<com.zstring.utils.FileUtil: void writeResult(java.util.List,java.lang.String)>::17\n");

        record = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.String toString()>();

        ioRef = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke ioRef.<java.io.PrintStream: void println(java.lang.String)>(record);

        staticinvoke <com.zstring.utils.FileUtil: void writeResult(java.lang.String,java.lang.String)>(record, "<test: void main(java.lang.String[])>");

        return;
    }

    public static void fun()
    {
        java.io.PrintStream $r0, ioRef;
        java.lang.String record, recTypeName;
        java.lang.StringBuilder recordBuilder;
        java.lang.Class recType;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("test.fun();");

        recType = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        recTypeName = virtualinvoke recType.<java.lang.Class: java.lang.String getName()>();

        recordBuilder = new java.lang.StringBuilder;

        specialinvoke recordBuilder.<java.lang.StringBuilder: void <init>()>();

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IN METHOD::<test: void fun()>::INVOKE::");

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(recTypeName);

        recordBuilder = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::$r0::void println(java.lang.String)::21\n");

        record = virtualinvoke recordBuilder.<java.lang.StringBuilder: java.lang.String toString()>();

        ioRef = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke ioRef.<java.io.PrintStream: void println(java.lang.String)>(record);

        staticinvoke <com.zstring.utils.FileUtil: void writeResult(java.lang.String,java.lang.String)>(record, "<test: void fun()>");

        return;
    }
}
