<spec.io.ValidityCheckOutputStream: void <init>(java.lang.String)>
<spec.io.ValidityCheckOutputStream: void write(int)>
<spec.io.ValidityCheckOutputStream: boolean validityCheck(spec.harness.results.LoopResult)>
<spec.io.ValidityCheckOutputStream: void validityCheck2(spec.harness.results.LoopResult)>
<spec.io.ValidityCheckOutputStream: void handleValidationFailure(spec.harness.results.LoopResult,int,java.lang.String,java.lang.String)>
<spec.io.ValidityCheckOutputStream: void createValidityFile()>
<spec.io.FileCache$CachedFile: void <init>(spec.io.FileCache,java.lang.String)>
<spec.io.FileCache$CachedFile: java.lang.String getFilename()>
<spec.io.FileCache$CachedFile: java.io.ByteArrayInputStream getStream()>
<spec.io.FileCache$CachedFile: void cache()>
<spec.io.FileCache$CachedFile: void discard()>
<spec.io.FileCache$CachedFile: org.xml.sax.InputSource asNewInputSource()>
<spec.io.FileCache$CachedFile: javax.xml.transform.stream.StreamSource asNewStreamSource()>
<spec.io.FileCache: java.io.ByteArrayInputStream getStream(java.lang.String)>
<spec.io.FileCache: void discard(java.lang.String)>
<spec.io.FileCache: int getLength(java.lang.String)>
<spec.io.FileCache: boolean hasFile(java.lang.String)>
<spec.io.FileCache: byte[] getByteArray(java.lang.String)>
<spec.benchmarks.compress.Compressor: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>
<spec.benchmarks.compress.Compressor: void compress()>
<spec.benchmarks.compress.Compressor: void output(int)>
<spec.benchmarks.compress.Compressor: void clBlock()>
<spec.benchmarks.compress.Harness: void runCompress(int)>
<spec.benchmarks.compress.Harness: long inst_main(int)>
<spec.benchmarks.compress.Harness: void prepareBuffers()>
<spec.benchmarks.compress.OutputBuffer: void <init>(byte[])>
<spec.benchmarks.compress.OutputBuffer: int getLength()>
<spec.benchmarks.compress.OutputBuffer: long getCRC()>
<spec.benchmarks.compress.OutputBuffer: void writeByte(byte)>
<spec.benchmarks.compress.OutputBuffer: void writebytes(byte[],int)>
<spec.benchmarks.compress.Decompressor$DeStack: void <init>()>
<spec.benchmarks.compress.Decompressor$DeStack: void push(byte)>
<spec.benchmarks.compress.Decompressor$DeStack: byte pop()>
<spec.benchmarks.compress.Decompressor$DeStack: boolean isEmpty()>
<spec.benchmarks.compress.Harness$Source: void <init>(java.lang.String)>
<spec.benchmarks.compress.Harness$Source: long getCRC()>
<spec.benchmarks.compress.Harness$Source: int getLength()>
<spec.benchmarks.compress.Harness$Source: byte[] getBuffer()>
<spec.benchmarks.compress.Harness$Source: byte[] fillBuffer(java.lang.String)>
<spec.benchmarks.compress.Compressor$HashTable: void <init>()>
<spec.benchmarks.compress.Compressor$HashTable: int of(int)>
<spec.benchmarks.compress.Compressor$HashTable: void set(int,int)>
<spec.benchmarks.compress.Compressor$HashTable: int hsize()>
<spec.benchmarks.compress.Compressor$HashTable: void clear()>
<spec.benchmarks.compress.CompBase: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>
<spec.benchmarks.compress.CompBase: int getMaxCode()>
<spec.benchmarks.compress.InputBuffer: void <init>(int,byte[])>
<spec.benchmarks.compress.InputBuffer: int readByte()>
<spec.benchmarks.compress.InputBuffer: int readBytes(byte[],int)>
<spec.benchmarks.compress.Compress: void <init>()>
<spec.benchmarks.compress.Compress: spec.benchmarks.compress.OutputBuffer performAction(byte[],int,int,byte[])>
<spec.benchmarks.compress.Compress: void <clinit>()>
<spec.benchmarks.compress.Main: void <init>(spec.harness.results.BenchmarkResult,int)>
<spec.benchmarks.compress.Main: java.lang.String testType()>
<spec.benchmarks.compress.Main: long runBenchmark()>
<spec.benchmarks.compress.Main: void harnessMain()>
<spec.benchmarks.compress.Main: void Main()>
<spec.benchmarks.compress.Main: void setupBenchmark()>
<spec.benchmarks.compress.CodeTable: void <init>()>
<spec.benchmarks.compress.CodeTable: int of(int)>
<spec.benchmarks.compress.CodeTable: void set(int,int)>
<spec.benchmarks.compress.CodeTable: void clear(int)>
<spec.benchmarks.compress.Decompressor: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>
<spec.benchmarks.compress.Decompressor: void decompress()>
<spec.benchmarks.compress.Decompressor: int getCode()>
<spec.benchmarks.compress.Decompressor$SuffixTable: void <init>()>
<spec.benchmarks.compress.Decompressor$SuffixTable: byte of(int)>
<spec.benchmarks.compress.Decompressor$SuffixTable: void set(int,byte)>
<spec.benchmarks.compress.Decompressor$SuffixTable: void init(int)>
<spec.reporter.BenchmarkRecord: void printAllRecordedInfo()>
<spec.reporter.PlainWriter: void <init>(java.lang.String)>
<spec.reporter.PlainWriter: void handleIterRecord(spec.reporter.BenchmarkRecord)>
<spec.reporter.PlainWriter: void handleBenchmarkRecord(spec.reporter.BenchmarkRecord)>
<spec.reporter.PlainWriter: void insertRecord(java.lang.String,java.lang.String)>
<spec.reporter.PlainWriter: void putHat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<spec.reporter.PlainWriter: void putSummaryTable(java.lang.String,java.util.TreeMap)>
<spec.reporter.PlainWriter: void startDetailsTable()>
<spec.reporter.PlainWriter: void insertRecords(java.util.ArrayList)>
<spec.reporter.PlainWriter: java.lang.String getCopyRightSign()>
<spec.reporter.SPECSubmissionProcessor: void <init>()>
<spec.reporter.SPECSubmissionPreparer: void <init>()>
<spec.reporter.Writer: void <init>(java.lang.String)>
<spec.reporter.Writer: void closeStream()>
<spec.reporter.Writer: void startTable(java.lang.String,boolean)>
<spec.reporter.Writer: void startTable(java.lang.String,boolean,boolean,boolean)>
<spec.reporter.Writer: void endTable(boolean)>
<spec.reporter.Writer: void startRecordAndData()>
<spec.reporter.Writer: void endRecordAndData()>
<spec.reporter.Writer: void endAndStartRecordAndData()>
<spec.reporter.Writer: void endAndStartData()>
<spec.reporter.Writer: void endTable()>
<spec.reporter.Writer: void startReport()>
<spec.reporter.Writer: void endReport()>
<spec.reporter.Writer: java.lang.String getType()>
<spec.reporter.Writer: void setType(java.lang.String)>
<spec.reporter.Reporter: void <init>()>
<spec.reporter.Utils: void <init>()>
<spec.reporter.Utils: java.lang.String getImageName(java.lang.String)>
<spec.reporter.Utils: java.lang.String formatScore(double,java.lang.String)>
<spec.reporter.BenchmarkChart: void addTimeInfo(long,long)>
<spec.reporter.HTMLWriter: java.lang.String[] initIndents()>
<spec.reporter.HTMLWriter: void <init>(java.lang.String)>
<spec.reporter.HTMLWriter: void startTable(java.lang.String,boolean,boolean,boolean)>
<spec.reporter.HTMLWriter: void startTable(java.lang.String,boolean)>
<spec.reporter.HTMLWriter: void startTable(boolean)>
<spec.reporter.HTMLWriter: void insertImgData(java.lang.String,java.lang.String,int)>
<spec.reporter.HTMLWriter: void startDetailsTable()>
<spec.reporter.HTMLWriter: void insertData(java.lang.String)>
<spec.reporter.HTMLWriter: void insertData(java.lang.String,int)>
<spec.reporter.HTMLWriter: void insertRecord(java.lang.String,java.lang.String)>
<spec.reporter.HTMLWriter: void insertHeaderData(java.lang.String,java.lang.String,boolean,int,int,java.lang.String)>
<spec.reporter.HTMLWriter: void insertHeaderData(java.lang.String,java.lang.String,boolean,int,int)>
<spec.reporter.HTMLWriter: void insertHeaderRecord(java.lang.String,java.lang.String,boolean,int,int)>
<spec.reporter.HTMLWriter: void startRecord()>
<spec.reporter.HTMLWriter: void endRecord()>
<spec.reporter.HTMLWriter: void endAndStartRecord()>
<spec.reporter.HTMLWriter: void putColumnsSpec(int[])>
<spec.reporter.HTMLWriter: void putSummaryTable(java.lang.String,java.util.TreeMap)>
<spec.reporter.HTMLWriter: void putHat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<spec.reporter.HTMLWriter: void endData()>
<spec.reporter.HTMLWriter: void startData()>
<spec.reporter.HTMLWriter: void startRecordAndData()>
<spec.reporter.HTMLWriter: void putTHEAD(boolean)>
<spec.reporter.HTMLWriter: void putTBODY(boolean)>
<spec.reporter.HTMLWriter: void putTABLE(boolean,java.lang.String)>
<spec.reporter.HTMLWriter: void endRecordAndData()>
<spec.reporter.HTMLWriter: void endAndStartRecordAndData()>
<spec.reporter.HTMLWriter: void endAndStartData()>
<spec.reporter.HTMLWriter: void endTable()>
<spec.reporter.HTMLWriter: void endTable(boolean)>
<spec.reporter.HTMLWriter: void incIndent()>
<spec.reporter.HTMLWriter: void decIndent()>
<spec.reporter.HTMLWriter: void putString(java.lang.String)>
<spec.reporter.HTMLWriter: void handleIterRecord(java.util.ArrayList,int)>
<spec.reporter.HTMLWriter: java.lang.String createConfRecord(java.lang.String[])>
<spec.reporter.HTMLWriter: void handleBenchmarkRecord(spec.reporter.BenchmarkRecord)>
<spec.reporter.HTMLWriter: java.lang.String insertBRTags(java.util.ArrayList)>
<spec.reporter.HTMLWriter: void insertRecords(java.util.ArrayList)>
<spec.reporter.HTMLWriter: void startReport()>
<spec.reporter.HTMLWriter: void endReport()>
<spec.reporter.HTMLWriter: java.lang.String getCopyRightSign()>
<spec.harness.Context: void <init>()>
<spec.harness.Context: void setOut(java.io.PrintStream)>
<spec.harness.Context: java.lang.String getResultDirNameCurrent()>
<spec.harness.Context: java.lang.String getResourceDirFor(java.lang.Class)>
<spec.harness.Launch: void <init>()>
<spec.harness.Launch: void closeSubmissionFile(java.lang.String)>
<spec.harness.Launch: java.lang.String createReport(java.lang.String)>
<spec.harness.SpecJVMBenchmarkBase: void setupBenchmark()>
<spec.harness.SpecJVMBenchmarkBase: void setupIteration()>
<spec.harness.SpecJVMBenchmarkBase: void <init>(spec.harness.results.BenchmarkResult,int)>
<spec.harness.SpecJVMBenchmarkBase: void tearDownIteration()>
<spec.harness.SpecJVMBenchmarkBase: void tearDownBenchmark()>
<spec.harness.SpecJVMBenchmarkBase: java.lang.String testType()>
<spec.harness.CommandLineParser: void <init>()>
<spec.harness.Configuration: void <init>()>
<spec.harness.analyzer.AnalyzerResult: void <init>(double)>
<spec.harness.analyzer.AnalyzerResult: double getResult()>
<spec.harness.analyzer.AnalyzerResult: java.lang.String getDescription()>
<spec.harness.analyzer.TempAnalyzer: void setupAnalyzerClass()>
<spec.harness.analyzer.TempAnalyzer: void tearDownAnalyzerClass()>
<spec.harness.analyzer.TempAnalyzer: void <init>()>
<spec.harness.analyzer.TempAnalyzer: void setup()>
<spec.harness.analyzer.TempAnalyzer: void startMeasurementInterval()>
<spec.harness.analyzer.TempAnalyzer: void endMeasurementInterval()>
<spec.harness.analyzer.TempAnalyzer: void tearDown()>
<spec.harness.analyzer.TempAnalyzer: void execute(long)>
<spec.harness.analyzer.TempAnalyzer: void <clinit>()>
<spec.harness.analyzer.PowerAnalyzer$PowerConsumtionResult: void <init>(double,java.lang.String,java.lang.String)>
<spec.harness.analyzer.PowerAnalyzer$PowerConsumtionResult: java.lang.String getName()>
<spec.harness.analyzer.PowerAnalyzer$PowerConsumtionResult: java.lang.String getUnit()>
<spec.harness.analyzer.TempAnalyzer$TemperatureResult: void <init>(double,java.lang.String,java.lang.String)>
<spec.harness.analyzer.TempAnalyzer$TemperatureResult: java.lang.String getName()>
<spec.harness.analyzer.TempAnalyzer$TemperatureResult: java.lang.String getUnit()>
<spec.harness.analyzer.PollingAnalyzerExample$NumberOfOperations: void <init>(long,long)>
<spec.harness.analyzer.PollingAnalyzerExample$NumberOfOperations: java.lang.String getName()>
<spec.harness.analyzer.PollingAnalyzerExample$NumberOfOperations: java.lang.String getUnit()>
<spec.harness.analyzer.HeapMemoryTotalAnalyzer: void <init>()>
<spec.harness.analyzer.HeapMemoryTotalAnalyzer: void execute(long)>
<spec.harness.analyzer.HeapMemoryTotalAnalyzer: java.lang.String access$000()>
<spec.harness.analyzer.HeapMemoryTotalAnalyzer: java.lang.String access$100()>
<spec.harness.analyzer.HeapMemoryTotalAnalyzer: void <clinit>()>
<spec.harness.analyzer.CallbackAnalyzerExample$NumberInfo: void <init>(long,long)>
<spec.harness.analyzer.CallbackAnalyzerExample$NumberInfo: java.lang.String getName()>
<spec.harness.analyzer.CallbackAnalyzerExample$NumberInfo: java.lang.String getUnit()>
<spec.harness.analyzer.HeapMemoryFreeAnalyzer$HeapMemoryFree: void <init>(long,long)>
<spec.harness.analyzer.HeapMemoryFreeAnalyzer$HeapMemoryFree: java.lang.String getName()>
<spec.harness.analyzer.HeapMemoryFreeAnalyzer$HeapMemoryFree: java.lang.String getUnit()>
<spec.harness.analyzer.CallbackAnalyzerExample: void <init>()>
<spec.harness.analyzer.CallbackAnalyzerExample: void execute(long)>
<spec.harness.analyzer.CallbackAnalyzerExample: void setup()>
<spec.harness.analyzer.CallbackAnalyzerExample: void startMeasurementInterval()>
<spec.harness.analyzer.CallbackAnalyzerExample: void endMeasurementInterval()>
<spec.harness.analyzer.CallbackAnalyzerExample: void tearDown()>
<spec.harness.analyzer.CallbackAnalyzerExample: void callbackMethod(int)>
<spec.harness.analyzer.CallbackAnalyzerExample: java.lang.String access$000()>
<spec.harness.analyzer.CallbackAnalyzerExample: java.lang.String access$100()>
<spec.harness.analyzer.CallbackAnalyzerExample: void <clinit>()>
<spec.harness.analyzer.TempSensor: void <init>(java.lang.String,int)>
<spec.harness.analyzer.TempSensor: int writeMeter(java.lang.String)>
<spec.harness.analyzer.TempSensor: java.lang.String readMeter()>
<spec.harness.analyzer.TempSensor: void endSocConnection()>
<spec.harness.analyzer.TempSensor: void startRun(int,int,int)>
<spec.harness.analyzer.TempSensor: void go()>
<spec.harness.analyzer.TempSensor: void stop()>
<spec.harness.analyzer.TempSensor: java.util.HashMap reportRun(java.lang.String)>
<spec.harness.analyzer.TempSensor: java.lang.String sensorType()>
<spec.harness.analyzer.TempSensor: java.lang.Boolean sensorCompliant()>
<spec.harness.analyzer.TempSensor: java.lang.String sensorPtdVersion()>
<spec.harness.analyzer.TempSensor: java.lang.String sensorPtdHostOs()>
<spec.harness.analyzer.TempSensor: java.lang.String sensorPtdMode()>
<spec.harness.analyzer.TempSensor: void <clinit>()>
<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void <init>()>
<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void setListener(spec.harness.analyzer.CallbackAnalyzerExample)>
<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void register(spec.harness.analyzer.CallbackAnalyzerExample)>
<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void deregister(spec.harness.analyzer.CallbackAnalyzerExample)>
<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void run()>
<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void <clinit>()>
<spec.harness.analyzer.PollingAnalyzerExample: void <init>()>
<spec.harness.analyzer.PollingAnalyzerExample: void execute(long)>
<spec.harness.analyzer.PollingAnalyzerExample: java.lang.String access$000()>
<spec.harness.analyzer.PollingAnalyzerExample: java.lang.String access$100()>
<spec.harness.analyzer.PollingAnalyzerExample: void <clinit>()>
<spec.harness.analyzer.HeapMemoryFreeAnalyzer: void <init>()>
<spec.harness.analyzer.HeapMemoryFreeAnalyzer: void execute(long)>
<spec.harness.analyzer.HeapMemoryFreeAnalyzer: java.lang.String access$000()>
<spec.harness.analyzer.HeapMemoryFreeAnalyzer: java.lang.String access$100()>
<spec.harness.analyzer.HeapMemoryFreeAnalyzer: void <clinit>()>
<spec.harness.analyzer.PowerAnalyzer: void setupAnalyzerClass()>
<spec.harness.analyzer.PowerAnalyzer: void tearDownAnalyzerClass()>
<spec.harness.analyzer.PowerAnalyzer: void <init>()>
<spec.harness.analyzer.PowerAnalyzer: void setup()>
<spec.harness.analyzer.PowerAnalyzer: void startMeasurementInterval()>
<spec.harness.analyzer.PowerAnalyzer: void endMeasurementInterval()>
<spec.harness.analyzer.PowerAnalyzer: void tearDown()>
<spec.harness.analyzer.PowerAnalyzer: void execute(long)>
<spec.harness.analyzer.PowerAnalyzer: void <clinit>()>
<spec.harness.analyzer.PowerMeter: void <init>(java.lang.String,int)>
<spec.harness.analyzer.PowerMeter: int writeMeter(java.lang.String)>
<spec.harness.analyzer.PowerMeter: java.lang.String readMeter()>
<spec.harness.analyzer.PowerMeter: void endSocConnection()>
<spec.harness.analyzer.PowerMeter: void startRun(int,int,int)>
<spec.harness.analyzer.PowerMeter: void go()>
<spec.harness.analyzer.PowerMeter: void stop()>
<spec.harness.analyzer.PowerMeter: java.util.HashMap reportRun(java.lang.String)>
<spec.harness.analyzer.PowerMeter: java.lang.String meterType()>
<spec.harness.analyzer.PowerMeter: java.lang.Boolean meterCompliant()>
<spec.harness.analyzer.PowerMeter: java.lang.String meterPtdVersion()>
<spec.harness.analyzer.PowerMeter: java.lang.String meterPtdHostOs()>
<spec.harness.analyzer.PowerMeter: java.lang.String meterPtdMode()>
<spec.harness.analyzer.PowerMeter: void <clinit>()>
<spec.harness.analyzer.HeapMemoryTotalAnalyzer$HeapMemoryTotal: void <init>(long,long)>
<spec.harness.analyzer.HeapMemoryTotalAnalyzer$HeapMemoryTotal: java.lang.String getName()>
<spec.harness.analyzer.HeapMemoryTotalAnalyzer$HeapMemoryTotal: java.lang.String getUnit()>
<spec.harness.analyzer.TYInfo: void <init>(long,long)>
<spec.harness.analyzer.TYInfo: long getTime()>
<spec.harness.analyzer.TYInfo: long getValue()>
<spec.harness.analyzer.AnalyzerBase: void <init>()>
<spec.harness.analyzer.AnalyzerBase: void setIterationResult(spec.harness.results.IterationResult)>
<spec.harness.analyzer.AnalyzerBase: void setupAnalyzerClass()>
<spec.harness.analyzer.AnalyzerBase: void setup()>
<spec.harness.analyzer.AnalyzerBase: void startMeasurementInterval()>
<spec.harness.analyzer.AnalyzerBase: void endMeasurementInterval()>
<spec.harness.analyzer.AnalyzerBase: void tearDown()>
<spec.harness.analyzer.AnalyzerBase: void tearDownAnalyzerClass()>
<spec.harness.analyzer.AnalyzerBase: void report(spec.harness.analyzer.TYInfo)>
<spec.harness.analyzer.AnalyzerBase: void report(spec.harness.analyzer.AnalyzerResult)>
<spec.harness.analyzer.AnalyzerBase: boolean isTimedRun()>
<spec.harness.analyzer.AnalyzerBase: long getBenchmarkDuration()>
<spec.harness.analyzer.AnalyzerBase: java.lang.String getBenchmarkName()>
<spec.harness.analyzer.AnalyzerBase: long getNoOps()>
<spec.harness.analyzer.AnalyzerBase: void addError(java.lang.String)>
<spec.harness.analyzer.AnalyzerBase: void addErrorToSuiteResult(java.lang.String)>
<spec.harness.analyzer.AnalyzerBase: void addViolationToSuiteResult(java.lang.String)>
<spec.harness.analyzer.CallbackAnalyzerExample$NumberResult: void <init>(double,java.lang.String,java.lang.String)>
<spec.harness.analyzer.CallbackAnalyzerExample$NumberResult: java.lang.String getName()>
<spec.harness.analyzer.CallbackAnalyzerExample$NumberResult: java.lang.String getUnit()>
<spec.harness.Util: void <init>()>
<spec.harness.Util: long getLongProperty(java.lang.String,java.lang.String)>
<spec.harness.BenchmarkThread: void <init>(spec.harness.results.BenchmarkResult,int)>
<spec.harness.BenchmarkThread: int getThreadId()>
<spec.harness.BenchmarkThread: java.lang.String[] getArgs()>
<spec.harness.BenchmarkThread: void setItResult(spec.harness.results.IterationResult)>
<spec.harness.BenchmarkThread: void setPrintProgress(boolean)>
<spec.harness.BenchmarkThread: void run()>
<spec.harness.BenchmarkThread: void setInvalidStartupResult(spec.harness.results.BenchmarkResult,spec.harness.results.IterationResult)>
<spec.harness.BenchmarkThread: boolean executeIteration()>
<spec.harness.BenchmarkThread: spec.harness.results.LoopResult runLoop(spec.harness.results.IterationResult)>
<spec.harness.KnownIssues: void <init>()>
<spec.harness.results.BenchmarkResult: java.lang.String[] getArgs()>
<spec.harness.results.BenchmarkResult: boolean doChecksum()>
<spec.harness.results.BenchmarkResult: spec.harness.results.IterationResult getWarmupResult()>
<spec.harness.results.BenchmarkResult: java.util.List getIterationResults()>
<spec.harness.results.BenchmarkResult: java.lang.String getAnalyzers()>
<spec.harness.results.BenchmarkResult: void toXml(java.io.PrintStream,int)>
<spec.harness.results.TestResult: java.util.List getErrors()>
<spec.harness.results.TestResult: java.lang.String ptxArrToValue(java.lang.String[])>
<spec.harness.results.LoopResult: void <init>()>
<spec.harness.results.LoopResult: int getBmThreadId()>
<spec.harness.results.LoopResult: void setBmThreadId(int)>
<spec.harness.results.LoopResult: int getLoopCnt()>
<spec.harness.results.LoopResult: void setLoopCnt(int)>
<spec.harness.results.LoopResult: int getIteration()>
<spec.harness.results.LoopResult: void setIteration(int)>
<spec.harness.results.LoopResult: long getStartTime()>
<spec.harness.results.LoopResult: void setStartTime(long)>
<spec.harness.results.LoopResult: long getEndTime()>
<spec.harness.results.LoopResult: void setEndTime(long)>
<spec.harness.results.LoopResult: long getLoopTime()>
<spec.harness.results.LoopResult: void toXml(java.io.PrintStream,int)>
<spec.harness.results.LoopResult: boolean isValid()>
<spec.harness.results.LoopResult: java.util.List getAllErrors(java.lang.String)>
<spec.harness.results.SuiteResult: java.lang.String getWorkloadName()>
<spec.harness.results.SuiteResult: java.lang.String getKitVersion()>
<spec.harness.results.SuiteResult: void addJvmInfo(java.lang.String,java.lang.String)>
<spec.harness.results.SuiteResult: java.util.Map getJvmInfo()>
<spec.harness.results.SuiteResult: java.util.Map getRunInfo()>
<spec.harness.results.SuiteResult: java.util.Map getSwInfo()>
<spec.harness.results.SuiteResult: java.util.Map getHwInfo()>
<spec.harness.results.SuiteResult: java.util.List getConfigurations()>
<spec.harness.results.SuiteResult: java.util.List getBenchmarkResults()>
<spec.harness.results.SuiteResult: boolean isValid()>
<spec.harness.results.SuiteResult: java.util.List getAllErrors(java.lang.String)>
<spec.harness.results.SuiteResult: void toXml(java.io.PrintStream,int)>
<spec.harness.results.SuiteResult: java.lang.String getCommandLineOptions()>
<spec.harness.results.IterationResult: spec.harness.results.BenchmarkResult getBenchmarkResult()>
<spec.harness.results.IterationResult: boolean continueToRun()>
<spec.harness.results.IterationResult: long getEndTime()>
<spec.harness.results.IterationResult: long getStartTime()>
<spec.harness.results.IterationResult: void setStartupTest(boolean)>
<spec.harness.results.IterationResult: boolean getStartupTest()>
<spec.harness.results.IterationResult: void incOperations(double)>
<spec.harness.results.IterationResult: java.util.List getLoopResults()>
<spec.harness.results.IterationResult: void addLoopResults(spec.harness.results.LoopResult)>
<spec.harness.results.IterationResult: int getNumberBmThreadsDone()>
<spec.harness.results.IterationResult: boolean incNumberBmThreadsDone()>
<spec.harness.results.IterationResult: java.util.List getAnalyzers()>
<spec.harness.results.IterationResult: void addAnalyzer(spec.harness.analyzer.TYInfo)>
<spec.harness.results.IterationResult: void addAnalyzerSummary(spec.harness.analyzer.AnalyzerResult)>
<spec.harness.ProgramRunner: void interruptProgramRunner()>
<spec.harness.Constants: void <init>()>
<spec.harness.VMVersionTest: void <init>()>
