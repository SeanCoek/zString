0::<spec.harness.ProgramRunner: void <init>(spec.harness.results.BenchmarkResult,int)>
1::<spec.harness.ProgramRunner: void run()>
2::<spec.harness.ProgramRunner: boolean setupBenchmarkMethods()>
3::<spec.harness.ProgramRunner: spec.harness.SpecJVMBenchmarkBase createBmInstance(spec.harness.results.BenchmarkResult,int)>
4::<spec.harness.ProgramRunner: java.lang.String invokeBmTestTypeMethod()>
5::<spec.harness.ProgramRunner: void invokeBmSetupBenchmark()>
6::<spec.harness.ProgramRunner: void invokeBmSetupIteration()>
7::<spec.harness.ProgramRunner: void invokeBmTearDownIteration()>
8::<spec.harness.ProgramRunner: void invokeBmTearDownBenchmark()>
9::<spec.harness.ProgramRunner: boolean runBenchmark()>
10::<spec.harness.ProgramRunner: boolean runIteration(java.lang.String,spec.harness.results.IterationResult,spec.harness.results.BenchmarkResult)>
11::<spec.harness.ProgramRunner: java.lang.String getStackTraceAsString(java.lang.Throwable)>
12::<spec.harness.ProgramRunner: int getNoBmHarnessThreads(spec.harness.results.BenchmarkResult)>
13::<spec.harness.ProgramRunner: void pause(long)>
14::<spec.harness.ProgramRunner: void interruptProgramRunner()>
15::<spec.harness.ProgramRunner: void endOfMeasurementInterval(long)>
16::<spec.harness.ProgramRunner: void <clinit>()>
17::<spec.benchmarks.scimark.monte_carlo.Main: void runBenchmark()>
18::<spec.benchmarks.scimark.monte_carlo.Main: void Main()>
19::<spec.benchmarks.scimark.monte_carlo.Main: void harnessMain()>
20::<spec.benchmarks.scimark.monte_carlo.Main: void <init>(spec.harness.results.BenchmarkResult,int)>
21::<spec.benchmarks.scimark.monte_carlo.Main: void main(java.lang.String[])>
22::<spec.benchmarks.scimark.sor.SOR: void <init>(int)>
23::<spec.benchmarks.scimark.sor.SOR: void main(int)>
24::<spec.benchmarks.scimark.sor.SOR: double measureSOR(int,double,spec.benchmarks.scimark.utils.Random)>
25::<spec.benchmarks.scimark.sor.SOR: void run()>
26::<spec.benchmarks.scimark.sor.SOR: void <clinit>()>
27::<spec.io.ValidityCheckOutputStream: void <init>(java.lang.String)>
28::<spec.io.ValidityCheckOutputStream: void write(int)>
29::<spec.io.ValidityCheckOutputStream: boolean validityCheck(spec.harness.results.LoopResult)>
30::<spec.io.ValidityCheckOutputStream: void validityCheck2(spec.harness.results.LoopResult)>
31::<spec.io.ValidityCheckOutputStream: void handleValidationFailure(spec.harness.results.LoopResult,int,java.lang.String,java.lang.String)>
32::<spec.io.ValidityCheckOutputStream: java.lang.String getValidityFileName(java.lang.String)>
33::<spec.io.ValidityCheckOutputStream: void createValidityFile()>
34::<spec.io.ValidityCheckOutputStream: void <clinit>()>
35::<spec.harness.SpecJVMBenchmarkBase: void <init>(spec.harness.results.BenchmarkResult,int)>
36::<spec.harness.SpecJVMBenchmarkBase: void runSimple(java.lang.Class,java.lang.String[])>
37::<spec.harness.Configuration: void <init>()>
38::<spec.harness.Configuration: void setupProp(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
39::<spec.harness.Configuration: void setupProp(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
40::<spec.harness.Configuration: void setupProp(java.lang.String,java.lang.String,java.lang.String)>
41::<spec.harness.Configuration: java.lang.String getFixedOperationsProp(java.lang.String)>
42::<spec.harness.Configuration: void setupProperties()>
43::<spec.harness.Configuration: void checkSetup(spec.harness.results.SuiteResult)>
44::<spec.harness.Configuration: void validateProperty(spec.harness.results.SuiteResult,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
45::<spec.harness.Configuration: java.util.Properties readProperties(java.lang.String)>
46::<spec.harness.Configuration: void addViolation(spec.harness.results.SuiteResult,java.lang.String,java.lang.String)>
47::<spec.harness.Configuration: void addConfigurationDetail(spec.harness.results.SuiteResult,java.lang.String,java.lang.String)>
48::<spec.harness.Configuration: boolean checkLauncher(java.lang.String)>
49::<spec.harness.Configuration: void setupReportInfo(spec.harness.results.SuiteResult,java.util.Properties)>
50::<spec.benchmarks.scimark.monte_carlo.MonteCarlo: void <init>()>
51::<spec.benchmarks.scimark.monte_carlo.MonteCarlo: void main()>
52::<spec.benchmarks.scimark.monte_carlo.MonteCarlo: double integrate(int)>
53::<spec.benchmarks.scimark.monte_carlo.MonteCarlo: double measureMonteCarlo(double,spec.benchmarks.scimark.utils.Random)>
54::<spec.benchmarks.scimark.monte_carlo.MonteCarlo: void run()>
55::<spec.harness.analyzer.HeapMemoryTotalAnalyzer: void <init>()>
56::<spec.harness.analyzer.HeapMemoryTotalAnalyzer: void execute(long)>
57::<spec.harness.Constants: void <init>()>
58::<spec.benchmarks.scimark.utils.Stopwatch: double seconds()>
59::<spec.benchmarks.scimark.utils.Stopwatch: void <init>()>
60::<spec.benchmarks.scimark.utils.Stopwatch: void start()>
61::<spec.benchmarks.scimark.utils.Stopwatch: void resume()>
62::<spec.benchmarks.scimark.utils.Stopwatch: double stop()>
63::<spec.benchmarks.scimark.utils.Stopwatch: double read()>
64::<spec.benchmarks.scimark.utils.kernel: void <init>()>
65::<spec.benchmarks.scimark.utils.kernel: double normabs(double[],double[])>
66::<spec.benchmarks.scimark.utils.kernel: double[][] RandomizeMatrix(double[][],spec.benchmarks.scimark.utils.Random)>
67::<spec.benchmarks.scimark.utils.kernel: double[][] RandomMatrix(int,int,spec.benchmarks.scimark.utils.Random)>
68::<spec.benchmarks.scimark.utils.kernel: double[] RandomVector(int,spec.benchmarks.scimark.utils.Random)>
69::<spec.benchmarks.scimark.utils.kernel: double[] RandomizeVector(double[],spec.benchmarks.scimark.utils.Random)>
70::<spec.benchmarks.scimark.utils.kernel: double[] matvec(double[][],double[])>
71::<spec.benchmarks.scimark.utils.kernel: void init()>
72::<spec.benchmarks.scimark.utils.kernel: void checkResults(java.lang.String,java.lang.String,int)>
73::<spec.benchmarks.scimark.fft.Main: void runBenchmark()>
74::<spec.benchmarks.scimark.fft.Main: void Main()>
75::<spec.benchmarks.scimark.fft.Main: void harnessMain()>
76::<spec.benchmarks.scimark.fft.Main: void <init>(spec.harness.results.BenchmarkResult,int)>
77::<spec.benchmarks.scimark.fft.Main: void setupBenchmark()>
78::<spec.benchmarks.scimark.fft.Main: void main(java.lang.String[])>
79::<spec.harness.analyzer.CallbackAnalyzerExample$NumberResult: void <init>(double,java.lang.String,java.lang.String)>
80::<spec.harness.analyzer.PollingAnalyzerExample$NumberOfOperations: void <init>(long,long)>
81::<spec.harness.analyzer.PollingAnalyzerExample$NumberOfOperations: java.lang.String getName()>
82::<spec.harness.analyzer.PollingAnalyzerExample$NumberOfOperations: java.lang.String getUnit()>
83::<spec.harness.analyzer.PollingAnalyzerExample: void <init>()>
84::<spec.harness.analyzer.PollingAnalyzerExample: void execute(long)>
85::<spec.reporter.BenchmarkRecord$IterationRecord: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
86::<spec.reporter.BenchmarkRecord$IterationRecord: void addError(java.lang.String)>
87::<spec.harness.analyzer.TempAnalyzer: void setupAnalyzerClass()>
88::<spec.harness.analyzer.TempAnalyzer: void tearDownAnalyzerClass()>
89::<spec.harness.analyzer.TempAnalyzer: void <init>()>
90::<spec.harness.analyzer.TempAnalyzer: void setup()>
91::<spec.harness.analyzer.TempAnalyzer: void startMeasurementInterval()>
92::<spec.harness.analyzer.TempAnalyzer: void endMeasurementInterval()>
93::<spec.harness.analyzer.TempAnalyzer: void tearDown()>
94::<spec.reporter.BenchmarkChart: void <init>(java.lang.String)>
95::<spec.reporter.BenchmarkChart: void addTotalHeapInfo(long,long)>
96::<spec.reporter.BenchmarkChart: void addFreeHeapInfo(long,long)>
97::<spec.reporter.BenchmarkChart: void addAnalyzerReport(java.lang.String,java.lang.String,long,long)>
98::<spec.reporter.BenchmarkChart: void addAxis(java.lang.String,java.lang.String,org.jfree.data.xy.XYSeries)>
99::<spec.reporter.BenchmarkChart: void addTimeInfo(java.lang.String,long,long)>
100::<spec.reporter.BenchmarkChart: void addTimeInfo(long,long)>
101::<spec.reporter.BenchmarkChart: void addMarker(long,java.lang.String)>
102::<spec.reporter.BenchmarkChart: void setMemoryAxis()>
103::<spec.reporter.BenchmarkChart: void buildJPEG()>
104::<spec.reporter.BenchmarkChart: void updateColors()>
105::<spec.reporter.Utils: void <init>()>
106::<spec.reporter.Utils: void createBmResultGraph(spec.reporter.BenchmarkRecord)>
107::<spec.reporter.Utils: void initDescriptions()>
108::<spec.reporter.Utils: java.lang.String getDescription(java.lang.String)>
109::<spec.reporter.Utils: java.util.HashMap initColorMap()>
110::<spec.reporter.Utils: void generateMainChart(double,java.util.TreeMap)>
111::<spec.reporter.Utils: boolean isCheck(spec.reporter.BenchmarkRecord)>
112::<spec.reporter.Utils: boolean isScimarkMonteCarlo(spec.reporter.BenchmarkRecord)>
113::<spec.reporter.Utils: boolean isScimarkLarge(spec.reporter.BenchmarkRecord)>
114::<spec.reporter.Utils: boolean isScimarkSmall(spec.reporter.BenchmarkRecord)>
115::<spec.reporter.Utils: java.lang.String getImageName(java.lang.String)>
116::<spec.reporter.Utils: java.lang.String getFullImageName(java.lang.String)>
117::<spec.reporter.Utils: java.lang.String formatScore(double)>
118::<spec.reporter.Utils: java.lang.String formatScore(double,java.lang.String)>
119::<spec.reporter.Utils: java.lang.String formatScore(double,java.lang.String,java.lang.String)>
120::<spec.reporter.Utils: void dbgPrint(java.lang.String)>
121::<spec.reporter.Utils: boolean isValidScore(java.lang.Double)>
122::<spec.reporter.Utils: boolean isValidScore(double)>
123::<spec.reporter.Utils: void <clinit>()>
124::<spec.harness.Util: void <init>()>
125::<spec.harness.Util: long getTimeProperty(java.lang.String,java.lang.String)>
126::<spec.harness.Util: long getTimeAsMillis(java.lang.String)>
127::<spec.harness.Util: long getTimeAsSeconds(java.lang.String)>
128::<spec.harness.Util: int getHwtCalcProperty(java.lang.String,java.lang.String)>
129::<spec.harness.Util: boolean getBoolProperty(java.lang.String,java.lang.String)>
130::<spec.harness.Util: int getIntProperty(java.lang.String,java.lang.String)>
131::<spec.harness.Util: long getLongProperty(java.lang.String,java.lang.String)>
132::<spec.harness.Util: java.lang.String getPropertyHelper(java.util.Properties,java.lang.String,java.lang.String)>
133::<spec.harness.Util: java.lang.String getProperty(java.lang.String,java.lang.String)>
134::<spec.harness.Util: java.lang.String getDefaultProperty(java.lang.String,java.lang.String)>
135::<spec.harness.Util: java.lang.String getUserProperty(java.lang.String,java.lang.String)>
136::<spec.harness.Util: void printProperties(java.util.Properties)>
137::<spec.harness.Util: void printProperties(java.io.PrintStream,java.util.Properties)>
138::<spec.harness.Util: void printReqs(java.util.HashMap)>
139::<spec.harness.Util: void printProperties(java.io.PrintStream,java.util.HashMap)>
140::<spec.harness.Util: boolean sleep(long)>
141::<spec.harness.Util: boolean isScimarkAndNotMonteCarlo(java.lang.String)>
142::<spec.harness.Util: java.lang.String getNextRawFileInDir()>
143::<spec.harness.Util: boolean createDir(java.io.File)>
144::<spec.harness.Util: java.lang.String getNextRawFileInDir(java.io.File)>
145::<spec.harness.Util: boolean isBenchmark(java.lang.String)>
146::<spec.harness.Util: java.lang.String[] parseDefaultJvmArgs()>
147::<spec.harness.Util: java.lang.String getSizeFromHeapArg(java.lang.String)>
148::<spec.harness.KnownIssues: void <init>()>
149::<spec.harness.KnownIssues: void printKnownIssuesInfo()>
150::<spec.harness.KnownIssues: void printKnownIssueXmlTransformRace()>
151::<spec.harness.KnownIssues: void printKnownIssueJavacVersion()>
152::<spec.harness.KnownIssues: void printKnownIssueutOfMemoryError()>
153::<spec.harness.KnownIssues: void <clinit>()>
154::<spec.benchmarks.scimark.sparse.Main: void runBenchmark()>
155::<spec.benchmarks.scimark.sparse.Main: void Main()>
156::<spec.benchmarks.scimark.sparse.Main: void harnessMain()>
157::<spec.benchmarks.scimark.sparse.Main: void <init>(spec.harness.results.BenchmarkResult,int)>
158::<spec.benchmarks.scimark.sparse.Main: void setupBenchmark()>
159::<spec.benchmarks.scimark.sparse.Main: void main(java.lang.String[])>
160::<spec.benchmarks.scimark.fft.FFT: void <init>(int)>
161::<spec.benchmarks.scimark.fft.FFT: double num_flops(int)>
162::<spec.benchmarks.scimark.fft.FFT: long inst_main(java.lang.String[])>
163::<spec.benchmarks.scimark.fft.FFT: void transform(double[])>
164::<spec.benchmarks.scimark.fft.FFT: void inverse(double[])>
165::<spec.benchmarks.scimark.fft.FFT: double test(double[])>
166::<spec.benchmarks.scimark.fft.FFT: double[] makeRandom(int)>
167::<spec.benchmarks.scimark.fft.FFT: void main(int)>
168::<spec.benchmarks.scimark.fft.FFT: int log2(int)>
169::<spec.benchmarks.scimark.fft.FFT: void transform_internal(double[],int)>
170::<spec.benchmarks.scimark.fft.FFT: double measureFFT(int,double,spec.benchmarks.scimark.utils.Random)>
171::<spec.benchmarks.scimark.fft.FFT: void run()>
172::<spec.benchmarks.scimark.fft.FFT: void <clinit>()>
173::<spec.reporter.ReportGenerator: void <init>(java.lang.String,boolean,boolean,boolean,boolean)>
174::<spec.reporter.ReportGenerator: void handleBenchmarksResults(org.w3c.dom.Node)>
175::<spec.reporter.ReportGenerator: void collectBmConfiguration(spec.reporter.BenchmarkRecord,org.w3c.dom.NamedNodeMap)>
176::<spec.reporter.ReportGenerator: void handleBenchmarkResult(org.w3c.dom.Node)>
177::<spec.reporter.ReportGenerator: void generateHat(spec.reporter.Writer,java.lang.String,java.lang.String,java.lang.String)>
178::<spec.reporter.ReportGenerator: void generateSummaryTable(spec.reporter.Writer,java.lang.String)>
179::<spec.reporter.ReportGenerator: void generateConfigTable(spec.reporter.Writer)>
180::<spec.reporter.ReportGenerator: java.util.ArrayList findProperties(java.lang.String,java.lang.String)>
181::<spec.reporter.ReportGenerator: void generateViolationsTable(spec.reporter.Writer)>
182::<spec.reporter.ReportGenerator: void generateDetailsTable(spec.reporter.Writer)>
183::<spec.reporter.ReportGenerator: void generateCopyRightStatement(spec.reporter.Writer)>
184::<spec.reporter.ReportGenerator: java.lang.String generateReport()>
185::<spec.reporter.ReportGenerator: void generateInfoTable(org.w3c.dom.Node,spec.reporter.Writer,java.lang.String[])>
186::<spec.reporter.ReportGenerator: java.lang.String insertBRTag(java.lang.String,spec.reporter.Writer)>
187::<spec.reporter.ReportGenerator: void handleIterationResult(spec.reporter.BenchmarkRecord,spec.reporter.BenchmarkChart,org.w3c.dom.Node)>
188::<spec.reporter.ReportGenerator: boolean checkName(java.lang.String,org.w3c.dom.Node)>
189::<spec.reporter.ReportGenerator: void handleLoopsNode(spec.reporter.BenchmarkRecord$IterationRecord,spec.reporter.BenchmarkChart,org.w3c.dom.Node)>
190::<spec.reporter.ReportGenerator: void checkErrors(spec.reporter.BenchmarkRecord$IterationRecord,org.w3c.dom.Node)>
191::<spec.reporter.ReportGenerator: void createSummary(java.lang.String,java.lang.String,java.lang.String)>
192::<spec.reporter.ReportGenerator: void printConstantProp(java.io.PrintStream,java.lang.String)>
193::<spec.reporter.ReportGenerator: void printConstantProp(java.io.PrintStream,java.lang.String,java.lang.String)>
194::<spec.reporter.ReportGenerator: void createSubFile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
195::<spec.reporter.ReportGenerator: void handleAnalyzersNode(spec.reporter.BenchmarkChart,org.w3c.dom.Node)>
196::<spec.reporter.ReportGenerator: boolean isCompliantRun()>
197::<spec.reporter.ReportGenerator: void insertSuiteConfiguration(spec.reporter.Writer)>
198::<spec.reporter.ReportGenerator: java.lang.String main2(java.lang.String[])>
199::<spec.reporter.ReportGenerator: void main(java.lang.String[])>
200::<spec.reporter.ReportGenerator: void <clinit>()>
201::<spec.harness.Context: void <init>()>
202::<spec.harness.Context: java.io.PrintStream getOut()>
203::<spec.harness.Context: void setOut(java.io.PrintStream)>
204::<spec.harness.Context: java.lang.String getResourceDirFor(java.lang.Class)>
205::<spec.harness.Context: java.lang.String staticToString()>
206::<spec.harness.Context: void closeXmlResultFile()>
207::<spec.harness.Context: void <clinit>()>
208::<spec.harness.CommandLineParser: void <init>()>
209::<spec.harness.CommandLineParser: void usage(java.io.PrintStream)>
210::<spec.harness.CommandLineParser: void version(java.io.PrintStream)>
211::<spec.harness.CommandLineParser: boolean parseArgs(java.lang.String[],java.util.Properties)>
212::<spec.harness.analyzer.PowerAnalyzer: void setupAnalyzerClass()>
213::<spec.harness.analyzer.PowerAnalyzer: void tearDownAnalyzerClass()>
214::<spec.harness.analyzer.PowerAnalyzer: void <init>()>
215::<spec.harness.analyzer.PowerAnalyzer: void setup()>
216::<spec.harness.analyzer.PowerAnalyzer: void startMeasurementInterval()>
217::<spec.harness.analyzer.PowerAnalyzer: void endMeasurementInterval()>
218::<spec.harness.analyzer.PowerAnalyzer: void tearDown()>
219::<spec.io.FileCache: void <init>()>
220::<spec.io.FileCache: java.io.ByteArrayInputStream getStream(java.lang.String)>
221::<spec.io.FileCache: void discard(java.lang.String)>
222::<spec.io.FileCache: int getLength(java.lang.String)>
223::<spec.io.FileCache: void clearCache()>
224::<spec.io.FileCache: boolean hasFile(java.lang.String)>
225::<spec.io.FileCache: byte[] getByteArray(java.lang.String)>
226::<spec.io.FileCache: void loadFile(java.lang.String)>
227::<spec.harness.analyzer.CallbackAnalyzerExample$NumberInfo: void <init>(long,long)>
228::<spec.harness.analyzer.CallbackAnalyzerExample$NumberInfo: java.lang.String getName()>
229::<spec.harness.analyzer.CallbackAnalyzerExample$NumberInfo: java.lang.String getUnit()>
230::<spec.reporter.BenchmarkGroupRecords$BenchmarkGroupRecord: void <init>(spec.reporter.BenchmarkRecord)>
231::<spec.reporter.BenchmarkGroupRecords$BenchmarkGroupRecord: void <init>(java.lang.String)>
232::<spec.reporter.BenchmarkGroupRecords$BenchmarkGroupRecord: void addBenchmarkRecord(spec.reporter.BenchmarkRecord)>
233::<spec.reporter.BenchmarkGroupRecords$BenchmarkGroupRecord: double computeScore()>
234::<spec.benchmarks.scimark.sor.Main: void runBenchmark()>
235::<spec.benchmarks.scimark.sor.Main: void Main()>
236::<spec.benchmarks.scimark.sor.Main: void harnessMain()>
237::<spec.benchmarks.scimark.sor.Main: void setupBenchmark()>
238::<spec.benchmarks.scimark.sor.Main: void <init>(spec.harness.results.BenchmarkResult,int)>
239::<spec.benchmarks.scimark.sor.Main: void main(java.lang.String[])>
240::<spec.reporter.Writer: void <init>(java.lang.String)>
241::<spec.reporter.Writer: void closeStream()>
242::<spec.reporter.Writer: spec.reporter.Writer getInstance(java.lang.String,java.lang.String)>
243::<spec.harness.results.IterationResult: void <init>()>
244::<spec.harness.results.IterationResult: boolean incNumberBmThreadsDone()>
245::<spec.harness.results.IterationResult: java.lang.String durDesc()>
246::<spec.harness.results.IterationResult: java.lang.String resultString(java.lang.String)>
247::<spec.harness.results.IterationResult: double getScore()>
248::<spec.harness.results.IterationResult: boolean isValid()>
249::<spec.harness.results.IterationResult: java.util.List getAllErrors(java.lang.String)>
250::<spec.harness.results.IterationResult: void toXml(java.io.PrintStream,int)>
251::<spec.reporter.BenchmarkRecord: void <init>(java.lang.String,int)>
252::<spec.reporter.BenchmarkRecord: spec.reporter.BenchmarkRecord$IterationRecord addIterationRecord(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
253::<spec.reporter.BenchmarkRecord: void printAllRecordedInfo()>
254::<spec.reporter.BenchmarkRecord: boolean isValidRun()>
255::<spec.harness.Launch: void <init>()>
256::<spec.harness.Launch: void runBenchmarkSuite(java.util.Properties)>
257::<spec.harness.Launch: java.lang.String openResultFile(java.util.Properties)>
258::<spec.harness.Launch: void closeResultFile(java.lang.String)>
259::<spec.harness.Launch: void closeSubmissionFile(java.lang.String)>
260::<spec.harness.Launch: java.lang.String createReport(java.lang.String)>
261::<spec.harness.Launch: java.lang.String createReport(java.lang.String[])>
262::<spec.harness.Launch: spec.harness.results.BenchmarkResult runOneBenchmark(java.lang.String,int,int,int)>
263::<spec.harness.Launch: java.lang.String checkBenchmarkKit()>
264::<spec.harness.Launch: void setupContext()>
265::<spec.harness.Launch: boolean setupSimple(java.lang.String[])>
266::<spec.harness.Launch: void main(java.lang.String[])>
267::<spec.harness.Launch: void <clinit>()>
268::<spec.harness.VMVersionTest: void <init>()>
269::<spec.harness.VMVersionTest: java.lang.String getVersionInfo()>
270::<spec.harness.VMVersionTest: void main(java.lang.String[])>
271::<spec.harness.analyzer.HeapMemoryFreeAnalyzer$HeapMemoryFree: void <init>(long,long)>
272::<spec.harness.analyzer.HeapMemoryFreeAnalyzer$HeapMemoryFree: java.lang.String getName()>
273::<spec.harness.analyzer.HeapMemoryFreeAnalyzer$HeapMemoryFree: java.lang.String getUnit()>
274::<spec.benchmarks.scimark.utils.Constants: void <init>()>
275::<spec.harness.analyzer.HeapMemoryFreeAnalyzer: void <init>()>
276::<spec.harness.analyzer.HeapMemoryFreeAnalyzer: void execute(long)>
277::<spec.benchmarks.scimark.sparse.SparseCompRow: void <init>(int)>
278::<spec.benchmarks.scimark.sparse.SparseCompRow: void main(int)>
279::<spec.benchmarks.scimark.sparse.SparseCompRow: void matmult(double[],double[],int[],int[],double[],int,int)>
280::<spec.benchmarks.scimark.sparse.SparseCompRow: double measureSparseMatmult(int,int,double,spec.benchmarks.scimark.utils.Random)>
281::<spec.benchmarks.scimark.sparse.SparseCompRow: void run()>
282::<spec.harness.analyzer.AnalyzerResult: void <init>(double)>
283::<spec.harness.analyzer.AnalyzerResult: java.lang.String getDescription()>
284::<spec.harness.StopBenchmarkException: void <init>(java.lang.String)>
285::<spec.harness.StopBenchmarkException: void <init>(java.lang.String,java.lang.Throwable)>
286::<spec.reporter.PlainWriter: void <init>(java.lang.String)>
287::<spec.reporter.PlainWriter: void handleIterRecord(spec.reporter.BenchmarkRecord)>
288::<spec.reporter.PlainWriter: void handleBenchmarkRecord(spec.reporter.BenchmarkRecord)>
289::<spec.reporter.PlainWriter: void insertRecord(java.lang.String,java.lang.String)>
290::<spec.reporter.PlainWriter: void putHat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
291::<spec.reporter.PlainWriter: void putSummaryTable(java.lang.String,java.util.TreeMap)>
292::<spec.reporter.PlainWriter: void startDetailsTable()>
293::<spec.reporter.PlainWriter: void insertRecords(java.util.ArrayList)>
294::<spec.benchmarks.scimark.utils.Random: void <init>()>
295::<spec.benchmarks.scimark.utils.Random: void <init>(double,double)>
296::<spec.benchmarks.scimark.utils.Random: void <init>(int)>
297::<spec.benchmarks.scimark.utils.Random: void <init>(int,double,double)>
298::<spec.benchmarks.scimark.utils.Random: void initialize(int)>
299::<spec.harness.analyzer.CallbackAnalyzerExample: void <init>()>
300::<spec.harness.analyzer.CallbackAnalyzerExample: void setup()>
301::<spec.harness.analyzer.CallbackAnalyzerExample: void tearDown()>
302::<spec.harness.analyzer.CallbackAnalyzerExample: void callbackMethod(int)>
303::<spec.benchmarks.scimark.fft.FFT$1: void <init>()>
304::<spec.benchmarks.scimark.fft.FFT$1: java.lang.Object initialValue()>
305::<spec.harness.analyzer.AnalyzersRunner: void <init>(spec.harness.results.IterationResult,long)>
306::<spec.harness.analyzer.AnalyzersRunner: void run()>
307::<spec.harness.analyzer.AnalyzersRunner: boolean executeAnalyzers()>
308::<spec.harness.analyzer.AnalyzersRunner: void setupAnalyzerClasses(java.lang.String)>
309::<spec.harness.analyzer.AnalyzersRunner: void tearDownAnalyzerClasses()>
310::<spec.harness.analyzer.AnalyzersRunner: boolean internalSetupAnalyzers()>
311::<spec.harness.analyzer.AnalyzersRunner: void invokeStartMeasurementIntervalForAnalyzers()>
312::<spec.harness.analyzer.AnalyzersRunner: void invokeEndMeasurementIntervalForAnalyzers()>
313::<spec.harness.analyzer.AnalyzersRunner: void internalTearDownAnalyzers()>
314::<spec.harness.analyzer.AnalyzersRunner: void setupAnalyzers(spec.harness.results.IterationResult,long)>
315::<spec.harness.analyzer.AnalyzersRunner: void tearDownAnalyzers(spec.harness.results.IterationResult)>
316::<spec.harness.analyzer.AnalyzersRunner: void <clinit>()>
317::<spec.benchmarks.scimark.lu.LU: void <init>(int)>
318::<spec.benchmarks.scimark.lu.LU: void main(int)>
319::<spec.benchmarks.scimark.lu.LU: double[][] getLU()>
320::<spec.benchmarks.scimark.lu.LU: int[] getPivot()>
321::<spec.benchmarks.scimark.lu.LU: double[] solve(double[])>
322::<spec.benchmarks.scimark.lu.LU: int factor(double[][],int[])>
323::<spec.benchmarks.scimark.lu.LU: double measureLU(int,double,spec.benchmarks.scimark.utils.Random)>
324::<spec.benchmarks.scimark.lu.LU: void run()>
325::<spec.io.FileCache$CachedFile: void <init>(spec.io.FileCache,java.lang.String)>
326::<spec.io.FileCache$CachedFile: java.io.ByteArrayInputStream getStream()>
327::<spec.io.FileCache$CachedFile: void cache()>
328::<spec.io.FileCache$CachedFile: void discard()>
329::<spec.io.FileCache$CachedFile: org.xml.sax.InputSource asNewInputSource()>
330::<spec.io.FileCache$CachedFile: javax.xml.transform.stream.StreamSource asNewStreamSource()>
331::<spec.reporter.SPECSubmissionProcessor: void <init>()>
332::<spec.reporter.SPECSubmissionProcessor: void unzipFile(java.lang.String,java.lang.String)>
333::<spec.reporter.SPECSubmissionProcessor: java.lang.String getResultFile(java.lang.String,java.lang.String)>
334::<spec.reporter.SPECSubmissionProcessor: void splitMergedRawFile(java.lang.String)>
335::<spec.reporter.SPECSubmissionProcessor: void createMergedSubFile()>
336::<spec.reporter.SPECSubmissionProcessor: void createResultFile(java.util.Properties)>
337::<spec.reporter.SPECSubmissionProcessor: void main(java.lang.String[])>
338::<spec.reporter.SPECSubmissionProcessor: void <clinit>()>
339::<spec.harness.Context$1: void <init>()>
340::<spec.harness.BenchmarkThread: void <init>(spec.harness.results.BenchmarkResult,int)>
341::<spec.harness.BenchmarkThread: java.lang.String[] getArgs()>
342::<spec.harness.BenchmarkThread: void run()>
343::<spec.harness.BenchmarkThread: boolean executeIteration()>
344::<spec.harness.BenchmarkThread: spec.harness.results.LoopResult runLoop(spec.harness.results.IterationResult)>
345::<spec.reporter.SPECSubmissionPreparer: void <init>()>
346::<spec.reporter.SPECSubmissionPreparer: void prepareFiles(java.lang.String[])>
347::<spec.reporter.SPECSubmissionPreparer: java.lang.String mergeFiles(java.io.File[])>
348::<spec.reporter.SPECSubmissionPreparer: void zipFile(java.lang.String)>
349::<spec.reporter.SPECSubmissionPreparer: void main(java.lang.String[])>
350::<spec.reporter.BenchmarkGroupRecords: void <init>()>
351::<spec.reporter.BenchmarkGroupRecords: void addNewBenchmarkRecord(spec.reporter.BenchmarkRecord)>
352::<spec.reporter.BenchmarkGroupRecords: double computeCompositeScore()>
353::<spec.reporter.BenchmarkGroupRecords: void updateGroupRecord(java.lang.String,spec.reporter.BenchmarkRecord)>
354::<spec.reporter.BenchmarkGroupRecords$BenchmarkResultsIterator: void <init>(spec.reporter.BenchmarkGroupRecords)>
355::<spec.reporter.BenchmarkGroupRecords$BenchmarkResultsIterator: spec.reporter.BenchmarkRecord next()>
356::<spec.harness.analyzer.TempAnalyzer$TemperatureResult: void <init>(double,java.lang.String,java.lang.String)>
357::<spec.harness.analyzer.PowerMeter: void <init>(java.lang.String,int)>
358::<spec.harness.analyzer.PowerMeter: int writeMeter(java.lang.String)>
359::<spec.harness.analyzer.PowerMeter: java.lang.String readMeter()>
360::<spec.harness.analyzer.PowerMeter: void endSocConnection()>
361::<spec.harness.analyzer.PowerMeter: void startRun(int,int,int)>
362::<spec.harness.analyzer.PowerMeter: void go()>
363::<spec.harness.analyzer.PowerMeter: void stop()>
364::<spec.harness.analyzer.PowerMeter: java.util.HashMap reportRun(java.lang.String)>
365::<spec.harness.analyzer.PowerMeter: java.lang.Boolean meterCompliant()>
366::<spec.harness.analyzer.PowerMeter: java.lang.String meterPtdVersion()>
367::<spec.harness.analyzer.PowerMeter: java.lang.String meterPtdHostOs()>
368::<spec.harness.analyzer.PowerMeter: java.lang.String meterPtdMode()>
369::<spec.harness.analyzer.PowerMeter: void <clinit>()>
370::<spec.harness.results.LoopResult: void <init>()>
371::<spec.harness.results.LoopResult: void toXml(java.io.PrintStream,int)>
372::<spec.harness.results.LoopResult: boolean isValid()>
373::<spec.harness.results.LoopResult: java.util.List getAllErrors(java.lang.String)>
374::<spec.reporter.ReportGenerator$Pair: void <init>(spec.reporter.ReportGenerator,java.lang.Object,java.lang.Object)>
375::<spec.benchmarks.scimark.lu.Main: void runBenchmark()>
376::<spec.benchmarks.scimark.lu.Main: void Main()>
377::<spec.benchmarks.scimark.lu.Main: void harnessMain()>
378::<spec.benchmarks.scimark.lu.Main: void <init>(spec.harness.results.BenchmarkResult,int)>
379::<spec.benchmarks.scimark.lu.Main: void setupBenchmark()>
380::<spec.benchmarks.scimark.lu.Main: void main(java.lang.String[])>
381::<spec.benchmarks.scimark.sor.SOR$1: void <init>()>
382::<spec.benchmarks.scimark.sor.SOR$1: java.lang.Object initialValue()>
383::<spec.harness.analyzer.AnalyzerBase: void <init>()>
384::<spec.harness.analyzer.AnalyzerBase: void report(spec.harness.analyzer.TYInfo)>
385::<spec.harness.analyzer.AnalyzerBase: void report(spec.harness.analyzer.AnalyzerResult)>
386::<spec.harness.analyzer.AnalyzerBase: boolean isTimedRun()>
387::<spec.harness.analyzer.AnalyzerBase: long getBenchmarkDuration()>
388::<spec.harness.analyzer.AnalyzerBase: java.lang.String getBenchmarkName()>
389::<spec.harness.analyzer.AnalyzerBase: long getNoOps()>
390::<spec.harness.analyzer.AnalyzerBase: void addError(java.lang.String)>
391::<spec.harness.analyzer.AnalyzerBase: void addErrorToSuiteResult(java.lang.String)>
392::<spec.harness.analyzer.AnalyzerBase: void addViolationToSuiteResult(java.lang.String)>
393::<spec.reporter.HTMLWriter: java.lang.String[] initIndents()>
394::<spec.reporter.HTMLWriter: void <init>(java.lang.String)>
395::<spec.reporter.HTMLWriter: void startTable(java.lang.String,boolean,boolean,boolean)>
396::<spec.reporter.HTMLWriter: void startTable(java.lang.String,boolean)>
397::<spec.reporter.HTMLWriter: void startTable(boolean)>
398::<spec.reporter.HTMLWriter: void insertImgData(java.lang.String,java.lang.String,int)>
399::<spec.reporter.HTMLWriter: void startDetailsTable()>
400::<spec.reporter.HTMLWriter: void insertData(java.lang.String)>
401::<spec.reporter.HTMLWriter: void insertData(java.lang.String,int)>
402::<spec.reporter.HTMLWriter: void insertRecord(java.lang.String,java.lang.String)>
403::<spec.reporter.HTMLWriter: void insertHeaderData(java.lang.String,java.lang.String,boolean,int,int,java.lang.String)>
404::<spec.reporter.HTMLWriter: void insertHeaderData(java.lang.String,java.lang.String,boolean,int,int)>
405::<spec.reporter.HTMLWriter: void insertHeaderRecord(java.lang.String,java.lang.String,boolean,int,int)>
406::<spec.reporter.HTMLWriter: void startRecord()>
407::<spec.reporter.HTMLWriter: void endRecord()>
408::<spec.reporter.HTMLWriter: void endAndStartRecord()>
409::<spec.reporter.HTMLWriter: void putColumnsSpec(int[])>
410::<spec.reporter.HTMLWriter: void putSummaryTable(java.lang.String,java.util.TreeMap)>
411::<spec.reporter.HTMLWriter: void putHat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
412::<spec.reporter.HTMLWriter: void endData()>
413::<spec.reporter.HTMLWriter: void startData()>
414::<spec.reporter.HTMLWriter: void startRecordAndData()>
415::<spec.reporter.HTMLWriter: void putTHEAD(boolean)>
416::<spec.reporter.HTMLWriter: void putTBODY(boolean)>
417::<spec.reporter.HTMLWriter: void putTABLE(boolean,java.lang.String)>
418::<spec.reporter.HTMLWriter: void endRecordAndData()>
419::<spec.reporter.HTMLWriter: void endAndStartRecordAndData()>
420::<spec.reporter.HTMLWriter: void endAndStartData()>
421::<spec.reporter.HTMLWriter: void endTable()>
422::<spec.reporter.HTMLWriter: void endTable(boolean)>
423::<spec.reporter.HTMLWriter: void putString(java.lang.String)>
424::<spec.reporter.HTMLWriter: void handleIterRecord(java.util.ArrayList,int)>
425::<spec.reporter.HTMLWriter: java.lang.String createConfRecord(java.lang.String[])>
426::<spec.reporter.HTMLWriter: void handleBenchmarkRecord(spec.reporter.BenchmarkRecord)>
427::<spec.reporter.HTMLWriter: java.lang.String insertBRTags(java.util.ArrayList)>
428::<spec.reporter.HTMLWriter: void insertRecords(java.util.ArrayList)>
429::<spec.reporter.HTMLWriter: void startReport()>
430::<spec.reporter.HTMLWriter: void endReport()>
431::<spec.harness.analyzer.TYInfo: void <init>(long,long)>
432::<spec.harness.analyzer.PowerAnalyzer$PowerConsumtionResult: void <init>(double,java.lang.String,java.lang.String)>
433::<spec.harness.analyzer.TempSensor: void <init>(java.lang.String,int)>
434::<spec.harness.analyzer.TempSensor: int writeMeter(java.lang.String)>
435::<spec.harness.analyzer.TempSensor: java.lang.String readMeter()>
436::<spec.harness.analyzer.TempSensor: void endSocConnection()>
437::<spec.harness.analyzer.TempSensor: void startRun(int,int,int)>
438::<spec.harness.analyzer.TempSensor: void go()>
439::<spec.harness.analyzer.TempSensor: void stop()>
440::<spec.harness.analyzer.TempSensor: java.util.HashMap reportRun(java.lang.String)>
441::<spec.harness.analyzer.TempSensor: java.lang.Boolean sensorCompliant()>
442::<spec.harness.analyzer.TempSensor: java.lang.String sensorPtdVersion()>
443::<spec.harness.analyzer.TempSensor: java.lang.String sensorPtdHostOs()>
444::<spec.harness.analyzer.TempSensor: java.lang.String sensorPtdMode()>
445::<spec.harness.analyzer.TempSensor: void <clinit>()>
446::<spec.harness.results.TestResult: void <init>()>
447::<spec.harness.results.TestResult: void addError(java.lang.String)>
448::<spec.harness.results.TestResult: void printErrorsToXml(java.io.PrintStream,int)>
449::<spec.harness.results.TestResult: void ptxAttrib(java.io.PrintStream,int,java.lang.String,java.lang.String,boolean,java.lang.String)>
450::<spec.harness.results.TestResult: void ptxAttrib(java.io.PrintStream,int,java.lang.String,long,boolean,java.lang.String)>
451::<spec.harness.results.TestResult: void ptxAttrib(java.io.PrintStream,int,java.lang.String,double,boolean,java.lang.String)>
452::<spec.harness.results.TestResult: void ptxAttrib(java.io.PrintStream,int,java.lang.String,boolean,boolean,java.lang.String)>
453::<spec.harness.results.TestResult: void ptxAttrib(java.io.PrintStream,int,java.lang.String,java.lang.String[],boolean,java.lang.String)>
454::<spec.harness.results.TestResult: void ptxElement(java.io.PrintStream,int,java.lang.String,java.lang.String)>
455::<spec.harness.results.TestResult: void ptxElementOpen(java.io.PrintStream,int,java.lang.String)>
456::<spec.harness.results.TestResult: void ptxElementStartOpen(java.io.PrintStream,int,java.lang.String,boolean)>
457::<spec.harness.results.TestResult: void ptxElementClose(java.io.PrintStream,int,java.lang.String)>
458::<spec.harness.results.TestResult: java.lang.String ptxArrToValue(java.lang.String[])>
459::<spec.harness.results.TestResult: void ptxXmlHeader(java.io.PrintStream)>
460::<spec.harness.results.TestResult: java.lang.String doubleAsRes(double)>
461::<spec.harness.results.TestResult: java.lang.String millisAsSec(long)>
462::<spec.harness.results.TestResult: java.lang.String getIndent(int)>
463::<spec.harness.results.TestResult: java.lang.String correctContent(java.lang.String,boolean)>
464::<spec.harness.results.TestResult: void <clinit>()>
465::<spec.harness.results.SuiteResult: void <init>()>
466::<spec.harness.results.SuiteResult: void addJvmInfo(java.lang.String,java.util.Properties,java.lang.String)>
467::<spec.harness.results.SuiteResult: void addJvmInfo(java.lang.String,java.lang.String)>
468::<spec.harness.results.SuiteResult: void addRunInfo(java.lang.String,java.util.Properties,java.lang.String)>
469::<spec.harness.results.SuiteResult: void addSwInfo(java.lang.String,java.util.Properties,java.lang.String)>
470::<spec.harness.results.SuiteResult: void addHwInfo(java.lang.String,java.util.Properties,java.lang.String)>
471::<spec.harness.results.SuiteResult: void addViolation(java.lang.String)>
472::<spec.harness.results.SuiteResult: void addConfiguration(java.lang.String)>
473::<spec.harness.results.SuiteResult: boolean isValid()>
474::<spec.harness.results.SuiteResult: java.util.List getAllErrors(java.lang.String)>
475::<spec.harness.results.SuiteResult: void headerToXml(java.io.PrintStream,int)>
476::<spec.harness.results.SuiteResult: void toXml(java.io.PrintStream,int)>
477::<spec.harness.results.SuiteResult: void footerToXml(java.io.PrintStream,int)>
478::<spec.harness.results.SuiteResult: java.lang.String getCommandLineOptions()>
479::<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void <init>()>
480::<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void register(spec.harness.analyzer.CallbackAnalyzerExample)>
481::<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void deregister(spec.harness.analyzer.CallbackAnalyzerExample)>
482::<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void run()>
483::<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void <clinit>()>
484::<spec.reporter.Reporter: void <init>()>
485::<spec.reporter.Reporter: void usage()>
486::<spec.reporter.Reporter: java.lang.String main2(java.lang.String[])>
487::<spec.reporter.Reporter: void main(java.lang.String[])>
488::<spec.harness.results.BenchmarkResult: void <init>()>
489::<spec.harness.results.BenchmarkResult: void setIterationTime(long)>
490::<spec.harness.results.BenchmarkResult: java.lang.String durDesc()>
491::<spec.harness.results.BenchmarkResult: double getScore()>
492::<spec.harness.results.BenchmarkResult: java.lang.String resultString()>
493::<spec.harness.results.BenchmarkResult: boolean isValid()>
494::<spec.harness.results.BenchmarkResult: java.util.List getAllErrors(java.lang.String)>
495::<spec.harness.results.BenchmarkResult: void headerToXml(java.io.PrintStream,int)>
496::<spec.harness.results.BenchmarkResult: void toXml(java.io.PrintStream,int)>
497::<spec.harness.results.BenchmarkResult: void middleToXml(java.io.PrintStream,int)>
498::<spec.harness.results.BenchmarkResult: void footerToXml(java.io.PrintStream,int)>
499::<spec.harness.analyzer.HeapMemoryTotalAnalyzer$HeapMemoryTotal: void <init>(long,long)>
500::<spec.harness.analyzer.HeapMemoryTotalAnalyzer$HeapMemoryTotal: java.lang.String getName()>
501::<spec.harness.analyzer.HeapMemoryTotalAnalyzer$HeapMemoryTotal: java.lang.String getUnit()>
