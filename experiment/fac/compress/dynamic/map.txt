0::<spec.harness.ProgramRunner: void <init>(spec.harness.results.BenchmarkResult,int)>
1::<spec.harness.ProgramRunner: void run()>
2::<spec.harness.ProgramRunner: boolean setupBenchmarkMethods()>
3::<spec.harness.ProgramRunner: spec.harness.SpecJVMBenchmarkBase createBmInstance(spec.harness.results.BenchmarkResult,int)>
4::<spec.harness.ProgramRunner: java.lang.String invokeBmTestTypeMethod()>
5::<spec.harness.ProgramRunner: void invokeBmSetupBenchmark()>
6::<spec.harness.ProgramRunner: void invokeBmSetupIteration()>
7::<spec.harness.ProgramRunner: void invokeBmTearDownIteration()>
8::<spec.harness.ProgramRunner: void invokeBmTearDownBenchmark()>
9::<spec.harness.ProgramRunner: boolean runBenchmark()>
10::<spec.harness.ProgramRunner: boolean runIteration(java.lang.String,spec.harness.results.IterationResult,spec.harness.results.BenchmarkResult)>
11::<spec.harness.ProgramRunner: java.lang.String getStackTraceAsString(java.lang.Throwable)>
12::<spec.harness.ProgramRunner: int getNoBmHarnessThreads(spec.harness.results.BenchmarkResult)>
13::<spec.harness.ProgramRunner: void pause(long)>
14::<spec.harness.ProgramRunner: void interruptProgramRunner()>
15::<spec.harness.ProgramRunner: void endOfMeasurementInterval(long)>
16::<spec.harness.ProgramRunner: void <clinit>()>
17::<spec.harness.analyzer.PollingAnalyzerExample: void <init>()>
18::<spec.harness.analyzer.PollingAnalyzerExample: void execute(long)>
19::<spec.harness.analyzer.CallbackAnalyzerExample$NumberInfo: void <init>(long,long)>
20::<spec.harness.analyzer.CallbackAnalyzerExample$NumberInfo: java.lang.String getName()>
21::<spec.harness.analyzer.CallbackAnalyzerExample$NumberInfo: java.lang.String getUnit()>
22::<spec.io.ValidityCheckOutputStream: void <init>(java.lang.String)>
23::<spec.io.ValidityCheckOutputStream: void write(int)>
24::<spec.io.ValidityCheckOutputStream: boolean validityCheck(spec.harness.results.LoopResult)>
25::<spec.io.ValidityCheckOutputStream: void validityCheck2(spec.harness.results.LoopResult)>
26::<spec.io.ValidityCheckOutputStream: void handleValidationFailure(spec.harness.results.LoopResult,int,java.lang.String,java.lang.String)>
27::<spec.io.ValidityCheckOutputStream: java.lang.String getValidityFileName(java.lang.String)>
28::<spec.io.ValidityCheckOutputStream: void createValidityFile()>
29::<spec.io.ValidityCheckOutputStream: void <clinit>()>
30::<spec.harness.SpecJVMBenchmarkBase: void <init>(spec.harness.results.BenchmarkResult,int)>
31::<spec.harness.SpecJVMBenchmarkBase: void runSimple(java.lang.Class,java.lang.String[])>
32::<spec.harness.Configuration: void <init>()>
33::<spec.harness.Configuration: void setupProp(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
34::<spec.harness.Configuration: void setupProp(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
35::<spec.harness.Configuration: void setupProp(java.lang.String,java.lang.String,java.lang.String)>
36::<spec.harness.Configuration: java.lang.String getFixedOperationsProp(java.lang.String)>
37::<spec.harness.Configuration: void setupProperties()>
38::<spec.harness.Configuration: void checkSetup(spec.harness.results.SuiteResult)>
39::<spec.harness.Configuration: void validateProperty(spec.harness.results.SuiteResult,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
40::<spec.harness.Configuration: java.util.Properties readProperties(java.lang.String)>
41::<spec.harness.Configuration: void addViolation(spec.harness.results.SuiteResult,java.lang.String,java.lang.String)>
42::<spec.harness.Configuration: void addConfigurationDetail(spec.harness.results.SuiteResult,java.lang.String,java.lang.String)>
43::<spec.harness.Configuration: boolean checkLauncher(java.lang.String)>
44::<spec.harness.Configuration: void setupReportInfo(spec.harness.results.SuiteResult,java.util.Properties)>
45::<spec.benchmarks.compress.CodeTable: void <init>()>
46::<spec.benchmarks.compress.Compress: void <init>()>
47::<spec.benchmarks.compress.Compress: spec.benchmarks.compress.OutputBuffer performAction(byte[],int,int,byte[])>
48::<spec.harness.analyzer.TempAnalyzer: void setupAnalyzerClass()>
49::<spec.harness.analyzer.TempAnalyzer: void tearDownAnalyzerClass()>
50::<spec.harness.analyzer.TempAnalyzer: void <init>()>
51::<spec.harness.analyzer.TempAnalyzer: void setup()>
52::<spec.harness.analyzer.TempAnalyzer: void startMeasurementInterval()>
53::<spec.harness.analyzer.TempAnalyzer: void endMeasurementInterval()>
54::<spec.harness.analyzer.TempAnalyzer: void tearDown()>
55::<spec.benchmarks.compress.Main: void main(java.lang.String[])>
56::<spec.benchmarks.compress.Main: void <init>(spec.harness.results.BenchmarkResult,int)>
57::<spec.benchmarks.compress.Main: long runBenchmark()>
58::<spec.benchmarks.compress.Main: void harnessMain()>
59::<spec.benchmarks.compress.Main: void Main()>
60::<spec.benchmarks.compress.Main: void setupBenchmark()>
61::<spec.benchmarks.compress.Main: void <clinit>()>
62::<spec.harness.analyzer.HeapMemoryTotalAnalyzer$HeapMemoryTotal: void <init>(long,long)>
63::<spec.harness.analyzer.HeapMemoryTotalAnalyzer$HeapMemoryTotal: java.lang.String getName()>
64::<spec.harness.analyzer.HeapMemoryTotalAnalyzer$HeapMemoryTotal: java.lang.String getUnit()>
65::<spec.reporter.BenchmarkRecord$IterationRecord: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
66::<spec.reporter.BenchmarkRecord$IterationRecord: void addError(java.lang.String)>
67::<spec.reporter.BenchmarkChart: void <init>(java.lang.String)>
68::<spec.reporter.BenchmarkChart: void addTotalHeapInfo(long,long)>
69::<spec.reporter.BenchmarkChart: void addFreeHeapInfo(long,long)>
70::<spec.reporter.BenchmarkChart: void addAnalyzerReport(java.lang.String,java.lang.String,long,long)>
71::<spec.reporter.BenchmarkChart: void addAxis(java.lang.String,java.lang.String,org.jfree.data.xy.XYSeries)>
72::<spec.reporter.BenchmarkChart: void addTimeInfo(java.lang.String,long,long)>
73::<spec.reporter.BenchmarkChart: void addTimeInfo(long,long)>
74::<spec.reporter.BenchmarkChart: void addMarker(long,java.lang.String)>
75::<spec.reporter.BenchmarkChart: void setMemoryAxis()>
76::<spec.reporter.BenchmarkChart: void buildJPEG()>
77::<spec.reporter.BenchmarkChart: void updateColors()>
78::<spec.reporter.Utils: void <init>()>
79::<spec.reporter.Utils: void createBmResultGraph(spec.reporter.BenchmarkRecord)>
80::<spec.reporter.Utils: void initDescriptions()>
81::<spec.reporter.Utils: java.lang.String getDescription(java.lang.String)>
82::<spec.reporter.Utils: java.util.HashMap initColorMap()>
83::<spec.reporter.Utils: void generateMainChart(double,java.util.TreeMap)>
84::<spec.reporter.Utils: boolean isCheck(spec.reporter.BenchmarkRecord)>
85::<spec.reporter.Utils: boolean isScimarkMonteCarlo(spec.reporter.BenchmarkRecord)>
86::<spec.reporter.Utils: boolean isScimarkLarge(spec.reporter.BenchmarkRecord)>
87::<spec.reporter.Utils: boolean isScimarkSmall(spec.reporter.BenchmarkRecord)>
88::<spec.reporter.Utils: java.lang.String getImageName(java.lang.String)>
89::<spec.reporter.Utils: java.lang.String getFullImageName(java.lang.String)>
90::<spec.reporter.Utils: java.lang.String formatScore(double)>
91::<spec.reporter.Utils: java.lang.String formatScore(double,java.lang.String)>
92::<spec.reporter.Utils: java.lang.String formatScore(double,java.lang.String,java.lang.String)>
93::<spec.reporter.Utils: void dbgPrint(java.lang.String)>
94::<spec.reporter.Utils: boolean isValidScore(java.lang.Double)>
95::<spec.reporter.Utils: boolean isValidScore(double)>
96::<spec.reporter.Utils: void <clinit>()>
97::<spec.harness.Util: void <init>()>
98::<spec.harness.Util: long getTimeProperty(java.lang.String,java.lang.String)>
99::<spec.harness.Util: long getTimeAsMillis(java.lang.String)>
100::<spec.harness.Util: long getTimeAsSeconds(java.lang.String)>
101::<spec.harness.Util: int getHwtCalcProperty(java.lang.String,java.lang.String)>
102::<spec.harness.Util: boolean getBoolProperty(java.lang.String,java.lang.String)>
103::<spec.harness.Util: int getIntProperty(java.lang.String,java.lang.String)>
104::<spec.harness.Util: long getLongProperty(java.lang.String,java.lang.String)>
105::<spec.harness.Util: java.lang.String getPropertyHelper(java.util.Properties,java.lang.String,java.lang.String)>
106::<spec.harness.Util: java.lang.String getProperty(java.lang.String,java.lang.String)>
107::<spec.harness.Util: java.lang.String getDefaultProperty(java.lang.String,java.lang.String)>
108::<spec.harness.Util: java.lang.String getUserProperty(java.lang.String,java.lang.String)>
109::<spec.harness.Util: void printProperties(java.util.Properties)>
110::<spec.harness.Util: void printProperties(java.io.PrintStream,java.util.Properties)>
111::<spec.harness.Util: void printReqs(java.util.HashMap)>
112::<spec.harness.Util: void printProperties(java.io.PrintStream,java.util.HashMap)>
113::<spec.harness.Util: boolean sleep(long)>
114::<spec.harness.Util: boolean isScimarkAndNotMonteCarlo(java.lang.String)>
115::<spec.harness.Util: java.lang.String getNextRawFileInDir()>
116::<spec.harness.Util: boolean createDir(java.io.File)>
117::<spec.harness.Util: java.lang.String getNextRawFileInDir(java.io.File)>
118::<spec.harness.Util: boolean isBenchmark(java.lang.String)>
119::<spec.harness.Util: java.lang.String[] parseDefaultJvmArgs()>
120::<spec.harness.Util: java.lang.String getSizeFromHeapArg(java.lang.String)>
121::<spec.harness.KnownIssues: void <init>()>
122::<spec.harness.KnownIssues: void printKnownIssuesInfo()>
123::<spec.harness.KnownIssues: void printKnownIssueXmlTransformRace()>
124::<spec.harness.KnownIssues: void printKnownIssueJavacVersion()>
125::<spec.harness.KnownIssues: void printKnownIssueutOfMemoryError()>
126::<spec.harness.KnownIssues: void <clinit>()>
127::<spec.reporter.ReportGenerator: void <init>(java.lang.String,boolean,boolean,boolean,boolean)>
128::<spec.reporter.ReportGenerator: void handleBenchmarksResults(org.w3c.dom.Node)>
129::<spec.reporter.ReportGenerator: void collectBmConfiguration(spec.reporter.BenchmarkRecord,org.w3c.dom.NamedNodeMap)>
130::<spec.reporter.ReportGenerator: void handleBenchmarkResult(org.w3c.dom.Node)>
131::<spec.reporter.ReportGenerator: void generateHat(spec.reporter.Writer,java.lang.String,java.lang.String,java.lang.String)>
132::<spec.reporter.ReportGenerator: void generateSummaryTable(spec.reporter.Writer,java.lang.String)>
133::<spec.reporter.ReportGenerator: void generateConfigTable(spec.reporter.Writer)>
134::<spec.reporter.ReportGenerator: java.util.ArrayList findProperties(java.lang.String,java.lang.String)>
135::<spec.reporter.ReportGenerator: void generateViolationsTable(spec.reporter.Writer)>
136::<spec.reporter.ReportGenerator: void generateDetailsTable(spec.reporter.Writer)>
137::<spec.reporter.ReportGenerator: void generateCopyRightStatement(spec.reporter.Writer)>
138::<spec.reporter.ReportGenerator: java.lang.String generateReport()>
139::<spec.reporter.ReportGenerator: void generateInfoTable(org.w3c.dom.Node,spec.reporter.Writer,java.lang.String[])>
140::<spec.reporter.ReportGenerator: java.lang.String insertBRTag(java.lang.String,spec.reporter.Writer)>
141::<spec.reporter.ReportGenerator: void handleIterationResult(spec.reporter.BenchmarkRecord,spec.reporter.BenchmarkChart,org.w3c.dom.Node)>
142::<spec.reporter.ReportGenerator: boolean checkName(java.lang.String,org.w3c.dom.Node)>
143::<spec.reporter.ReportGenerator: void handleLoopsNode(spec.reporter.BenchmarkRecord$IterationRecord,spec.reporter.BenchmarkChart,org.w3c.dom.Node)>
144::<spec.reporter.ReportGenerator: void checkErrors(spec.reporter.BenchmarkRecord$IterationRecord,org.w3c.dom.Node)>
145::<spec.reporter.ReportGenerator: void createSummary(java.lang.String,java.lang.String,java.lang.String)>
146::<spec.reporter.ReportGenerator: void printConstantProp(java.io.PrintStream,java.lang.String)>
147::<spec.reporter.ReportGenerator: void printConstantProp(java.io.PrintStream,java.lang.String,java.lang.String)>
148::<spec.reporter.ReportGenerator: void createSubFile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
149::<spec.reporter.ReportGenerator: void handleAnalyzersNode(spec.reporter.BenchmarkChart,org.w3c.dom.Node)>
150::<spec.reporter.ReportGenerator: boolean isCompliantRun()>
151::<spec.reporter.ReportGenerator: void insertSuiteConfiguration(spec.reporter.Writer)>
152::<spec.reporter.ReportGenerator: java.lang.String main2(java.lang.String[])>
153::<spec.reporter.ReportGenerator: void main(java.lang.String[])>
154::<spec.reporter.ReportGenerator: void <clinit>()>
155::<spec.harness.analyzer.PowerAnalyzer$PowerConsumtionResult: void <init>(double,java.lang.String,java.lang.String)>
156::<spec.harness.Context: void <init>()>
157::<spec.harness.Context: java.io.PrintStream getOut()>
158::<spec.harness.Context: void setOut(java.io.PrintStream)>
159::<spec.harness.Context: java.lang.String getResourceDirFor(java.lang.Class)>
160::<spec.harness.Context: java.lang.String staticToString()>
161::<spec.harness.Context: void closeXmlResultFile()>
162::<spec.harness.Context: void <clinit>()>
163::<spec.benchmarks.compress.Compressor$HashTable: void <init>()>
164::<spec.harness.CommandLineParser: void <init>()>
165::<spec.harness.CommandLineParser: void usage(java.io.PrintStream)>
166::<spec.harness.CommandLineParser: void version(java.io.PrintStream)>
167::<spec.harness.CommandLineParser: boolean parseArgs(java.lang.String[],java.util.Properties)>
168::<spec.io.FileCache: void <init>()>
169::<spec.io.FileCache: java.io.ByteArrayInputStream getStream(java.lang.String)>
170::<spec.io.FileCache: void discard(java.lang.String)>
171::<spec.io.FileCache: int getLength(java.lang.String)>
172::<spec.io.FileCache: void clearCache()>
173::<spec.io.FileCache: boolean hasFile(java.lang.String)>
174::<spec.io.FileCache: byte[] getByteArray(java.lang.String)>
175::<spec.io.FileCache: void loadFile(java.lang.String)>
176::<spec.harness.analyzer.PowerMeter: void <init>(java.lang.String,int)>
177::<spec.harness.analyzer.PowerMeter: int writeMeter(java.lang.String)>
178::<spec.harness.analyzer.PowerMeter: java.lang.String readMeter()>
179::<spec.harness.analyzer.PowerMeter: void endSocConnection()>
180::<spec.harness.analyzer.PowerMeter: void startRun(int,int,int)>
181::<spec.harness.analyzer.PowerMeter: void go()>
182::<spec.harness.analyzer.PowerMeter: void stop()>
183::<spec.harness.analyzer.PowerMeter: java.util.HashMap reportRun(java.lang.String)>
184::<spec.harness.analyzer.PowerMeter: java.lang.Boolean meterCompliant()>
185::<spec.harness.analyzer.PowerMeter: java.lang.String meterPtdVersion()>
186::<spec.harness.analyzer.PowerMeter: java.lang.String meterPtdHostOs()>
187::<spec.harness.analyzer.PowerMeter: java.lang.String meterPtdMode()>
188::<spec.harness.analyzer.PowerMeter: void <clinit>()>
189::<spec.reporter.BenchmarkGroupRecords$BenchmarkGroupRecord: void <init>(spec.reporter.BenchmarkRecord)>
190::<spec.reporter.BenchmarkGroupRecords$BenchmarkGroupRecord: void <init>(java.lang.String)>
191::<spec.reporter.BenchmarkGroupRecords$BenchmarkGroupRecord: void addBenchmarkRecord(spec.reporter.BenchmarkRecord)>
192::<spec.reporter.BenchmarkGroupRecords$BenchmarkGroupRecord: double computeScore()>
193::<spec.reporter.Writer: void <init>(java.lang.String)>
194::<spec.reporter.Writer: void closeStream()>
195::<spec.reporter.Writer: spec.reporter.Writer getInstance(java.lang.String,java.lang.String)>
196::<spec.harness.analyzer.HeapMemoryTotalAnalyzer: void <init>()>
197::<spec.harness.analyzer.HeapMemoryTotalAnalyzer: void execute(long)>
198::<spec.harness.results.IterationResult: void <init>()>
199::<spec.harness.results.IterationResult: boolean incNumberBmThreadsDone()>
200::<spec.harness.results.IterationResult: java.lang.String durDesc()>
201::<spec.harness.results.IterationResult: java.lang.String resultString(java.lang.String)>
202::<spec.harness.results.IterationResult: double getScore()>
203::<spec.harness.results.IterationResult: boolean isValid()>
204::<spec.harness.results.IterationResult: java.util.List getAllErrors(java.lang.String)>
205::<spec.harness.results.IterationResult: void toXml(java.io.PrintStream,int)>
206::<spec.benchmarks.compress.Harness: void <init>()>
207::<spec.benchmarks.compress.Harness: void runCompress(int)>
208::<spec.benchmarks.compress.Harness: long inst_main(int)>
209::<spec.benchmarks.compress.Harness: void prepareBuffers()>
210::<spec.reporter.BenchmarkRecord: void <init>(java.lang.String,int)>
211::<spec.reporter.BenchmarkRecord: spec.reporter.BenchmarkRecord$IterationRecord addIterationRecord(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
212::<spec.reporter.BenchmarkRecord: void printAllRecordedInfo()>
213::<spec.reporter.BenchmarkRecord: boolean isValidRun()>
214::<spec.harness.Launch: void <init>()>
215::<spec.harness.Launch: void runBenchmarkSuite(java.util.Properties)>
216::<spec.harness.Launch: java.lang.String openResultFile(java.util.Properties)>
217::<spec.harness.Launch: void closeResultFile(java.lang.String)>
218::<spec.harness.Launch: void closeSubmissionFile(java.lang.String)>
219::<spec.harness.Launch: java.lang.String createReport(java.lang.String)>
220::<spec.harness.Launch: java.lang.String createReport(java.lang.String[])>
221::<spec.harness.Launch: spec.harness.results.BenchmarkResult runOneBenchmark(java.lang.String,int,int,int)>
222::<spec.harness.Launch: java.lang.String checkBenchmarkKit()>
223::<spec.harness.Launch: void setupContext()>
224::<spec.harness.Launch: boolean setupSimple(java.lang.String[])>
225::<spec.harness.Launch: void main(java.lang.String[])>
226::<spec.harness.Launch: void <clinit>()>
227::<spec.harness.analyzer.HeapMemoryFreeAnalyzer$HeapMemoryFree: void <init>(long,long)>
228::<spec.harness.analyzer.HeapMemoryFreeAnalyzer$HeapMemoryFree: java.lang.String getName()>
229::<spec.harness.analyzer.HeapMemoryFreeAnalyzer$HeapMemoryFree: java.lang.String getUnit()>
230::<spec.benchmarks.compress.CompBase: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>
231::<spec.harness.VMVersionTest: void <init>()>
232::<spec.harness.VMVersionTest: java.lang.String getVersionInfo()>
233::<spec.harness.VMVersionTest: void main(java.lang.String[])>
234::<spec.benchmarks.compress.Decompressor$SuffixTable: void <init>()>
235::<spec.benchmarks.compress.Harness$Source: void <init>(java.lang.String)>
236::<spec.benchmarks.compress.Harness$Source: byte[] fillBuffer(java.lang.String)>
237::<spec.harness.analyzer.AnalyzerResult: void <init>(double)>
238::<spec.harness.analyzer.AnalyzerResult: java.lang.String getDescription()>
239::<spec.benchmarks.compress.Decompressor$DeStack: void <init>()>
240::<spec.harness.StopBenchmarkException: void <init>(java.lang.String)>
241::<spec.harness.StopBenchmarkException: void <init>(java.lang.String,java.lang.Throwable)>
242::<spec.reporter.PlainWriter: void <init>(java.lang.String)>
243::<spec.reporter.PlainWriter: void handleIterRecord(spec.reporter.BenchmarkRecord)>
244::<spec.reporter.PlainWriter: void handleBenchmarkRecord(spec.reporter.BenchmarkRecord)>
245::<spec.reporter.PlainWriter: void insertRecord(java.lang.String,java.lang.String)>
246::<spec.reporter.PlainWriter: void putHat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
247::<spec.reporter.PlainWriter: void putSummaryTable(java.lang.String,java.util.TreeMap)>
248::<spec.reporter.PlainWriter: void startDetailsTable()>
249::<spec.reporter.PlainWriter: void insertRecords(java.util.ArrayList)>
250::<spec.benchmarks.compress.Decompressor: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>
251::<spec.benchmarks.compress.Decompressor: void decompress()>
252::<spec.benchmarks.compress.Decompressor: int getCode()>
253::<spec.harness.analyzer.AnalyzersRunner: void <init>(spec.harness.results.IterationResult,long)>
254::<spec.harness.analyzer.AnalyzersRunner: void run()>
255::<spec.harness.analyzer.AnalyzersRunner: boolean executeAnalyzers()>
256::<spec.harness.analyzer.AnalyzersRunner: void setupAnalyzerClasses(java.lang.String)>
257::<spec.harness.analyzer.AnalyzersRunner: void tearDownAnalyzerClasses()>
258::<spec.harness.analyzer.AnalyzersRunner: boolean internalSetupAnalyzers()>
259::<spec.harness.analyzer.AnalyzersRunner: void invokeStartMeasurementIntervalForAnalyzers()>
260::<spec.harness.analyzer.AnalyzersRunner: void invokeEndMeasurementIntervalForAnalyzers()>
261::<spec.harness.analyzer.AnalyzersRunner: void internalTearDownAnalyzers()>
262::<spec.harness.analyzer.AnalyzersRunner: void setupAnalyzers(spec.harness.results.IterationResult,long)>
263::<spec.harness.analyzer.AnalyzersRunner: void tearDownAnalyzers(spec.harness.results.IterationResult)>
264::<spec.harness.analyzer.AnalyzersRunner: void <clinit>()>
265::<spec.harness.analyzer.TempSensor: void <init>(java.lang.String,int)>
266::<spec.harness.analyzer.TempSensor: int writeMeter(java.lang.String)>
267::<spec.harness.analyzer.TempSensor: java.lang.String readMeter()>
268::<spec.harness.analyzer.TempSensor: void endSocConnection()>
269::<spec.harness.analyzer.TempSensor: void startRun(int,int,int)>
270::<spec.harness.analyzer.TempSensor: void go()>
271::<spec.harness.analyzer.TempSensor: void stop()>
272::<spec.harness.analyzer.TempSensor: java.util.HashMap reportRun(java.lang.String)>
273::<spec.harness.analyzer.TempSensor: java.lang.Boolean sensorCompliant()>
274::<spec.harness.analyzer.TempSensor: java.lang.String sensorPtdVersion()>
275::<spec.harness.analyzer.TempSensor: java.lang.String sensorPtdHostOs()>
276::<spec.harness.analyzer.TempSensor: java.lang.String sensorPtdMode()>
277::<spec.harness.analyzer.TempSensor: void <clinit>()>
278::<spec.benchmarks.compress.Compressor: void <init>(spec.benchmarks.compress.InputBuffer,spec.benchmarks.compress.OutputBuffer)>
279::<spec.benchmarks.compress.Compressor: void compress()>
280::<spec.benchmarks.compress.Compressor: void output(int)>
281::<spec.benchmarks.compress.Compressor: void clBlock()>
282::<spec.benchmarks.compress.InputBuffer: void <init>(int,byte[])>
283::<spec.benchmarks.compress.InputBuffer: int readBytes(byte[],int)>
284::<spec.io.FileCache$CachedFile: void <init>(spec.io.FileCache,java.lang.String)>
285::<spec.io.FileCache$CachedFile: java.io.ByteArrayInputStream getStream()>
286::<spec.io.FileCache$CachedFile: void cache()>
287::<spec.io.FileCache$CachedFile: void discard()>
288::<spec.io.FileCache$CachedFile: org.xml.sax.InputSource asNewInputSource()>
289::<spec.io.FileCache$CachedFile: javax.xml.transform.stream.StreamSource asNewStreamSource()>
290::<spec.reporter.SPECSubmissionProcessor: void <init>()>
291::<spec.reporter.SPECSubmissionProcessor: void unzipFile(java.lang.String,java.lang.String)>
292::<spec.reporter.SPECSubmissionProcessor: java.lang.String getResultFile(java.lang.String,java.lang.String)>
293::<spec.reporter.SPECSubmissionProcessor: void splitMergedRawFile(java.lang.String)>
294::<spec.reporter.SPECSubmissionProcessor: void createMergedSubFile()>
295::<spec.reporter.SPECSubmissionProcessor: void createResultFile(java.util.Properties)>
296::<spec.reporter.SPECSubmissionProcessor: void main(java.lang.String[])>
297::<spec.reporter.SPECSubmissionProcessor: void <clinit>()>
298::<spec.harness.Context$1: void <init>()>
299::<spec.harness.BenchmarkThread: void <init>(spec.harness.results.BenchmarkResult,int)>
300::<spec.harness.BenchmarkThread: java.lang.String[] getArgs()>
301::<spec.harness.BenchmarkThread: void run()>
302::<spec.harness.BenchmarkThread: boolean executeIteration()>
303::<spec.harness.BenchmarkThread: spec.harness.results.LoopResult runLoop(spec.harness.results.IterationResult)>
304::<spec.reporter.SPECSubmissionPreparer: void <init>()>
305::<spec.reporter.SPECSubmissionPreparer: void prepareFiles(java.lang.String[])>
306::<spec.reporter.SPECSubmissionPreparer: java.lang.String mergeFiles(java.io.File[])>
307::<spec.reporter.SPECSubmissionPreparer: void zipFile(java.lang.String)>
308::<spec.reporter.SPECSubmissionPreparer: void main(java.lang.String[])>
309::<spec.harness.analyzer.PowerAnalyzer: void setupAnalyzerClass()>
310::<spec.harness.analyzer.PowerAnalyzer: void tearDownAnalyzerClass()>
311::<spec.harness.analyzer.PowerAnalyzer: void <init>()>
312::<spec.harness.analyzer.PowerAnalyzer: void setup()>
313::<spec.harness.analyzer.PowerAnalyzer: void startMeasurementInterval()>
314::<spec.harness.analyzer.PowerAnalyzer: void endMeasurementInterval()>
315::<spec.harness.analyzer.PowerAnalyzer: void tearDown()>
316::<spec.benchmarks.compress.OutputBuffer: void <init>(byte[])>
317::<spec.benchmarks.compress.OutputBuffer: long getCRC()>
318::<spec.reporter.BenchmarkGroupRecords: void <init>()>
319::<spec.reporter.BenchmarkGroupRecords: void addNewBenchmarkRecord(spec.reporter.BenchmarkRecord)>
320::<spec.reporter.BenchmarkGroupRecords: double computeCompositeScore()>
321::<spec.reporter.BenchmarkGroupRecords: void updateGroupRecord(java.lang.String,spec.reporter.BenchmarkRecord)>
322::<spec.reporter.BenchmarkGroupRecords$BenchmarkResultsIterator: void <init>(spec.reporter.BenchmarkGroupRecords)>
323::<spec.reporter.BenchmarkGroupRecords$BenchmarkResultsIterator: spec.reporter.BenchmarkRecord next()>
324::<spec.harness.analyzer.CallbackAnalyzerExample$NumberResult: void <init>(double,java.lang.String,java.lang.String)>
325::<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void <init>()>
326::<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void register(spec.harness.analyzer.CallbackAnalyzerExample)>
327::<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void deregister(spec.harness.analyzer.CallbackAnalyzerExample)>
328::<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void run()>
329::<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void <clinit>()>
330::<spec.harness.results.LoopResult: void <init>()>
331::<spec.harness.results.LoopResult: void toXml(java.io.PrintStream,int)>
332::<spec.harness.results.LoopResult: boolean isValid()>
333::<spec.harness.results.LoopResult: java.util.List getAllErrors(java.lang.String)>
334::<spec.reporter.ReportGenerator$Pair: void <init>(spec.reporter.ReportGenerator,java.lang.Object,java.lang.Object)>
335::<spec.harness.analyzer.PollingAnalyzerExample$NumberOfOperations: void <init>(long,long)>
336::<spec.harness.analyzer.PollingAnalyzerExample$NumberOfOperations: java.lang.String getName()>
337::<spec.harness.analyzer.PollingAnalyzerExample$NumberOfOperations: java.lang.String getUnit()>
338::<spec.harness.analyzer.AnalyzerBase: void <init>()>
339::<spec.harness.analyzer.AnalyzerBase: void report(spec.harness.analyzer.TYInfo)>
340::<spec.harness.analyzer.AnalyzerBase: void report(spec.harness.analyzer.AnalyzerResult)>
341::<spec.harness.analyzer.AnalyzerBase: boolean isTimedRun()>
342::<spec.harness.analyzer.AnalyzerBase: long getBenchmarkDuration()>
343::<spec.harness.analyzer.AnalyzerBase: java.lang.String getBenchmarkName()>
344::<spec.harness.analyzer.AnalyzerBase: long getNoOps()>
345::<spec.harness.analyzer.AnalyzerBase: void addError(java.lang.String)>
346::<spec.harness.analyzer.AnalyzerBase: void addErrorToSuiteResult(java.lang.String)>
347::<spec.harness.analyzer.AnalyzerBase: void addViolationToSuiteResult(java.lang.String)>
348::<spec.reporter.HTMLWriter: java.lang.String[] initIndents()>
349::<spec.reporter.HTMLWriter: void <init>(java.lang.String)>
350::<spec.reporter.HTMLWriter: void startTable(java.lang.String,boolean,boolean,boolean)>
351::<spec.reporter.HTMLWriter: void startTable(java.lang.String,boolean)>
352::<spec.reporter.HTMLWriter: void startTable(boolean)>
353::<spec.reporter.HTMLWriter: void insertImgData(java.lang.String,java.lang.String,int)>
354::<spec.reporter.HTMLWriter: void startDetailsTable()>
355::<spec.reporter.HTMLWriter: void insertData(java.lang.String)>
356::<spec.reporter.HTMLWriter: void insertData(java.lang.String,int)>
357::<spec.reporter.HTMLWriter: void insertRecord(java.lang.String,java.lang.String)>
358::<spec.reporter.HTMLWriter: void insertHeaderData(java.lang.String,java.lang.String,boolean,int,int,java.lang.String)>
359::<spec.reporter.HTMLWriter: void insertHeaderData(java.lang.String,java.lang.String,boolean,int,int)>
360::<spec.reporter.HTMLWriter: void insertHeaderRecord(java.lang.String,java.lang.String,boolean,int,int)>
361::<spec.reporter.HTMLWriter: void startRecord()>
362::<spec.reporter.HTMLWriter: void endRecord()>
363::<spec.reporter.HTMLWriter: void endAndStartRecord()>
364::<spec.reporter.HTMLWriter: void putColumnsSpec(int[])>
365::<spec.reporter.HTMLWriter: void putSummaryTable(java.lang.String,java.util.TreeMap)>
366::<spec.reporter.HTMLWriter: void putHat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
367::<spec.reporter.HTMLWriter: void endData()>
368::<spec.reporter.HTMLWriter: void startData()>
369::<spec.reporter.HTMLWriter: void startRecordAndData()>
370::<spec.reporter.HTMLWriter: void putTHEAD(boolean)>
371::<spec.reporter.HTMLWriter: void putTBODY(boolean)>
372::<spec.reporter.HTMLWriter: void putTABLE(boolean,java.lang.String)>
373::<spec.reporter.HTMLWriter: void endRecordAndData()>
374::<spec.reporter.HTMLWriter: void endAndStartRecordAndData()>
375::<spec.reporter.HTMLWriter: void endAndStartData()>
376::<spec.reporter.HTMLWriter: void endTable()>
377::<spec.reporter.HTMLWriter: void endTable(boolean)>
378::<spec.reporter.HTMLWriter: void putString(java.lang.String)>
379::<spec.reporter.HTMLWriter: void handleIterRecord(java.util.ArrayList,int)>
380::<spec.reporter.HTMLWriter: java.lang.String createConfRecord(java.lang.String[])>
381::<spec.reporter.HTMLWriter: void handleBenchmarkRecord(spec.reporter.BenchmarkRecord)>
382::<spec.reporter.HTMLWriter: java.lang.String insertBRTags(java.util.ArrayList)>
383::<spec.reporter.HTMLWriter: void insertRecords(java.util.ArrayList)>
384::<spec.reporter.HTMLWriter: void startReport()>
385::<spec.reporter.HTMLWriter: void endReport()>
386::<spec.harness.analyzer.TempAnalyzer$TemperatureResult: void <init>(double,java.lang.String,java.lang.String)>
387::<spec.harness.analyzer.TYInfo: void <init>(long,long)>
388::<spec.harness.analyzer.HeapMemoryFreeAnalyzer: void <init>()>
389::<spec.harness.analyzer.HeapMemoryFreeAnalyzer: void execute(long)>
390::<spec.harness.analyzer.CallbackAnalyzerExample: void <init>()>
391::<spec.harness.analyzer.CallbackAnalyzerExample: void setup()>
392::<spec.harness.analyzer.CallbackAnalyzerExample: void tearDown()>
393::<spec.harness.analyzer.CallbackAnalyzerExample: void callbackMethod(int)>
394::<spec.harness.results.TestResult: void <init>()>
395::<spec.harness.results.TestResult: void addError(java.lang.String)>
396::<spec.harness.results.TestResult: void printErrorsToXml(java.io.PrintStream,int)>
397::<spec.harness.results.TestResult: void ptxAttrib(java.io.PrintStream,int,java.lang.String,java.lang.String,boolean,java.lang.String)>
398::<spec.harness.results.TestResult: void ptxAttrib(java.io.PrintStream,int,java.lang.String,long,boolean,java.lang.String)>
399::<spec.harness.results.TestResult: void ptxAttrib(java.io.PrintStream,int,java.lang.String,double,boolean,java.lang.String)>
400::<spec.harness.results.TestResult: void ptxAttrib(java.io.PrintStream,int,java.lang.String,boolean,boolean,java.lang.String)>
401::<spec.harness.results.TestResult: void ptxAttrib(java.io.PrintStream,int,java.lang.String,java.lang.String[],boolean,java.lang.String)>
402::<spec.harness.results.TestResult: void ptxElement(java.io.PrintStream,int,java.lang.String,java.lang.String)>
403::<spec.harness.results.TestResult: void ptxElementOpen(java.io.PrintStream,int,java.lang.String)>
404::<spec.harness.results.TestResult: void ptxElementStartOpen(java.io.PrintStream,int,java.lang.String,boolean)>
405::<spec.harness.results.TestResult: void ptxElementClose(java.io.PrintStream,int,java.lang.String)>
406::<spec.harness.results.TestResult: java.lang.String ptxArrToValue(java.lang.String[])>
407::<spec.harness.results.TestResult: void ptxXmlHeader(java.io.PrintStream)>
408::<spec.harness.results.TestResult: java.lang.String doubleAsRes(double)>
409::<spec.harness.results.TestResult: java.lang.String millisAsSec(long)>
410::<spec.harness.results.TestResult: java.lang.String getIndent(int)>
411::<spec.harness.results.TestResult: java.lang.String correctContent(java.lang.String,boolean)>
412::<spec.harness.results.TestResult: void <clinit>()>
413::<spec.harness.results.SuiteResult: void <init>()>
414::<spec.harness.results.SuiteResult: void addJvmInfo(java.lang.String,java.util.Properties,java.lang.String)>
415::<spec.harness.results.SuiteResult: void addJvmInfo(java.lang.String,java.lang.String)>
416::<spec.harness.results.SuiteResult: void addRunInfo(java.lang.String,java.util.Properties,java.lang.String)>
417::<spec.harness.results.SuiteResult: void addSwInfo(java.lang.String,java.util.Properties,java.lang.String)>
418::<spec.harness.results.SuiteResult: void addHwInfo(java.lang.String,java.util.Properties,java.lang.String)>
419::<spec.harness.results.SuiteResult: void addViolation(java.lang.String)>
420::<spec.harness.results.SuiteResult: void addConfiguration(java.lang.String)>
421::<spec.harness.results.SuiteResult: boolean isValid()>
422::<spec.harness.results.SuiteResult: java.util.List getAllErrors(java.lang.String)>
423::<spec.harness.results.SuiteResult: void headerToXml(java.io.PrintStream,int)>
424::<spec.harness.results.SuiteResult: void toXml(java.io.PrintStream,int)>
425::<spec.harness.results.SuiteResult: void footerToXml(java.io.PrintStream,int)>
426::<spec.harness.results.SuiteResult: java.lang.String getCommandLineOptions()>
427::<spec.harness.Constants: void <init>()>
428::<spec.reporter.Reporter: void <init>()>
429::<spec.reporter.Reporter: void usage()>
430::<spec.reporter.Reporter: java.lang.String main2(java.lang.String[])>
431::<spec.reporter.Reporter: void main(java.lang.String[])>
432::<spec.harness.results.BenchmarkResult: void <init>()>
433::<spec.harness.results.BenchmarkResult: void setIterationTime(long)>
434::<spec.harness.results.BenchmarkResult: java.lang.String durDesc()>
435::<spec.harness.results.BenchmarkResult: double getScore()>
436::<spec.harness.results.BenchmarkResult: java.lang.String resultString()>
437::<spec.harness.results.BenchmarkResult: boolean isValid()>
438::<spec.harness.results.BenchmarkResult: java.util.List getAllErrors(java.lang.String)>
439::<spec.harness.results.BenchmarkResult: void headerToXml(java.io.PrintStream,int)>
440::<spec.harness.results.BenchmarkResult: void toXml(java.io.PrintStream,int)>
441::<spec.harness.results.BenchmarkResult: void middleToXml(java.io.PrintStream,int)>
442::<spec.harness.results.BenchmarkResult: void footerToXml(java.io.PrintStream,int)>
