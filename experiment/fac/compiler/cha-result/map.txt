0::<spec.io.ValidityCheckOutputStream: void <init>(java.lang.String)>
1::<spec.io.ValidityCheckOutputStream: void write(int)>
2::<spec.io.ValidityCheckOutputStream: boolean validityCheck(spec.harness.results.LoopResult)>
3::<spec.io.ValidityCheckOutputStream: void validityCheck2(spec.harness.results.LoopResult)>
4::<spec.io.ValidityCheckOutputStream: void handleValidationFailure(spec.harness.results.LoopResult,int,java.lang.String,java.lang.String)>
5::<spec.io.ValidityCheckOutputStream: java.lang.String getValidityFileName(java.lang.String)>
6::<spec.io.ValidityCheckOutputStream: void createValidityFile()>
7::<spec.io.ValidityCheckOutputStream: void <clinit>()>
8::<spec.io.FileCache$CachedFile: void <init>(spec.io.FileCache,java.lang.String)>
9::<spec.io.FileCache$CachedFile: java.io.ByteArrayInputStream getStream()>
10::<spec.io.FileCache$CachedFile: void cache()>
11::<spec.io.FileCache$CachedFile: void discard()>
12::<spec.io.FileCache$CachedFile: org.xml.sax.InputSource asNewInputSource()>
13::<spec.io.FileCache$CachedFile: javax.xml.transform.stream.StreamSource asNewStreamSource()>
14::<spec.io.FileCache: void <init>()>
15::<spec.io.FileCache: java.io.ByteArrayInputStream getStream(java.lang.String)>
16::<spec.io.FileCache: void discard(java.lang.String)>
17::<spec.io.FileCache: int getLength(java.lang.String)>
18::<spec.io.FileCache: void clearCache()>
19::<spec.io.FileCache: boolean hasFile(java.lang.String)>
20::<spec.io.FileCache: byte[] getByteArray(java.lang.String)>
21::<spec.io.FileCache: void loadFile(java.lang.String)>
22::<spec.benchmarks.compiler.SpecFileManager$1: void <init>(com.sun.tools.javac.util.Context,spec.benchmarks.compiler.Compiler)>
23::<spec.benchmarks.compiler.SpecFileManager$1: javax.tools.JavaFileManager make()>
24::<spec.benchmarks.compiler.SpecFileManager$1: java.lang.Object make()>
25::<spec.benchmarks.compiler.SpecFileManager$OutputFileObject$1: void <init>(spec.benchmarks.compiler.SpecFileManager$OutputFileObject)>
26::<spec.benchmarks.compiler.SpecFileManager$OutputFileObject$1: void write(int)>
27::<spec.benchmarks.compiler.SpecFileManager$OutputFileObject$1: void write(byte[])>
28::<spec.benchmarks.compiler.SpecFileManager$OutputFileObject$1: void write(byte[],int,int)>
29::<spec.benchmarks.compiler.SpecFileManager$CachedFileObject: void <init>(spec.benchmarks.compiler.SpecFileManager,javax.tools.JavaFileObject)>
30::<spec.benchmarks.compiler.SpecFileManager$CachedFileObject: java.io.InputStream openInputStream()>
31::<spec.benchmarks.compiler.SpecFileManager$InputFileObject: void <init>(spec.benchmarks.compiler.SpecFileManager,java.lang.String,java.io.File)>
32::<spec.benchmarks.compiler.SpecFileManager$InputFileObject: java.io.InputStream openInputStream()>
33::<spec.benchmarks.compiler.SpecFileManager$InputFileObject: java.lang.CharSequence getCharContent(boolean)>
34::<spec.benchmarks.compiler.SpecFileManager$BaseFileObject: void <init>(spec.benchmarks.compiler.SpecFileManager)>
35::<spec.benchmarks.compiler.SpecFileManager$BaseFileObject: boolean delete()>
36::<spec.benchmarks.compiler.SpecFileManager$BaseFileObject: javax.lang.model.element.Modifier getAccessLevel()>
37::<spec.benchmarks.compiler.SpecFileManager$BaseFileObject: java.lang.CharSequence getCharContent(boolean)>
38::<spec.benchmarks.compiler.SpecFileManager$BaseFileObject: javax.tools.JavaFileObject$Kind getKind()>
39::<spec.benchmarks.compiler.SpecFileManager$BaseFileObject: long getLastModified()>
40::<spec.benchmarks.compiler.SpecFileManager$BaseFileObject: java.lang.String getName()>
41::<spec.benchmarks.compiler.SpecFileManager$BaseFileObject: javax.lang.model.element.NestingKind getNestingKind()>
42::<spec.benchmarks.compiler.SpecFileManager$BaseFileObject: boolean isNameCompatible(java.lang.String,javax.tools.JavaFileObject$Kind)>
43::<spec.benchmarks.compiler.SpecFileManager$BaseFileObject: java.io.InputStream openInputStream()>
44::<spec.benchmarks.compiler.SpecFileManager$BaseFileObject: java.io.OutputStream openOutputStream()>
45::<spec.benchmarks.compiler.SpecFileManager$BaseFileObject: java.io.Reader openReader(boolean)>
46::<spec.benchmarks.compiler.SpecFileManager$BaseFileObject: java.io.Writer openWriter()>
47::<spec.benchmarks.compiler.SpecFileManager$BaseFileObject: java.net.URI toUri()>
48::<spec.benchmarks.compiler.compiler.Main: void <init>(spec.harness.results.BenchmarkResult,int)>
49::<spec.benchmarks.compiler.compiler.Main: void setupBenchmark()>
50::<spec.benchmarks.compiler.compiler.Main: java.io.File getSrcFile(java.io.File,java.io.File)>
51::<spec.benchmarks.compiler.compiler.Main: void main(java.lang.String[])>
52::<spec.benchmarks.compiler.MainBase: void <init>(spec.harness.results.BenchmarkResult,int,int)>
53::<spec.benchmarks.compiler.MainBase: void preSetupBenchmark(java.lang.Class)>
54::<spec.benchmarks.compiler.MainBase: void tearDownBenchmark()>
55::<spec.benchmarks.compiler.MainBase: void harnessMain()>
56::<spec.benchmarks.compiler.MainBase: void harnessMain(boolean)>
57::<spec.benchmarks.compiler.SpecFileManager$OutputFileObject: void <init>(spec.benchmarks.compiler.SpecFileManager,java.lang.String)>
58::<spec.benchmarks.compiler.SpecFileManager$OutputFileObject: java.io.OutputStream openOutputStream()>
59::<spec.benchmarks.compiler.Util: void <init>()>
60::<spec.benchmarks.compiler.Util: java.lang.String linesep()>
61::<spec.benchmarks.compiler.Util: void unzip(java.lang.String)>
62::<spec.benchmarks.compiler.Util: void unzip(java.lang.String,java.lang.String)>
63::<spec.benchmarks.compiler.Util: void unzip(java.lang.String,java.lang.String,java.util.ArrayList)>
64::<spec.benchmarks.compiler.Util: boolean copyFile(java.lang.String,java.lang.String)>
65::<spec.benchmarks.compiler.Util: java.io.File getTmpDir(java.io.File,boolean)>
66::<spec.benchmarks.compiler.Util: boolean copyFile(java.io.File,java.io.File)>
67::<spec.benchmarks.compiler.Util: java.io.File getZipFile(java.io.File)>
68::<spec.benchmarks.compiler.Util: void recursiveRemoveDir(java.io.File)>
69::<spec.benchmarks.compiler.Util: java.io.File getSrcDir(java.io.File,java.lang.String)>
70::<spec.benchmarks.compiler.Util: java.io.File getSrcFile(java.io.File)>
71::<spec.benchmarks.compiler.Util: byte[] getBytes(java.io.InputStream)>
72::<spec.benchmarks.compiler.Util: byte[] getBytes(java.io.File)>
73::<spec.benchmarks.compiler.Util: byte[] updateBuffer(byte[],byte[],int,int)>
74::<spec.benchmarks.compiler.Util: void <clinit>()>
75::<spec.benchmarks.compiler.Compiler: void <init>(java.lang.String[])>
76::<spec.benchmarks.compiler.Compiler: void compile(int)>
77::<spec.benchmarks.compiler.SpecFileManager: void preRegister(com.sun.tools.javac.util.Context,spec.benchmarks.compiler.Compiler)>
78::<spec.benchmarks.compiler.SpecFileManager: void reset()>
79::<spec.benchmarks.compiler.SpecFileManager: void <init>(com.sun.tools.javac.util.Context,boolean,java.nio.charset.Charset)>
80::<spec.benchmarks.compiler.SpecFileManager: java.lang.Iterable list(javax.tools.JavaFileManager$Location,java.lang.String,java.util.Set,boolean)>
81::<spec.benchmarks.compiler.SpecFileManager: java.lang.String generateKey(javax.tools.JavaFileManager$Location,java.lang.String,java.util.Set,boolean)>
82::<spec.benchmarks.compiler.SpecFileManager: java.lang.String inferBinaryName(javax.tools.JavaFileManager$Location,javax.tools.JavaFileObject)>
83::<spec.benchmarks.compiler.SpecFileManager: java.lang.String inferBinaryName2(javax.tools.JavaFileManager$Location,spec.benchmarks.compiler.SpecFileManager$CachedFileObject)>
84::<spec.benchmarks.compiler.SpecFileManager: java.lang.String removeExtension(java.lang.String)>
85::<spec.benchmarks.compiler.SpecFileManager: java.lang.Iterable getLocation(javax.tools.JavaFileManager$Location)>
86::<spec.benchmarks.compiler.SpecFileManager: java.lang.Iterable getJavaFileObjectsFromFiles(java.lang.Iterable)>
87::<spec.benchmarks.compiler.SpecFileManager: javax.tools.JavaFileObject getJavaFileForOutput(javax.tools.JavaFileManager$Location,java.lang.String,javax.tools.JavaFileObject$Kind,javax.tools.FileObject)>
88::<spec.benchmarks.compiler.SpecFileManager: void <clinit>()>
89::<spec.benchmarks.compiler.sunflow.Main: void <init>(spec.harness.results.BenchmarkResult,int)>
90::<spec.benchmarks.compiler.sunflow.Main: void setupBenchmark()>
91::<spec.benchmarks.compiler.sunflow.Main: void harnessMain()>
92::<spec.benchmarks.compiler.sunflow.Main: java.io.File getSrcFile(java.io.File,java.io.File)>
93::<spec.benchmarks.compiler.sunflow.Main: void main(java.lang.String[])>
94::<spec.reporter.BenchmarkRecord: void <init>(java.lang.String,int)>
95::<spec.reporter.BenchmarkRecord: spec.reporter.BenchmarkRecord$IterationRecord addIterationRecord(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
96::<spec.reporter.BenchmarkRecord: void printAllRecordedInfo()>
97::<spec.reporter.BenchmarkRecord: boolean isValidRun()>
98::<spec.reporter.ReportGenerator$Pair: void <init>(spec.reporter.ReportGenerator,java.lang.Object,java.lang.Object)>
99::<spec.reporter.BenchmarkGroupRecords$BenchmarkResultsIterator: void <init>(spec.reporter.BenchmarkGroupRecords)>
100::<spec.reporter.BenchmarkGroupRecords$BenchmarkResultsIterator: spec.reporter.BenchmarkRecord next()>
101::<spec.reporter.BenchmarkRecord$IterationRecord: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
102::<spec.reporter.BenchmarkRecord$IterationRecord: void addError(java.lang.String)>
103::<spec.reporter.PlainWriter: void <init>(java.lang.String)>
104::<spec.reporter.PlainWriter: void handleIterRecord(spec.reporter.BenchmarkRecord)>
105::<spec.reporter.PlainWriter: void handleBenchmarkRecord(spec.reporter.BenchmarkRecord)>
106::<spec.reporter.PlainWriter: void insertRecord(java.lang.String,java.lang.String)>
107::<spec.reporter.PlainWriter: void putHat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
108::<spec.reporter.PlainWriter: void putSummaryTable(java.lang.String,java.util.TreeMap)>
109::<spec.reporter.PlainWriter: void startDetailsTable()>
110::<spec.reporter.PlainWriter: void insertRecords(java.util.ArrayList)>
111::<spec.reporter.ReportGenerator: void <init>(java.lang.String,boolean,boolean,boolean,boolean)>
112::<spec.reporter.ReportGenerator: void handleBenchmarksResults(org.w3c.dom.Node)>
113::<spec.reporter.ReportGenerator: void collectBmConfiguration(spec.reporter.BenchmarkRecord,org.w3c.dom.NamedNodeMap)>
114::<spec.reporter.ReportGenerator: void handleBenchmarkResult(org.w3c.dom.Node)>
115::<spec.reporter.ReportGenerator: void generateHat(spec.reporter.Writer,java.lang.String,java.lang.String,java.lang.String)>
116::<spec.reporter.ReportGenerator: void generateSummaryTable(spec.reporter.Writer,java.lang.String)>
117::<spec.reporter.ReportGenerator: void generateConfigTable(spec.reporter.Writer)>
118::<spec.reporter.ReportGenerator: java.util.ArrayList findProperties(java.lang.String,java.lang.String)>
119::<spec.reporter.ReportGenerator: void generateViolationsTable(spec.reporter.Writer)>
120::<spec.reporter.ReportGenerator: void generateDetailsTable(spec.reporter.Writer)>
121::<spec.reporter.ReportGenerator: void generateCopyRightStatement(spec.reporter.Writer)>
122::<spec.reporter.ReportGenerator: java.lang.String generateReport()>
123::<spec.reporter.ReportGenerator: void generateInfoTable(org.w3c.dom.Node,spec.reporter.Writer,java.lang.String[])>
124::<spec.reporter.ReportGenerator: java.lang.String insertBRTag(java.lang.String,spec.reporter.Writer)>
125::<spec.reporter.ReportGenerator: void handleIterationResult(spec.reporter.BenchmarkRecord,spec.reporter.BenchmarkChart,org.w3c.dom.Node)>
126::<spec.reporter.ReportGenerator: boolean checkName(java.lang.String,org.w3c.dom.Node)>
127::<spec.reporter.ReportGenerator: void handleLoopsNode(spec.reporter.BenchmarkRecord$IterationRecord,spec.reporter.BenchmarkChart,org.w3c.dom.Node)>
128::<spec.reporter.ReportGenerator: void checkErrors(spec.reporter.BenchmarkRecord$IterationRecord,org.w3c.dom.Node)>
129::<spec.reporter.ReportGenerator: void createSummary(java.lang.String,java.lang.String,java.lang.String)>
130::<spec.reporter.ReportGenerator: void printConstantProp(java.io.PrintStream,java.lang.String)>
131::<spec.reporter.ReportGenerator: void printConstantProp(java.io.PrintStream,java.lang.String,java.lang.String)>
132::<spec.reporter.ReportGenerator: void createSubFile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
133::<spec.reporter.ReportGenerator: void handleAnalyzersNode(spec.reporter.BenchmarkChart,org.w3c.dom.Node)>
134::<spec.reporter.ReportGenerator: boolean isCompliantRun()>
135::<spec.reporter.ReportGenerator: void insertSuiteConfiguration(spec.reporter.Writer)>
136::<spec.reporter.ReportGenerator: java.lang.String main2(java.lang.String[])>
137::<spec.reporter.ReportGenerator: void main(java.lang.String[])>
138::<spec.reporter.ReportGenerator: void <clinit>()>
139::<spec.reporter.SPECSubmissionProcessor: void <init>()>
140::<spec.reporter.SPECSubmissionProcessor: void unzipFile(java.lang.String,java.lang.String)>
141::<spec.reporter.SPECSubmissionProcessor: java.lang.String getResultFile(java.lang.String,java.lang.String)>
142::<spec.reporter.SPECSubmissionProcessor: void splitMergedRawFile(java.lang.String)>
143::<spec.reporter.SPECSubmissionProcessor: void createMergedSubFile()>
144::<spec.reporter.SPECSubmissionProcessor: void createResultFile(java.util.Properties)>
145::<spec.reporter.SPECSubmissionProcessor: void main(java.lang.String[])>
146::<spec.reporter.SPECSubmissionProcessor: void <clinit>()>
147::<spec.reporter.BenchmarkGroupRecords$BenchmarkGroupRecord: void <init>(spec.reporter.BenchmarkRecord)>
148::<spec.reporter.BenchmarkGroupRecords$BenchmarkGroupRecord: void <init>(java.lang.String)>
149::<spec.reporter.BenchmarkGroupRecords$BenchmarkGroupRecord: void addBenchmarkRecord(spec.reporter.BenchmarkRecord)>
150::<spec.reporter.BenchmarkGroupRecords$BenchmarkGroupRecord: double computeScore()>
151::<spec.reporter.SPECSubmissionPreparer: void <init>()>
152::<spec.reporter.SPECSubmissionPreparer: void prepareFiles(java.lang.String[])>
153::<spec.reporter.SPECSubmissionPreparer: java.lang.String mergeFiles(java.io.File[])>
154::<spec.reporter.SPECSubmissionPreparer: void zipFile(java.lang.String)>
155::<spec.reporter.SPECSubmissionPreparer: void main(java.lang.String[])>
156::<spec.reporter.Writer: void <init>(java.lang.String)>
157::<spec.reporter.Writer: void closeStream()>
158::<spec.reporter.Writer: spec.reporter.Writer getInstance(java.lang.String,java.lang.String)>
159::<spec.reporter.Reporter: void <init>()>
160::<spec.reporter.Reporter: void usage()>
161::<spec.reporter.Reporter: java.lang.String main2(java.lang.String[])>
162::<spec.reporter.Reporter: void main(java.lang.String[])>
163::<spec.reporter.BenchmarkGroupRecords: void <init>()>
164::<spec.reporter.BenchmarkGroupRecords: void addNewBenchmarkRecord(spec.reporter.BenchmarkRecord)>
165::<spec.reporter.BenchmarkGroupRecords: double computeCompositeScore()>
166::<spec.reporter.BenchmarkGroupRecords: void updateGroupRecord(java.lang.String,spec.reporter.BenchmarkRecord)>
167::<spec.reporter.Utils: void <init>()>
168::<spec.reporter.Utils: void createBmResultGraph(spec.reporter.BenchmarkRecord)>
169::<spec.reporter.Utils: void initDescriptions()>
170::<spec.reporter.Utils: java.lang.String getDescription(java.lang.String)>
171::<spec.reporter.Utils: java.util.HashMap initColorMap()>
172::<spec.reporter.Utils: void generateMainChart(double,java.util.TreeMap)>
173::<spec.reporter.Utils: boolean isCheck(spec.reporter.BenchmarkRecord)>
174::<spec.reporter.Utils: boolean isScimarkMonteCarlo(spec.reporter.BenchmarkRecord)>
175::<spec.reporter.Utils: boolean isScimarkLarge(spec.reporter.BenchmarkRecord)>
176::<spec.reporter.Utils: boolean isScimarkSmall(spec.reporter.BenchmarkRecord)>
177::<spec.reporter.Utils: java.lang.String getImageName(java.lang.String)>
178::<spec.reporter.Utils: java.lang.String getFullImageName(java.lang.String)>
179::<spec.reporter.Utils: java.lang.String formatScore(double)>
180::<spec.reporter.Utils: java.lang.String formatScore(double,java.lang.String)>
181::<spec.reporter.Utils: java.lang.String formatScore(double,java.lang.String,java.lang.String)>
182::<spec.reporter.Utils: void dbgPrint(java.lang.String)>
183::<spec.reporter.Utils: boolean isValidScore(java.lang.Double)>
184::<spec.reporter.Utils: boolean isValidScore(double)>
185::<spec.reporter.Utils: void <clinit>()>
186::<spec.reporter.BenchmarkChart: void <init>(java.lang.String)>
187::<spec.reporter.BenchmarkChart: void addTotalHeapInfo(long,long)>
188::<spec.reporter.BenchmarkChart: void addFreeHeapInfo(long,long)>
189::<spec.reporter.BenchmarkChart: void addAnalyzerReport(java.lang.String,java.lang.String,long,long)>
190::<spec.reporter.BenchmarkChart: void addAxis(java.lang.String,java.lang.String,org.jfree.data.xy.XYSeries)>
191::<spec.reporter.BenchmarkChart: void addTimeInfo(java.lang.String,long,long)>
192::<spec.reporter.BenchmarkChart: void addTimeInfo(long,long)>
193::<spec.reporter.BenchmarkChart: void addMarker(long,java.lang.String)>
194::<spec.reporter.BenchmarkChart: void setMemoryAxis()>
195::<spec.reporter.BenchmarkChart: void buildJPEG()>
196::<spec.reporter.BenchmarkChart: void updateColors()>
197::<spec.reporter.HTMLWriter: java.lang.String[] initIndents()>
198::<spec.reporter.HTMLWriter: void <init>(java.lang.String)>
199::<spec.reporter.HTMLWriter: void startTable(java.lang.String,boolean,boolean,boolean)>
200::<spec.reporter.HTMLWriter: void startTable(java.lang.String,boolean)>
201::<spec.reporter.HTMLWriter: void startTable(boolean)>
202::<spec.reporter.HTMLWriter: void insertImgData(java.lang.String,java.lang.String,int)>
203::<spec.reporter.HTMLWriter: void startDetailsTable()>
204::<spec.reporter.HTMLWriter: void insertData(java.lang.String)>
205::<spec.reporter.HTMLWriter: void insertData(java.lang.String,int)>
206::<spec.reporter.HTMLWriter: void insertRecord(java.lang.String,java.lang.String)>
207::<spec.reporter.HTMLWriter: void insertHeaderData(java.lang.String,java.lang.String,boolean,int,int,java.lang.String)>
208::<spec.reporter.HTMLWriter: void insertHeaderData(java.lang.String,java.lang.String,boolean,int,int)>
209::<spec.reporter.HTMLWriter: void insertHeaderRecord(java.lang.String,java.lang.String,boolean,int,int)>
210::<spec.reporter.HTMLWriter: void startRecord()>
211::<spec.reporter.HTMLWriter: void endRecord()>
212::<spec.reporter.HTMLWriter: void endAndStartRecord()>
213::<spec.reporter.HTMLWriter: void putColumnsSpec(int[])>
214::<spec.reporter.HTMLWriter: void putSummaryTable(java.lang.String,java.util.TreeMap)>
215::<spec.reporter.HTMLWriter: void putHat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
216::<spec.reporter.HTMLWriter: void endData()>
217::<spec.reporter.HTMLWriter: void startData()>
218::<spec.reporter.HTMLWriter: void startRecordAndData()>
219::<spec.reporter.HTMLWriter: void putTHEAD(boolean)>
220::<spec.reporter.HTMLWriter: void putTBODY(boolean)>
221::<spec.reporter.HTMLWriter: void putTABLE(boolean,java.lang.String)>
222::<spec.reporter.HTMLWriter: void endRecordAndData()>
223::<spec.reporter.HTMLWriter: void endAndStartRecordAndData()>
224::<spec.reporter.HTMLWriter: void endAndStartData()>
225::<spec.reporter.HTMLWriter: void endTable()>
226::<spec.reporter.HTMLWriter: void endTable(boolean)>
227::<spec.reporter.HTMLWriter: void putString(java.lang.String)>
228::<spec.reporter.HTMLWriter: void handleIterRecord(java.util.ArrayList,int)>
229::<spec.reporter.HTMLWriter: java.lang.String createConfRecord(java.lang.String[])>
230::<spec.reporter.HTMLWriter: void handleBenchmarkRecord(spec.reporter.BenchmarkRecord)>
231::<spec.reporter.HTMLWriter: java.lang.String insertBRTags(java.util.ArrayList)>
232::<spec.reporter.HTMLWriter: void insertRecords(java.util.ArrayList)>
233::<spec.reporter.HTMLWriter: void startReport()>
234::<spec.reporter.HTMLWriter: void endReport()>
235::<spec.harness.Context: void <init>()>
236::<spec.harness.Context: java.io.PrintStream getOut()>
237::<spec.harness.Context: void setOut(java.io.PrintStream)>
238::<spec.harness.Context: java.lang.String getResourceDirFor(java.lang.Class)>
239::<spec.harness.Context: java.lang.String staticToString()>
240::<spec.harness.Context: void closeXmlResultFile()>
241::<spec.harness.Context: void <clinit>()>
242::<spec.harness.Launch: void <init>()>
243::<spec.harness.Launch: void runBenchmarkSuite(java.util.Properties)>
244::<spec.harness.Launch: java.lang.String openResultFile(java.util.Properties)>
245::<spec.harness.Launch: void closeResultFile(java.lang.String)>
246::<spec.harness.Launch: void closeSubmissionFile(java.lang.String)>
247::<spec.harness.Launch: java.lang.String createReport(java.lang.String)>
248::<spec.harness.Launch: java.lang.String createReport(java.lang.String[])>
249::<spec.harness.Launch: spec.harness.results.BenchmarkResult runOneBenchmark(java.lang.String,int,int,int)>
250::<spec.harness.Launch: java.lang.String checkBenchmarkKit()>
251::<spec.harness.Launch: void setupContext()>
252::<spec.harness.Launch: boolean setupSimple(java.lang.String[])>
253::<spec.harness.Launch: void main(java.lang.String[])>
254::<spec.harness.Launch: void <clinit>()>
255::<spec.harness.SpecJVMBenchmarkBase: void <init>(spec.harness.results.BenchmarkResult,int)>
256::<spec.harness.SpecJVMBenchmarkBase: void runSimple(java.lang.Class,java.lang.String[])>
257::<spec.harness.CommandLineParser: void <init>()>
258::<spec.harness.CommandLineParser: void usage(java.io.PrintStream)>
259::<spec.harness.CommandLineParser: void version(java.io.PrintStream)>
260::<spec.harness.CommandLineParser: boolean parseArgs(java.lang.String[],java.util.Properties)>
261::<spec.harness.Configuration: void <init>()>
262::<spec.harness.Configuration: void setupProp(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
263::<spec.harness.Configuration: void setupProp(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
264::<spec.harness.Configuration: void setupProp(java.lang.String,java.lang.String,java.lang.String)>
265::<spec.harness.Configuration: java.lang.String getFixedOperationsProp(java.lang.String)>
266::<spec.harness.Configuration: void setupProperties()>
267::<spec.harness.Configuration: void checkSetup(spec.harness.results.SuiteResult)>
268::<spec.harness.Configuration: void validateProperty(spec.harness.results.SuiteResult,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
269::<spec.harness.Configuration: java.util.Properties readProperties(java.lang.String)>
270::<spec.harness.Configuration: void addViolation(spec.harness.results.SuiteResult,java.lang.String,java.lang.String)>
271::<spec.harness.Configuration: void addConfigurationDetail(spec.harness.results.SuiteResult,java.lang.String,java.lang.String)>
272::<spec.harness.Configuration: boolean checkLauncher(java.lang.String)>
273::<spec.harness.Configuration: void setupReportInfo(spec.harness.results.SuiteResult,java.util.Properties)>
274::<spec.harness.analyzer.AnalyzerResult: void <init>(double)>
275::<spec.harness.analyzer.AnalyzerResult: java.lang.String getDescription()>
276::<spec.harness.analyzer.TempAnalyzer: void setupAnalyzerClass()>
277::<spec.harness.analyzer.TempAnalyzer: void tearDownAnalyzerClass()>
278::<spec.harness.analyzer.TempAnalyzer: void <init>()>
279::<spec.harness.analyzer.TempAnalyzer: void setup()>
280::<spec.harness.analyzer.TempAnalyzer: void startMeasurementInterval()>
281::<spec.harness.analyzer.TempAnalyzer: void endMeasurementInterval()>
282::<spec.harness.analyzer.TempAnalyzer: void tearDown()>
283::<spec.harness.analyzer.PowerAnalyzer$PowerConsumtionResult: void <init>(double,java.lang.String,java.lang.String)>
284::<spec.harness.analyzer.TempAnalyzer$TemperatureResult: void <init>(double,java.lang.String,java.lang.String)>
285::<spec.harness.analyzer.PollingAnalyzerExample$NumberOfOperations: void <init>(long,long)>
286::<spec.harness.analyzer.PollingAnalyzerExample$NumberOfOperations: java.lang.String getName()>
287::<spec.harness.analyzer.PollingAnalyzerExample$NumberOfOperations: java.lang.String getUnit()>
288::<spec.harness.analyzer.HeapMemoryTotalAnalyzer: void <init>()>
289::<spec.harness.analyzer.HeapMemoryTotalAnalyzer: void execute(long)>
290::<spec.harness.analyzer.AnalyzersRunner: void <init>(spec.harness.results.IterationResult,long)>
291::<spec.harness.analyzer.AnalyzersRunner: void run()>
292::<spec.harness.analyzer.AnalyzersRunner: boolean executeAnalyzers()>
293::<spec.harness.analyzer.AnalyzersRunner: void setupAnalyzerClasses(java.lang.String)>
294::<spec.harness.analyzer.AnalyzersRunner: void tearDownAnalyzerClasses()>
295::<spec.harness.analyzer.AnalyzersRunner: boolean internalSetupAnalyzers()>
296::<spec.harness.analyzer.AnalyzersRunner: void invokeStartMeasurementIntervalForAnalyzers()>
297::<spec.harness.analyzer.AnalyzersRunner: void invokeEndMeasurementIntervalForAnalyzers()>
298::<spec.harness.analyzer.AnalyzersRunner: void internalTearDownAnalyzers()>
299::<spec.harness.analyzer.AnalyzersRunner: void setupAnalyzers(spec.harness.results.IterationResult,long)>
300::<spec.harness.analyzer.AnalyzersRunner: void tearDownAnalyzers(spec.harness.results.IterationResult)>
301::<spec.harness.analyzer.AnalyzersRunner: void <clinit>()>
302::<spec.harness.analyzer.CallbackAnalyzerExample$NumberInfo: void <init>(long,long)>
303::<spec.harness.analyzer.CallbackAnalyzerExample$NumberInfo: java.lang.String getName()>
304::<spec.harness.analyzer.CallbackAnalyzerExample$NumberInfo: java.lang.String getUnit()>
305::<spec.harness.analyzer.HeapMemoryFreeAnalyzer$HeapMemoryFree: void <init>(long,long)>
306::<spec.harness.analyzer.HeapMemoryFreeAnalyzer$HeapMemoryFree: java.lang.String getName()>
307::<spec.harness.analyzer.HeapMemoryFreeAnalyzer$HeapMemoryFree: java.lang.String getUnit()>
308::<spec.harness.analyzer.CallbackAnalyzerExample: void <init>()>
309::<spec.harness.analyzer.CallbackAnalyzerExample: void setup()>
310::<spec.harness.analyzer.CallbackAnalyzerExample: void tearDown()>
311::<spec.harness.analyzer.CallbackAnalyzerExample: void callbackMethod(int)>
312::<spec.harness.analyzer.TempSensor: void <init>(java.lang.String,int)>
313::<spec.harness.analyzer.TempSensor: int writeMeter(java.lang.String)>
314::<spec.harness.analyzer.TempSensor: java.lang.String readMeter()>
315::<spec.harness.analyzer.TempSensor: void endSocConnection()>
316::<spec.harness.analyzer.TempSensor: void startRun(int,int,int)>
317::<spec.harness.analyzer.TempSensor: void go()>
318::<spec.harness.analyzer.TempSensor: void stop()>
319::<spec.harness.analyzer.TempSensor: java.util.HashMap reportRun(java.lang.String)>
320::<spec.harness.analyzer.TempSensor: java.lang.Boolean sensorCompliant()>
321::<spec.harness.analyzer.TempSensor: java.lang.String sensorPtdVersion()>
322::<spec.harness.analyzer.TempSensor: java.lang.String sensorPtdHostOs()>
323::<spec.harness.analyzer.TempSensor: java.lang.String sensorPtdMode()>
324::<spec.harness.analyzer.TempSensor: void <clinit>()>
325::<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void <init>()>
326::<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void register(spec.harness.analyzer.CallbackAnalyzerExample)>
327::<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void deregister(spec.harness.analyzer.CallbackAnalyzerExample)>
328::<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void run()>
329::<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void <clinit>()>
330::<spec.harness.analyzer.PollingAnalyzerExample: void <init>()>
331::<spec.harness.analyzer.PollingAnalyzerExample: void execute(long)>
332::<spec.harness.analyzer.HeapMemoryFreeAnalyzer: void <init>()>
333::<spec.harness.analyzer.HeapMemoryFreeAnalyzer: void execute(long)>
334::<spec.harness.analyzer.PowerAnalyzer: void setupAnalyzerClass()>
335::<spec.harness.analyzer.PowerAnalyzer: void tearDownAnalyzerClass()>
336::<spec.harness.analyzer.PowerAnalyzer: void <init>()>
337::<spec.harness.analyzer.PowerAnalyzer: void setup()>
338::<spec.harness.analyzer.PowerAnalyzer: void startMeasurementInterval()>
339::<spec.harness.analyzer.PowerAnalyzer: void endMeasurementInterval()>
340::<spec.harness.analyzer.PowerAnalyzer: void tearDown()>
341::<spec.harness.analyzer.PowerMeter: void <init>(java.lang.String,int)>
342::<spec.harness.analyzer.PowerMeter: int writeMeter(java.lang.String)>
343::<spec.harness.analyzer.PowerMeter: java.lang.String readMeter()>
344::<spec.harness.analyzer.PowerMeter: void endSocConnection()>
345::<spec.harness.analyzer.PowerMeter: void startRun(int,int,int)>
346::<spec.harness.analyzer.PowerMeter: void go()>
347::<spec.harness.analyzer.PowerMeter: void stop()>
348::<spec.harness.analyzer.PowerMeter: java.util.HashMap reportRun(java.lang.String)>
349::<spec.harness.analyzer.PowerMeter: java.lang.Boolean meterCompliant()>
350::<spec.harness.analyzer.PowerMeter: java.lang.String meterPtdVersion()>
351::<spec.harness.analyzer.PowerMeter: java.lang.String meterPtdHostOs()>
352::<spec.harness.analyzer.PowerMeter: java.lang.String meterPtdMode()>
353::<spec.harness.analyzer.PowerMeter: void <clinit>()>
354::<spec.harness.analyzer.HeapMemoryTotalAnalyzer$HeapMemoryTotal: void <init>(long,long)>
355::<spec.harness.analyzer.HeapMemoryTotalAnalyzer$HeapMemoryTotal: java.lang.String getName()>
356::<spec.harness.analyzer.HeapMemoryTotalAnalyzer$HeapMemoryTotal: java.lang.String getUnit()>
357::<spec.harness.analyzer.TYInfo: void <init>(long,long)>
358::<spec.harness.analyzer.AnalyzerBase: void <init>()>
359::<spec.harness.analyzer.AnalyzerBase: void report(spec.harness.analyzer.TYInfo)>
360::<spec.harness.analyzer.AnalyzerBase: void report(spec.harness.analyzer.AnalyzerResult)>
361::<spec.harness.analyzer.AnalyzerBase: boolean isTimedRun()>
362::<spec.harness.analyzer.AnalyzerBase: long getBenchmarkDuration()>
363::<spec.harness.analyzer.AnalyzerBase: java.lang.String getBenchmarkName()>
364::<spec.harness.analyzer.AnalyzerBase: long getNoOps()>
365::<spec.harness.analyzer.AnalyzerBase: void addError(java.lang.String)>
366::<spec.harness.analyzer.AnalyzerBase: void addErrorToSuiteResult(java.lang.String)>
367::<spec.harness.analyzer.AnalyzerBase: void addViolationToSuiteResult(java.lang.String)>
368::<spec.harness.analyzer.CallbackAnalyzerExample$NumberResult: void <init>(double,java.lang.String,java.lang.String)>
369::<spec.harness.Util: void <init>()>
370::<spec.harness.Util: long getTimeProperty(java.lang.String,java.lang.String)>
371::<spec.harness.Util: long getTimeAsMillis(java.lang.String)>
372::<spec.harness.Util: long getTimeAsSeconds(java.lang.String)>
373::<spec.harness.Util: int getHwtCalcProperty(java.lang.String,java.lang.String)>
374::<spec.harness.Util: boolean getBoolProperty(java.lang.String,java.lang.String)>
375::<spec.harness.Util: int getIntProperty(java.lang.String,java.lang.String)>
376::<spec.harness.Util: long getLongProperty(java.lang.String,java.lang.String)>
377::<spec.harness.Util: java.lang.String getPropertyHelper(java.util.Properties,java.lang.String,java.lang.String)>
378::<spec.harness.Util: java.lang.String getProperty(java.lang.String,java.lang.String)>
379::<spec.harness.Util: java.lang.String getDefaultProperty(java.lang.String,java.lang.String)>
380::<spec.harness.Util: java.lang.String getUserProperty(java.lang.String,java.lang.String)>
381::<spec.harness.Util: void printProperties(java.util.Properties)>
382::<spec.harness.Util: void printProperties(java.io.PrintStream,java.util.Properties)>
383::<spec.harness.Util: void printReqs(java.util.HashMap)>
384::<spec.harness.Util: void printProperties(java.io.PrintStream,java.util.HashMap)>
385::<spec.harness.Util: boolean sleep(long)>
386::<spec.harness.Util: boolean isScimarkAndNotMonteCarlo(java.lang.String)>
387::<spec.harness.Util: java.lang.String getNextRawFileInDir()>
388::<spec.harness.Util: boolean createDir(java.io.File)>
389::<spec.harness.Util: java.lang.String getNextRawFileInDir(java.io.File)>
390::<spec.harness.Util: boolean isBenchmark(java.lang.String)>
391::<spec.harness.Util: java.lang.String[] parseDefaultJvmArgs()>
392::<spec.harness.Util: java.lang.String getSizeFromHeapArg(java.lang.String)>
393::<spec.harness.Context$1: void <init>()>
394::<spec.harness.BenchmarkThread: void <init>(spec.harness.results.BenchmarkResult,int)>
395::<spec.harness.BenchmarkThread: java.lang.String[] getArgs()>
396::<spec.harness.BenchmarkThread: void run()>
397::<spec.harness.BenchmarkThread: boolean executeIteration()>
398::<spec.harness.BenchmarkThread: spec.harness.results.LoopResult runLoop(spec.harness.results.IterationResult)>
399::<spec.harness.KnownIssues: void <init>()>
400::<spec.harness.KnownIssues: void printKnownIssuesInfo()>
401::<spec.harness.KnownIssues: void printKnownIssueXmlTransformRace()>
402::<spec.harness.KnownIssues: void printKnownIssueJavacVersion()>
403::<spec.harness.KnownIssues: void printKnownIssueutOfMemoryError()>
404::<spec.harness.KnownIssues: void <clinit>()>
405::<spec.harness.results.BenchmarkResult: void <init>()>
406::<spec.harness.results.BenchmarkResult: void setIterationTime(long)>
407::<spec.harness.results.BenchmarkResult: java.lang.String durDesc()>
408::<spec.harness.results.BenchmarkResult: double getScore()>
409::<spec.harness.results.BenchmarkResult: java.lang.String resultString()>
410::<spec.harness.results.BenchmarkResult: boolean isValid()>
411::<spec.harness.results.BenchmarkResult: java.util.List getAllErrors(java.lang.String)>
412::<spec.harness.results.BenchmarkResult: void headerToXml(java.io.PrintStream,int)>
413::<spec.harness.results.BenchmarkResult: void toXml(java.io.PrintStream,int)>
414::<spec.harness.results.BenchmarkResult: void middleToXml(java.io.PrintStream,int)>
415::<spec.harness.results.BenchmarkResult: void footerToXml(java.io.PrintStream,int)>
416::<spec.harness.results.TestResult: void <init>()>
417::<spec.harness.results.TestResult: void addError(java.lang.String)>
418::<spec.harness.results.TestResult: void printErrorsToXml(java.io.PrintStream,int)>
419::<spec.harness.results.TestResult: void ptxAttrib(java.io.PrintStream,int,java.lang.String,java.lang.String,boolean,java.lang.String)>
420::<spec.harness.results.TestResult: void ptxAttrib(java.io.PrintStream,int,java.lang.String,long,boolean,java.lang.String)>
421::<spec.harness.results.TestResult: void ptxAttrib(java.io.PrintStream,int,java.lang.String,double,boolean,java.lang.String)>
422::<spec.harness.results.TestResult: void ptxAttrib(java.io.PrintStream,int,java.lang.String,boolean,boolean,java.lang.String)>
423::<spec.harness.results.TestResult: void ptxAttrib(java.io.PrintStream,int,java.lang.String,java.lang.String[],boolean,java.lang.String)>
424::<spec.harness.results.TestResult: void ptxElement(java.io.PrintStream,int,java.lang.String,java.lang.String)>
425::<spec.harness.results.TestResult: void ptxElementOpen(java.io.PrintStream,int,java.lang.String)>
426::<spec.harness.results.TestResult: void ptxElementStartOpen(java.io.PrintStream,int,java.lang.String,boolean)>
427::<spec.harness.results.TestResult: void ptxElementClose(java.io.PrintStream,int,java.lang.String)>
428::<spec.harness.results.TestResult: java.lang.String ptxArrToValue(java.lang.String[])>
429::<spec.harness.results.TestResult: void ptxXmlHeader(java.io.PrintStream)>
430::<spec.harness.results.TestResult: java.lang.String doubleAsRes(double)>
431::<spec.harness.results.TestResult: java.lang.String millisAsSec(long)>
432::<spec.harness.results.TestResult: java.lang.String getIndent(int)>
433::<spec.harness.results.TestResult: java.lang.String correctContent(java.lang.String,boolean)>
434::<spec.harness.results.TestResult: void <clinit>()>
435::<spec.harness.results.LoopResult: void <init>()>
436::<spec.harness.results.LoopResult: void toXml(java.io.PrintStream,int)>
437::<spec.harness.results.LoopResult: boolean isValid()>
438::<spec.harness.results.LoopResult: java.util.List getAllErrors(java.lang.String)>
439::<spec.harness.results.SuiteResult: void <init>()>
440::<spec.harness.results.SuiteResult: void addJvmInfo(java.lang.String,java.util.Properties,java.lang.String)>
441::<spec.harness.results.SuiteResult: void addJvmInfo(java.lang.String,java.lang.String)>
442::<spec.harness.results.SuiteResult: void addRunInfo(java.lang.String,java.util.Properties,java.lang.String)>
443::<spec.harness.results.SuiteResult: void addSwInfo(java.lang.String,java.util.Properties,java.lang.String)>
444::<spec.harness.results.SuiteResult: void addHwInfo(java.lang.String,java.util.Properties,java.lang.String)>
445::<spec.harness.results.SuiteResult: void addViolation(java.lang.String)>
446::<spec.harness.results.SuiteResult: void addConfiguration(java.lang.String)>
447::<spec.harness.results.SuiteResult: boolean isValid()>
448::<spec.harness.results.SuiteResult: java.util.List getAllErrors(java.lang.String)>
449::<spec.harness.results.SuiteResult: void headerToXml(java.io.PrintStream,int)>
450::<spec.harness.results.SuiteResult: void toXml(java.io.PrintStream,int)>
451::<spec.harness.results.SuiteResult: void footerToXml(java.io.PrintStream,int)>
452::<spec.harness.results.SuiteResult: java.lang.String getCommandLineOptions()>
453::<spec.harness.results.IterationResult: void <init>()>
454::<spec.harness.results.IterationResult: boolean incNumberBmThreadsDone()>
455::<spec.harness.results.IterationResult: java.lang.String durDesc()>
456::<spec.harness.results.IterationResult: java.lang.String resultString(java.lang.String)>
457::<spec.harness.results.IterationResult: double getScore()>
458::<spec.harness.results.IterationResult: boolean isValid()>
459::<spec.harness.results.IterationResult: java.util.List getAllErrors(java.lang.String)>
460::<spec.harness.results.IterationResult: void toXml(java.io.PrintStream,int)>
461::<spec.harness.ProgramRunner: void <init>(spec.harness.results.BenchmarkResult,int)>
462::<spec.harness.ProgramRunner: void run()>
463::<spec.harness.ProgramRunner: boolean setupBenchmarkMethods()>
464::<spec.harness.ProgramRunner: spec.harness.SpecJVMBenchmarkBase createBmInstance(spec.harness.results.BenchmarkResult,int)>
465::<spec.harness.ProgramRunner: java.lang.String invokeBmTestTypeMethod()>
466::<spec.harness.ProgramRunner: void invokeBmSetupBenchmark()>
467::<spec.harness.ProgramRunner: void invokeBmSetupIteration()>
468::<spec.harness.ProgramRunner: void invokeBmTearDownIteration()>
469::<spec.harness.ProgramRunner: void invokeBmTearDownBenchmark()>
470::<spec.harness.ProgramRunner: boolean runBenchmark()>
471::<spec.harness.ProgramRunner: boolean runIteration(java.lang.String,spec.harness.results.IterationResult,spec.harness.results.BenchmarkResult)>
472::<spec.harness.ProgramRunner: java.lang.String getStackTraceAsString(java.lang.Throwable)>
473::<spec.harness.ProgramRunner: int getNoBmHarnessThreads(spec.harness.results.BenchmarkResult)>
474::<spec.harness.ProgramRunner: void pause(long)>
475::<spec.harness.ProgramRunner: void interruptProgramRunner()>
476::<spec.harness.ProgramRunner: void endOfMeasurementInterval(long)>
477::<spec.harness.ProgramRunner: void <clinit>()>
478::<spec.harness.StopBenchmarkException: void <init>(java.lang.String)>
479::<spec.harness.StopBenchmarkException: void <init>(java.lang.String,java.lang.Throwable)>
480::<spec.harness.Constants: void <init>()>
481::<spec.harness.VMVersionTest: void <init>()>
482::<spec.harness.VMVersionTest: java.lang.String getVersionInfo()>
483::<spec.harness.VMVersionTest: void main(java.lang.String[])>
