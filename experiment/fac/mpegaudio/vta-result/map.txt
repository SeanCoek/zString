0::<spec.io.ValidityCheckOutputStream: void <init>(java.lang.String)>
1::<spec.io.ValidityCheckOutputStream: boolean validityCheck(spec.harness.results.LoopResult)>
2::<spec.io.ValidityCheckOutputStream: void validityCheck2(spec.harness.results.LoopResult)>
3::<spec.io.ValidityCheckOutputStream: void handleValidationFailure(spec.harness.results.LoopResult,int,java.lang.String,java.lang.String)>
4::<spec.io.ValidityCheckOutputStream: java.lang.String getValidityFileName(java.lang.String)>
5::<spec.io.ValidityCheckOutputStream: void createValidityFile()>
6::<spec.io.ValidityCheckOutputStream: void <clinit>()>
7::<spec.io.FileCache$CachedFile: void <init>(spec.io.FileCache,java.lang.String)>
8::<spec.io.FileCache$CachedFile: org.xml.sax.InputSource asNewInputSource()>
9::<spec.io.FileCache$CachedFile: javax.xml.transform.stream.StreamSource asNewStreamSource()>
10::<spec.io.FileCache: void <init>()>
11::<spec.io.FileCache: java.io.ByteArrayInputStream getStream(java.lang.String)>
12::<spec.io.FileCache: void clearCache()>
13::<spec.io.FileCache: byte[] getByteArray(java.lang.String)>
14::<spec.io.FileCache: void loadFile(java.lang.String)>
15::<spec.benchmarks.mpegaudio.Harness: void <init>()>
16::<spec.benchmarks.mpegaudio.Harness: java.lang.String getName(int)>
17::<spec.benchmarks.mpegaudio.Harness: void run(int)>
18::<spec.benchmarks.mpegaudio.Harness: long decode(java.lang.String)>
19::<spec.benchmarks.mpegaudio.Harness: void inst_main(int)>
20::<spec.benchmarks.mpegaudio.Main: long runBenchmark(int)>
21::<spec.benchmarks.mpegaudio.Main: void <init>(spec.harness.results.BenchmarkResult,int)>
22::<spec.benchmarks.mpegaudio.Main: void main(java.lang.String[])>
23::<spec.benchmarks.mpegaudio.Main: void harnessMain()>
24::<spec.benchmarks.mpegaudio.Main: void <clinit>()>
25::<spec.reporter.BenchmarkRecord: void <init>(java.lang.String,int)>
26::<spec.reporter.BenchmarkRecord: spec.reporter.BenchmarkRecord$IterationRecord addIterationRecord(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
27::<spec.reporter.BenchmarkRecord: void printAllRecordedInfo()>
28::<spec.reporter.BenchmarkRecord: boolean isValidRun()>
29::<spec.reporter.ReportGenerator$Pair: void <init>(spec.reporter.ReportGenerator,java.lang.Object,java.lang.Object)>
30::<spec.reporter.BenchmarkGroupRecords$BenchmarkResultsIterator: void <init>(spec.reporter.BenchmarkGroupRecords)>
31::<spec.reporter.BenchmarkGroupRecords$BenchmarkResultsIterator: spec.reporter.BenchmarkRecord next()>
32::<spec.reporter.BenchmarkRecord$IterationRecord: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
33::<spec.reporter.BenchmarkRecord$IterationRecord: void addError(java.lang.String)>
34::<spec.reporter.PlainWriter: void <init>(java.lang.String)>
35::<spec.reporter.PlainWriter: void handleIterRecord(spec.reporter.BenchmarkRecord)>
36::<spec.reporter.PlainWriter: void handleBenchmarkRecord(spec.reporter.BenchmarkRecord)>
37::<spec.reporter.PlainWriter: void insertRecord(java.lang.String,java.lang.String)>
38::<spec.reporter.PlainWriter: void putHat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
39::<spec.reporter.PlainWriter: void putSummaryTable(java.lang.String,java.util.TreeMap)>
40::<spec.reporter.PlainWriter: void insertRecords(java.util.ArrayList)>
41::<spec.reporter.ReportGenerator: void <init>(java.lang.String,boolean,boolean,boolean,boolean)>
42::<spec.reporter.ReportGenerator: void handleBenchmarksResults(org.w3c.dom.Node)>
43::<spec.reporter.ReportGenerator: void collectBmConfiguration(spec.reporter.BenchmarkRecord,org.w3c.dom.NamedNodeMap)>
44::<spec.reporter.ReportGenerator: void handleBenchmarkResult(org.w3c.dom.Node)>
45::<spec.reporter.ReportGenerator: void generateHat(spec.reporter.Writer,java.lang.String,java.lang.String,java.lang.String)>
46::<spec.reporter.ReportGenerator: void generateConfigTable(spec.reporter.Writer)>
47::<spec.reporter.ReportGenerator: java.util.ArrayList findProperties(java.lang.String,java.lang.String)>
48::<spec.reporter.ReportGenerator: void generateViolationsTable(spec.reporter.Writer)>
49::<spec.reporter.ReportGenerator: void generateDetailsTable(spec.reporter.Writer)>
50::<spec.reporter.ReportGenerator: void generateCopyRightStatement(spec.reporter.Writer)>
51::<spec.reporter.ReportGenerator: java.lang.String generateReport()>
52::<spec.reporter.ReportGenerator: void generateInfoTable(org.w3c.dom.Node,spec.reporter.Writer,java.lang.String[])>
53::<spec.reporter.ReportGenerator: java.lang.String insertBRTag(java.lang.String,spec.reporter.Writer)>
54::<spec.reporter.ReportGenerator: void handleIterationResult(spec.reporter.BenchmarkRecord,spec.reporter.BenchmarkChart,org.w3c.dom.Node)>
55::<spec.reporter.ReportGenerator: boolean checkName(java.lang.String,org.w3c.dom.Node)>
56::<spec.reporter.ReportGenerator: void handleLoopsNode(spec.reporter.BenchmarkRecord$IterationRecord,spec.reporter.BenchmarkChart,org.w3c.dom.Node)>
57::<spec.reporter.ReportGenerator: void checkErrors(spec.reporter.BenchmarkRecord$IterationRecord,org.w3c.dom.Node)>
58::<spec.reporter.ReportGenerator: void createSummary(java.lang.String,java.lang.String,java.lang.String)>
59::<spec.reporter.ReportGenerator: void printConstantProp(java.io.PrintStream,java.lang.String)>
60::<spec.reporter.ReportGenerator: void printConstantProp(java.io.PrintStream,java.lang.String,java.lang.String)>
61::<spec.reporter.ReportGenerator: void createSubFile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
62::<spec.reporter.ReportGenerator: void handleAnalyzersNode(spec.reporter.BenchmarkChart,org.w3c.dom.Node)>
63::<spec.reporter.ReportGenerator: boolean isCompliantRun()>
64::<spec.reporter.ReportGenerator: java.lang.String main2(java.lang.String[])>
65::<spec.reporter.ReportGenerator: void main(java.lang.String[])>
66::<spec.reporter.ReportGenerator: void <clinit>()>
67::<spec.reporter.SPECSubmissionProcessor: void <init>()>
68::<spec.reporter.SPECSubmissionProcessor: void unzipFile(java.lang.String,java.lang.String)>
69::<spec.reporter.SPECSubmissionProcessor: java.lang.String getResultFile(java.lang.String,java.lang.String)>
70::<spec.reporter.SPECSubmissionProcessor: void splitMergedRawFile(java.lang.String)>
71::<spec.reporter.SPECSubmissionProcessor: void createMergedSubFile()>
72::<spec.reporter.SPECSubmissionProcessor: void createResultFile(java.util.Properties)>
73::<spec.reporter.SPECSubmissionProcessor: void main(java.lang.String[])>
74::<spec.reporter.SPECSubmissionProcessor: void <clinit>()>
75::<spec.reporter.BenchmarkGroupRecords$BenchmarkGroupRecord: void <init>(spec.reporter.BenchmarkRecord)>
76::<spec.reporter.BenchmarkGroupRecords$BenchmarkGroupRecord: void <init>(java.lang.String)>
77::<spec.reporter.BenchmarkGroupRecords$BenchmarkGroupRecord: void addBenchmarkRecord(spec.reporter.BenchmarkRecord)>
78::<spec.reporter.BenchmarkGroupRecords$BenchmarkGroupRecord: double computeScore()>
79::<spec.reporter.SPECSubmissionPreparer: void <init>()>
80::<spec.reporter.SPECSubmissionPreparer: void prepareFiles(java.lang.String[])>
81::<spec.reporter.SPECSubmissionPreparer: java.lang.String mergeFiles(java.io.File[])>
82::<spec.reporter.SPECSubmissionPreparer: void zipFile(java.lang.String)>
83::<spec.reporter.SPECSubmissionPreparer: void main(java.lang.String[])>
84::<spec.reporter.Writer: void <init>(java.lang.String)>
85::<spec.reporter.Writer: spec.reporter.Writer getInstance(java.lang.String,java.lang.String)>
86::<spec.reporter.Reporter: void <init>()>
87::<spec.reporter.Reporter: java.lang.String main2(java.lang.String[])>
88::<spec.reporter.Reporter: void main(java.lang.String[])>
89::<spec.reporter.BenchmarkGroupRecords: void <init>()>
90::<spec.reporter.BenchmarkGroupRecords: void addNewBenchmarkRecord(spec.reporter.BenchmarkRecord)>
91::<spec.reporter.BenchmarkGroupRecords: double computeCompositeScore()>
92::<spec.reporter.BenchmarkGroupRecords: void updateGroupRecord(java.lang.String,spec.reporter.BenchmarkRecord)>
93::<spec.reporter.Utils: void <init>()>
94::<spec.reporter.Utils: void createBmResultGraph(spec.reporter.BenchmarkRecord)>
95::<spec.reporter.Utils: void initDescriptions()>
96::<spec.reporter.Utils: java.lang.String getDescription(java.lang.String)>
97::<spec.reporter.Utils: java.util.HashMap initColorMap()>
98::<spec.reporter.Utils: void generateMainChart(double,java.util.TreeMap)>
99::<spec.reporter.Utils: boolean isCheck(spec.reporter.BenchmarkRecord)>
100::<spec.reporter.Utils: boolean isScimarkMonteCarlo(spec.reporter.BenchmarkRecord)>
101::<spec.reporter.Utils: java.lang.String getImageName(java.lang.String)>
102::<spec.reporter.Utils: java.lang.String getFullImageName(java.lang.String)>
103::<spec.reporter.Utils: java.lang.String formatScore(double)>
104::<spec.reporter.Utils: java.lang.String formatScore(double,java.lang.String)>
105::<spec.reporter.Utils: java.lang.String formatScore(double,java.lang.String,java.lang.String)>
106::<spec.reporter.Utils: boolean isValidScore(java.lang.Double)>
107::<spec.reporter.Utils: boolean isValidScore(double)>
108::<spec.reporter.Utils: void <clinit>()>
109::<spec.reporter.BenchmarkChart: void <init>(java.lang.String)>
110::<spec.reporter.BenchmarkChart: void addTotalHeapInfo(long,long)>
111::<spec.reporter.BenchmarkChart: void addFreeHeapInfo(long,long)>
112::<spec.reporter.BenchmarkChart: void addAnalyzerReport(java.lang.String,java.lang.String,long,long)>
113::<spec.reporter.BenchmarkChart: void addAxis(java.lang.String,java.lang.String,org.jfree.data.xy.XYSeries)>
114::<spec.reporter.BenchmarkChart: void addTimeInfo(java.lang.String,long,long)>
115::<spec.reporter.BenchmarkChart: void addTimeInfo(long,long)>
116::<spec.reporter.BenchmarkChart: void addMarker(long,java.lang.String)>
117::<spec.reporter.BenchmarkChart: void setMemoryAxis()>
118::<spec.reporter.BenchmarkChart: void buildJPEG()>
119::<spec.reporter.BenchmarkChart: void updateColors()>
120::<spec.reporter.HTMLWriter: java.lang.String[] initIndents()>
121::<spec.reporter.HTMLWriter: void <init>(java.lang.String)>
122::<spec.reporter.HTMLWriter: void startTable(java.lang.String,boolean,boolean,boolean)>
123::<spec.reporter.HTMLWriter: void insertImgData(java.lang.String,java.lang.String,int)>
124::<spec.reporter.HTMLWriter: void startDetailsTable()>
125::<spec.reporter.HTMLWriter: void insertData(java.lang.String)>
126::<spec.reporter.HTMLWriter: void insertData(java.lang.String,int)>
127::<spec.reporter.HTMLWriter: void insertRecord(java.lang.String,java.lang.String)>
128::<spec.reporter.HTMLWriter: void insertHeaderData(java.lang.String,java.lang.String,boolean,int,int,java.lang.String)>
129::<spec.reporter.HTMLWriter: void insertHeaderData(java.lang.String,java.lang.String,boolean,int,int)>
130::<spec.reporter.HTMLWriter: void insertHeaderRecord(java.lang.String,java.lang.String,boolean,int,int)>
131::<spec.reporter.HTMLWriter: void startRecord()>
132::<spec.reporter.HTMLWriter: void endRecord()>
133::<spec.reporter.HTMLWriter: void endAndStartRecord()>
134::<spec.reporter.HTMLWriter: void putColumnsSpec(int[])>
135::<spec.reporter.HTMLWriter: void putSummaryTable(java.lang.String,java.util.TreeMap)>
136::<spec.reporter.HTMLWriter: void putHat(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
137::<spec.reporter.HTMLWriter: void endData()>
138::<spec.reporter.HTMLWriter: void startData()>
139::<spec.reporter.HTMLWriter: void startRecordAndData()>
140::<spec.reporter.HTMLWriter: void putTHEAD(boolean)>
141::<spec.reporter.HTMLWriter: void putTBODY(boolean)>
142::<spec.reporter.HTMLWriter: void putTABLE(boolean,java.lang.String)>
143::<spec.reporter.HTMLWriter: void endRecordAndData()>
144::<spec.reporter.HTMLWriter: void endAndStartRecordAndData()>
145::<spec.reporter.HTMLWriter: void endAndStartData()>
146::<spec.reporter.HTMLWriter: void endTable(boolean)>
147::<spec.reporter.HTMLWriter: void putString(java.lang.String)>
148::<spec.reporter.HTMLWriter: void handleIterRecord(java.util.ArrayList,int)>
149::<spec.reporter.HTMLWriter: java.lang.String createConfRecord(java.lang.String[])>
150::<spec.reporter.HTMLWriter: void handleBenchmarkRecord(spec.reporter.BenchmarkRecord)>
151::<spec.reporter.HTMLWriter: java.lang.String insertBRTags(java.util.ArrayList)>
152::<spec.reporter.HTMLWriter: void insertRecords(java.util.ArrayList)>
153::<spec.reporter.HTMLWriter: void startReport()>
154::<spec.reporter.HTMLWriter: void endReport()>
155::<spec.harness.Context: void <init>()>
156::<spec.harness.Context: java.io.PrintStream getOut()>
157::<spec.harness.Context: java.lang.String getResourceDirFor(java.lang.Class)>
158::<spec.harness.Context: java.lang.String staticToString()>
159::<spec.harness.Context: void closeXmlResultFile()>
160::<spec.harness.Context: void <clinit>()>
161::<spec.harness.Launch: void <init>()>
162::<spec.harness.Launch: void runBenchmarkSuite(java.util.Properties)>
163::<spec.harness.Launch: java.lang.String openResultFile(java.util.Properties)>
164::<spec.harness.Launch: void closeResultFile(java.lang.String)>
165::<spec.harness.Launch: void closeSubmissionFile(java.lang.String)>
166::<spec.harness.Launch: java.lang.String createReport(java.lang.String)>
167::<spec.harness.Launch: java.lang.String createReport(java.lang.String[])>
168::<spec.harness.Launch: spec.harness.results.BenchmarkResult runOneBenchmark(java.lang.String,int,int,int)>
169::<spec.harness.Launch: java.lang.String checkBenchmarkKit()>
170::<spec.harness.Launch: void setupContext()>
171::<spec.harness.Launch: boolean setupSimple(java.lang.String[])>
172::<spec.harness.Launch: void main(java.lang.String[])>
173::<spec.harness.Launch: void <clinit>()>
174::<spec.harness.SpecJVMBenchmarkBase: void <init>(spec.harness.results.BenchmarkResult,int)>
175::<spec.harness.SpecJVMBenchmarkBase: void runSimple(java.lang.Class,java.lang.String[])>
176::<spec.harness.CommandLineParser: void <init>()>
177::<spec.harness.CommandLineParser: void version(java.io.PrintStream)>
178::<spec.harness.CommandLineParser: boolean parseArgs(java.lang.String[],java.util.Properties)>
179::<spec.harness.Configuration: void <init>()>
180::<spec.harness.Configuration: void setupProp(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
181::<spec.harness.Configuration: void setupProp(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
182::<spec.harness.Configuration: void setupProp(java.lang.String,java.lang.String,java.lang.String)>
183::<spec.harness.Configuration: java.lang.String getFixedOperationsProp(java.lang.String)>
184::<spec.harness.Configuration: void setupProperties()>
185::<spec.harness.Configuration: void checkSetup(spec.harness.results.SuiteResult)>
186::<spec.harness.Configuration: void validateProperty(spec.harness.results.SuiteResult,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
187::<spec.harness.Configuration: java.util.Properties readProperties(java.lang.String)>
188::<spec.harness.Configuration: void addViolation(spec.harness.results.SuiteResult,java.lang.String,java.lang.String)>
189::<spec.harness.Configuration: void addConfigurationDetail(spec.harness.results.SuiteResult,java.lang.String,java.lang.String)>
190::<spec.harness.Configuration: boolean checkLauncher(java.lang.String)>
191::<spec.harness.Configuration: void setupReportInfo(spec.harness.results.SuiteResult,java.util.Properties)>
192::<spec.harness.analyzer.AnalyzerResult: void <init>(double)>
193::<spec.harness.analyzer.AnalyzerResult: java.lang.String getDescription()>
194::<spec.harness.analyzer.TempAnalyzer: void setupAnalyzerClass()>
195::<spec.harness.analyzer.TempAnalyzer: void tearDownAnalyzerClass()>
196::<spec.harness.analyzer.TempAnalyzer: void <init>()>
197::<spec.harness.analyzer.TempAnalyzer: void startMeasurementInterval()>
198::<spec.harness.analyzer.TempAnalyzer: void endMeasurementInterval()>
199::<spec.harness.analyzer.TempAnalyzer: void tearDown()>
200::<spec.harness.analyzer.PowerAnalyzer$PowerConsumtionResult: void <init>(double,java.lang.String,java.lang.String)>
201::<spec.harness.analyzer.TempAnalyzer$TemperatureResult: void <init>(double,java.lang.String,java.lang.String)>
202::<spec.harness.analyzer.PollingAnalyzerExample$NumberOfOperations: void <init>(long,long)>
203::<spec.harness.analyzer.PollingAnalyzerExample$NumberOfOperations: java.lang.String getName()>
204::<spec.harness.analyzer.PollingAnalyzerExample$NumberOfOperations: java.lang.String getUnit()>
205::<spec.harness.analyzer.HeapMemoryTotalAnalyzer: void <init>()>
206::<spec.harness.analyzer.HeapMemoryTotalAnalyzer: void execute(long)>
207::<spec.harness.analyzer.AnalyzersRunner: void <init>(spec.harness.results.IterationResult,long)>
208::<spec.harness.analyzer.AnalyzersRunner: void run()>
209::<spec.harness.analyzer.AnalyzersRunner: boolean executeAnalyzers()>
210::<spec.harness.analyzer.AnalyzersRunner: void setupAnalyzerClasses(java.lang.String)>
211::<spec.harness.analyzer.AnalyzersRunner: void tearDownAnalyzerClasses()>
212::<spec.harness.analyzer.AnalyzersRunner: boolean internalSetupAnalyzers()>
213::<spec.harness.analyzer.AnalyzersRunner: void invokeStartMeasurementIntervalForAnalyzers()>
214::<spec.harness.analyzer.AnalyzersRunner: void invokeEndMeasurementIntervalForAnalyzers()>
215::<spec.harness.analyzer.AnalyzersRunner: void internalTearDownAnalyzers()>
216::<spec.harness.analyzer.AnalyzersRunner: void setupAnalyzers(spec.harness.results.IterationResult,long)>
217::<spec.harness.analyzer.AnalyzersRunner: void tearDownAnalyzers(spec.harness.results.IterationResult)>
218::<spec.harness.analyzer.AnalyzersRunner: void <clinit>()>
219::<spec.harness.analyzer.CallbackAnalyzerExample$NumberInfo: void <init>(long,long)>
220::<spec.harness.analyzer.CallbackAnalyzerExample$NumberInfo: java.lang.String getName()>
221::<spec.harness.analyzer.CallbackAnalyzerExample$NumberInfo: java.lang.String getUnit()>
222::<spec.harness.analyzer.HeapMemoryFreeAnalyzer$HeapMemoryFree: void <init>(long,long)>
223::<spec.harness.analyzer.HeapMemoryFreeAnalyzer$HeapMemoryFree: java.lang.String getName()>
224::<spec.harness.analyzer.HeapMemoryFreeAnalyzer$HeapMemoryFree: java.lang.String getUnit()>
225::<spec.harness.analyzer.CallbackAnalyzerExample: void <init>()>
226::<spec.harness.analyzer.CallbackAnalyzerExample: void setup()>
227::<spec.harness.analyzer.CallbackAnalyzerExample: void tearDown()>
228::<spec.harness.analyzer.CallbackAnalyzerExample: void callbackMethod(int)>
229::<spec.harness.analyzer.TempSensor: void <init>(java.lang.String,int)>
230::<spec.harness.analyzer.TempSensor: java.lang.String readMeter()>
231::<spec.harness.analyzer.TempSensor: void endSocConnection()>
232::<spec.harness.analyzer.TempSensor: void startRun(int,int,int)>
233::<spec.harness.analyzer.TempSensor: void go()>
234::<spec.harness.analyzer.TempSensor: void stop()>
235::<spec.harness.analyzer.TempSensor: java.util.HashMap reportRun(java.lang.String)>
236::<spec.harness.analyzer.TempSensor: java.lang.Boolean sensorCompliant()>
237::<spec.harness.analyzer.TempSensor: void <clinit>()>
238::<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void <init>()>
239::<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void register(spec.harness.analyzer.CallbackAnalyzerExample)>
240::<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void deregister(spec.harness.analyzer.CallbackAnalyzerExample)>
241::<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void run()>
242::<spec.harness.analyzer.CallbackAnalyzerExample$TheNumberGenerator: void <clinit>()>
243::<spec.harness.analyzer.PollingAnalyzerExample: void <init>()>
244::<spec.harness.analyzer.PollingAnalyzerExample: void execute(long)>
245::<spec.harness.analyzer.HeapMemoryFreeAnalyzer: void <init>()>
246::<spec.harness.analyzer.HeapMemoryFreeAnalyzer: void execute(long)>
247::<spec.harness.analyzer.PowerAnalyzer: void setupAnalyzerClass()>
248::<spec.harness.analyzer.PowerAnalyzer: void tearDownAnalyzerClass()>
249::<spec.harness.analyzer.PowerAnalyzer: void <init>()>
250::<spec.harness.analyzer.PowerAnalyzer: void startMeasurementInterval()>
251::<spec.harness.analyzer.PowerAnalyzer: void endMeasurementInterval()>
252::<spec.harness.analyzer.PowerAnalyzer: void tearDown()>
253::<spec.harness.analyzer.PowerMeter: void <init>(java.lang.String,int)>
254::<spec.harness.analyzer.PowerMeter: java.lang.String readMeter()>
255::<spec.harness.analyzer.PowerMeter: void endSocConnection()>
256::<spec.harness.analyzer.PowerMeter: void startRun(int,int,int)>
257::<spec.harness.analyzer.PowerMeter: void go()>
258::<spec.harness.analyzer.PowerMeter: void stop()>
259::<spec.harness.analyzer.PowerMeter: java.util.HashMap reportRun(java.lang.String)>
260::<spec.harness.analyzer.PowerMeter: java.lang.Boolean meterCompliant()>
261::<spec.harness.analyzer.PowerMeter: void <clinit>()>
262::<spec.harness.analyzer.HeapMemoryTotalAnalyzer$HeapMemoryTotal: void <init>(long,long)>
263::<spec.harness.analyzer.HeapMemoryTotalAnalyzer$HeapMemoryTotal: java.lang.String getName()>
264::<spec.harness.analyzer.HeapMemoryTotalAnalyzer$HeapMemoryTotal: java.lang.String getUnit()>
265::<spec.harness.analyzer.TYInfo: void <init>(long,long)>
266::<spec.harness.analyzer.AnalyzerBase: void <init>()>
267::<spec.harness.analyzer.AnalyzerBase: void addErrorToSuiteResult(java.lang.String)>
268::<spec.harness.analyzer.AnalyzerBase: void addViolationToSuiteResult(java.lang.String)>
269::<spec.harness.analyzer.CallbackAnalyzerExample$NumberResult: void <init>(double,java.lang.String,java.lang.String)>
270::<spec.harness.Util: void <init>()>
271::<spec.harness.Util: long getTimeProperty(java.lang.String,java.lang.String)>
272::<spec.harness.Util: long getTimeAsMillis(java.lang.String)>
273::<spec.harness.Util: long getTimeAsSeconds(java.lang.String)>
274::<spec.harness.Util: int getHwtCalcProperty(java.lang.String,java.lang.String)>
275::<spec.harness.Util: boolean getBoolProperty(java.lang.String,java.lang.String)>
276::<spec.harness.Util: int getIntProperty(java.lang.String,java.lang.String)>
277::<spec.harness.Util: long getLongProperty(java.lang.String,java.lang.String)>
278::<spec.harness.Util: java.lang.String getPropertyHelper(java.util.Properties,java.lang.String,java.lang.String)>
279::<spec.harness.Util: java.lang.String getProperty(java.lang.String,java.lang.String)>
280::<spec.harness.Util: java.lang.String getDefaultProperty(java.lang.String,java.lang.String)>
281::<spec.harness.Util: java.lang.String getUserProperty(java.lang.String,java.lang.String)>
282::<spec.harness.Util: void printProperties(java.util.Properties)>
283::<spec.harness.Util: void printProperties(java.io.PrintStream,java.util.Properties)>
284::<spec.harness.Util: void printReqs(java.util.HashMap)>
285::<spec.harness.Util: void printProperties(java.io.PrintStream,java.util.HashMap)>
286::<spec.harness.Util: boolean sleep(long)>
287::<spec.harness.Util: boolean isScimarkAndNotMonteCarlo(java.lang.String)>
288::<spec.harness.Util: java.lang.String getNextRawFileInDir()>
289::<spec.harness.Util: boolean createDir(java.io.File)>
290::<spec.harness.Util: java.lang.String getNextRawFileInDir(java.io.File)>
291::<spec.harness.Util: boolean isBenchmark(java.lang.String)>
292::<spec.harness.Util: java.lang.String[] parseDefaultJvmArgs()>
293::<spec.harness.Util: java.lang.String getSizeFromHeapArg(java.lang.String)>
294::<spec.harness.Context$1: void <init>()>
295::<spec.harness.BenchmarkThread: void <init>(spec.harness.results.BenchmarkResult,int)>
296::<spec.harness.BenchmarkThread: boolean executeIteration()>
297::<spec.harness.BenchmarkThread: spec.harness.results.LoopResult runLoop(spec.harness.results.IterationResult)>
298::<spec.harness.KnownIssues: void <init>()>
299::<spec.harness.KnownIssues: void printKnownIssuesInfo()>
300::<spec.harness.KnownIssues: void printKnownIssueXmlTransformRace()>
301::<spec.harness.KnownIssues: void printKnownIssueJavacVersion()>
302::<spec.harness.KnownIssues: void printKnownIssueutOfMemoryError()>
303::<spec.harness.KnownIssues: void <clinit>()>
304::<spec.harness.results.BenchmarkResult: void <init>()>
305::<spec.harness.results.BenchmarkResult: void setIterationTime(long)>
306::<spec.harness.results.BenchmarkResult: java.lang.String durDesc()>
307::<spec.harness.results.BenchmarkResult: double getScore()>
308::<spec.harness.results.BenchmarkResult: java.lang.String resultString()>
309::<spec.harness.results.BenchmarkResult: boolean isValid()>
310::<spec.harness.results.BenchmarkResult: java.util.List getAllErrors(java.lang.String)>
311::<spec.harness.results.BenchmarkResult: void headerToXml(java.io.PrintStream,int)>
312::<spec.harness.results.BenchmarkResult: void middleToXml(java.io.PrintStream,int)>
313::<spec.harness.results.BenchmarkResult: void footerToXml(java.io.PrintStream,int)>
314::<spec.harness.results.TestResult: void <init>()>
315::<spec.harness.results.TestResult: void addError(java.lang.String)>
316::<spec.harness.results.TestResult: void ptxAttrib(java.io.PrintStream,int,java.lang.String,java.lang.String,boolean,java.lang.String)>
317::<spec.harness.results.TestResult: void ptxAttrib(java.io.PrintStream,int,java.lang.String,long,boolean,java.lang.String)>
318::<spec.harness.results.TestResult: void ptxAttrib(java.io.PrintStream,int,java.lang.String,double,boolean,java.lang.String)>
319::<spec.harness.results.TestResult: void ptxAttrib(java.io.PrintStream,int,java.lang.String,boolean,boolean,java.lang.String)>
320::<spec.harness.results.TestResult: void ptxAttrib(java.io.PrintStream,int,java.lang.String,java.lang.String[],boolean,java.lang.String)>
321::<spec.harness.results.TestResult: void ptxElement(java.io.PrintStream,int,java.lang.String,java.lang.String)>
322::<spec.harness.results.TestResult: void ptxElementOpen(java.io.PrintStream,int,java.lang.String)>
323::<spec.harness.results.TestResult: void ptxElementStartOpen(java.io.PrintStream,int,java.lang.String,boolean)>
324::<spec.harness.results.TestResult: void ptxElementClose(java.io.PrintStream,int,java.lang.String)>
325::<spec.harness.results.TestResult: java.lang.String ptxArrToValue(java.lang.String[])>
326::<spec.harness.results.TestResult: java.lang.String millisAsSec(long)>
327::<spec.harness.results.TestResult: java.lang.String getIndent(int)>
328::<spec.harness.results.TestResult: java.lang.String correctContent(java.lang.String,boolean)>
329::<spec.harness.results.TestResult: void <clinit>()>
330::<spec.harness.results.LoopResult: void <init>()>
331::<spec.harness.results.LoopResult: java.util.List getAllErrors(java.lang.String)>
332::<spec.harness.results.SuiteResult: void <init>()>
333::<spec.harness.results.SuiteResult: void addJvmInfo(java.lang.String,java.util.Properties,java.lang.String)>
334::<spec.harness.results.SuiteResult: void addJvmInfo(java.lang.String,java.lang.String)>
335::<spec.harness.results.SuiteResult: void addRunInfo(java.lang.String,java.util.Properties,java.lang.String)>
336::<spec.harness.results.SuiteResult: void addSwInfo(java.lang.String,java.util.Properties,java.lang.String)>
337::<spec.harness.results.SuiteResult: void addHwInfo(java.lang.String,java.util.Properties,java.lang.String)>
338::<spec.harness.results.SuiteResult: void addViolation(java.lang.String)>
339::<spec.harness.results.SuiteResult: void addConfiguration(java.lang.String)>
340::<spec.harness.results.SuiteResult: java.util.List getAllErrors(java.lang.String)>
341::<spec.harness.results.SuiteResult: void headerToXml(java.io.PrintStream,int)>
342::<spec.harness.results.SuiteResult: void footerToXml(java.io.PrintStream,int)>
343::<spec.harness.results.IterationResult: void <init>()>
344::<spec.harness.results.IterationResult: java.lang.String durDesc()>
345::<spec.harness.results.IterationResult: java.lang.String resultString(java.lang.String)>
346::<spec.harness.results.IterationResult: double getScore()>
347::<spec.harness.results.IterationResult: boolean isValid()>
348::<spec.harness.results.IterationResult: java.util.List getAllErrors(java.lang.String)>
349::<spec.harness.results.IterationResult: void toXml(java.io.PrintStream,int)>
350::<spec.harness.ProgramRunner: void <init>(spec.harness.results.BenchmarkResult,int)>
351::<spec.harness.ProgramRunner: void run()>
352::<spec.harness.ProgramRunner: boolean setupBenchmarkMethods()>
353::<spec.harness.ProgramRunner: spec.harness.SpecJVMBenchmarkBase createBmInstance(spec.harness.results.BenchmarkResult,int)>
354::<spec.harness.ProgramRunner: java.lang.String invokeBmTestTypeMethod()>
355::<spec.harness.ProgramRunner: void invokeBmSetupBenchmark()>
356::<spec.harness.ProgramRunner: void invokeBmSetupIteration()>
357::<spec.harness.ProgramRunner: void invokeBmTearDownIteration()>
358::<spec.harness.ProgramRunner: void invokeBmTearDownBenchmark()>
359::<spec.harness.ProgramRunner: boolean runBenchmark()>
360::<spec.harness.ProgramRunner: boolean runIteration(java.lang.String,spec.harness.results.IterationResult,spec.harness.results.BenchmarkResult)>
361::<spec.harness.ProgramRunner: java.lang.String getStackTraceAsString(java.lang.Throwable)>
362::<spec.harness.ProgramRunner: int getNoBmHarnessThreads(spec.harness.results.BenchmarkResult)>
363::<spec.harness.ProgramRunner: void pause(long)>
364::<spec.harness.ProgramRunner: void endOfMeasurementInterval(long)>
365::<spec.harness.ProgramRunner: void <clinit>()>
366::<spec.harness.StopBenchmarkException: void <init>(java.lang.String)>
367::<spec.harness.StopBenchmarkException: void <init>(java.lang.String,java.lang.Throwable)>
368::<spec.harness.Constants: void <init>()>
369::<spec.harness.VMVersionTest: void <init>()>
370::<spec.harness.VMVersionTest: java.lang.String getVersionInfo()>
371::<spec.harness.VMVersionTest: void main(java.lang.String[])>
